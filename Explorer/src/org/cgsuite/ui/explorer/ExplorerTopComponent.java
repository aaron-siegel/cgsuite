/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cgsuite.ui.explorer;

import java.awt.event.KeyEvent;
import java.awt.Color;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import org.cgsuite.lang.CgsuiteCollection;
import org.cgsuite.lang.CgsuiteObject;
import org.cgsuite.lang.CgsuitePackage;
import org.cgsuite.lang.Domain;
import org.cgsuite.lang.Game;
import org.cgsuite.lang.explorer.EditorPanel;
import org.cgsuite.lang.explorer.Explorer;
import org.cgsuite.lang.explorer.ExplorerNode;
import org.cgsuite.lang.explorer.ExplorerWindow;
import org.cgsuite.lang.output.Output;
import org.cgsuite.lang.output.StyledTextOutput;
import org.cgsuite.ui.worksheet.CalculationCapsule;
import org.cgsuite.ui.worksheet.InputPane;
import org.cgsuite.ui.worksheet.WorksheetPanel;
import org.openide.util.NbBundle;
import org.openide.util.Task;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.RequestProcessor;
import org.openide.util.TaskListener;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.cgsuite.ui.explorer//Explorer//EN",
autostore = false)
public final class ExplorerTopComponent extends TopComponent implements ExplorerWindow, ExplorerTreeListener, KeyListener, TaskListener
{

    private static ExplorerTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ExplorerTopComponent";

    private Explorer explorer;
    private EditorPanel editorPanel;
    private String evaluationText;

    private Domain explorerDomain;
    private CalculationCapsule currentCapsule;
    
    private WorksheetPanel analysisWorksheetPanel;

    public ExplorerTopComponent()
    {
//        gamesToNodes = new HashMap<Game,ExplorerNode>();
        initComponents();
        inputPanel.getInputPane().addKeyListener(this);
        commandTextArea.setBackground(Color.white);
        editorScrollPane.getViewport().setBackground(Color.white);
        treeScrollPane.getViewport().setBackground(Color.white);
        analysisScrollPane.getViewport().setBackground(Color.white);
        analysisWorksheetPanel = new WorksheetPanel();
        analysisWorksheetPanel.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
        analysisScrollPane.setViewportView(analysisWorksheetPanel);
        analysisWorksheetPanel.clear();
        inputPanel.getInputPane().activate();
        setName(NbBundle.getMessage(ExplorerTopComponent.class, "CTL_ExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(ExplorerTopComponent.class, "HINT_ExplorerTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        explorerDomain = new Domain(explorer, CgsuitePackage.DEFAULT_IMPORT);
    }

    public void setExplorer(Explorer explorer)
    {
        this.explorer = explorer;
        tree.setExplorer(explorer);
        tree.addExplorerTreeListener(this);
        updateEditor();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treePopupMenu = new javax.swing.JPopupMenu();
        expandSensibleOptionsMenuItem = new javax.swing.JMenuItem();
        primarySplitPane = new javax.swing.JSplitPane();
        detailSplitPane = new javax.swing.JSplitPane();
        editorScrollPane = new javax.swing.JScrollPane();
        analysisPanel = new javax.swing.JPanel();
        commandPanel = new javax.swing.JPanel();
        inputPanel = new org.cgsuite.ui.worksheet.InputPanel();
        commandTextArea = new javax.swing.JTextField();
        analysisScrollPane = new javax.swing.JScrollPane();
        treeScrollPane = new javax.swing.JScrollPane();
        tree = new org.cgsuite.ui.explorer.ExplorerTreePanel();
        infoPanel = new javax.swing.JPanel();
        addPositionButton = new javax.swing.JButton();
        typeLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(expandSensibleOptionsMenuItem, org.openide.util.NbBundle.getMessage(ExplorerTopComponent.class, "ExplorerTopComponent.expandSensibleOptionsMenuItem.text")); // NOI18N
        expandSensibleOptionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandSensibleOptionsMenuItemActionPerformed(evt);
            }
        });
        treePopupMenu.add(expandSensibleOptionsMenuItem);

        setBackground(java.awt.Color.white);
        setLayout(new java.awt.BorderLayout());

        primarySplitPane.setBackground(new java.awt.Color(255, 255, 255));
        primarySplitPane.setDividerLocation(480);

        detailSplitPane.setDividerLocation(480);
        detailSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        editorScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        detailSplitPane.setLeftComponent(editorScrollPane);

        analysisPanel.setBackground(new java.awt.Color(255, 255, 255));
        analysisPanel.setLayout(new java.awt.BorderLayout());

        commandPanel.setBackground(new java.awt.Color(255, 255, 255));
        commandPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        commandPanel.setLayout(new javax.swing.BoxLayout(commandPanel, javax.swing.BoxLayout.Y_AXIS));

        inputPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 8, 0, 4));
        commandPanel.add(inputPanel);

        commandTextArea.setEditable(false);
        commandTextArea.setFont(new java.awt.Font("Monospaced", 0, 12));
        commandTextArea.setText(org.openide.util.NbBundle.getMessage(ExplorerTopComponent.class, "ExplorerTopComponent.commandTextArea.text")); // NOI18N
        commandTextArea.setAlignmentX(0.0F);
        commandTextArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 8, 2, 4));
        commandPanel.add(commandTextArea);

        analysisPanel.add(commandPanel, java.awt.BorderLayout.PAGE_START);

        analysisScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        analysisPanel.add(analysisScrollPane, java.awt.BorderLayout.CENTER);

        detailSplitPane.setRightComponent(analysisPanel);

        primarySplitPane.setLeftComponent(detailSplitPane);

        treeScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                treeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                treeMouseReleased(evt);
            }
        });
        treeScrollPane.setViewportView(tree);

        primarySplitPane.setRightComponent(treeScrollPane);

        add(primarySplitPane, java.awt.BorderLayout.CENTER);

        infoPanel.setBackground(new java.awt.Color(255, 255, 255));
        infoPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        infoPanel.setLayout(new javax.swing.BoxLayout(infoPanel, javax.swing.BoxLayout.LINE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(addPositionButton, org.openide.util.NbBundle.getMessage(ExplorerTopComponent.class, "ExplorerTopComponent.addPositionButton.text")); // NOI18N
        addPositionButton.setEnabled(false);
        addPositionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPositionButtonActionPerformed(evt);
            }
        });
        infoPanel.add(addPositionButton);

        typeLabel.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(typeLabel, org.openide.util.NbBundle.getMessage(ExplorerTopComponent.class, "ExplorerTopComponent.typeLabel.text")); // NOI18N
        typeLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 8, 4, 4));
        infoPanel.add(typeLabel);

        add(infoPanel, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private CgsuiteObject lo, ro;

    private void expandSensibleOptionsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_expandSensibleOptionsMenuItemActionPerformed
    {//GEN-HEADEREND:event_expandSensibleOptionsMenuItemActionPerformed
        final ExplorerNode node = tree.getSelectedNode();
        if (node == null)
            return;
        
        final Game g = node.getG();
        
        RequestProcessor.Task task = CalculationCapsule.REQUEST_PROCESSOR.create(new Runnable()
        {
            @Override
            public void run()
            {
                lo = g.invokeMethod("SensibleLeftOptions$get");
                ro = g.invokeMethod("SensibleRightOptions$get");
            }
        });

        task.schedule(0);
        task.waitFinished();

        for (CgsuiteObject gl : (CgsuiteCollection) lo)
        {
            node.addLeftChild((Game) gl);
        }
        for (CgsuiteObject gr : (CgsuiteCollection) ro)
        {
            node.addRightChild((Game) gr);
        }

        tree.refresh();
    }//GEN-LAST:event_expandSensibleOptionsMenuItemActionPerformed

    private void treeMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_treeMouseClicked
    {//GEN-HEADEREND:event_treeMouseClicked
        if (evt.isPopupTrigger())
            doTreePopup(evt);
    }//GEN-LAST:event_treeMouseClicked

    private void treeMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_treeMousePressed
    {//GEN-HEADEREND:event_treeMousePressed
        if (evt.isPopupTrigger())
            doTreePopup(evt);
    }//GEN-LAST:event_treeMousePressed

    private void treeMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_treeMouseReleased
    {//GEN-HEADEREND:event_treeMouseReleased
        if (evt.isPopupTrigger())
            doTreePopup(evt);
    }//GEN-LAST:event_treeMouseReleased

    private void addPositionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addPositionButtonActionPerformed
    {//GEN-HEADEREND:event_addPositionButtonActionPerformed
        Game g = (Game) editorPanel.constructObject();
        ExplorerNode node = explorer.addAsRoot(g);
        tree.setSelectedNode(node);
    }//GEN-LAST:event_addPositionButtonActionPerformed

    private void doTreePopup(MouseEvent evt)
    {
        treePopupMenu.show(tree, evt.getX(), evt.getY());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPositionButton;
    private javax.swing.JPanel analysisPanel;
    private javax.swing.JScrollPane analysisScrollPane;
    private javax.swing.JPanel commandPanel;
    private javax.swing.JTextField commandTextArea;
    private javax.swing.JSplitPane detailSplitPane;
    private javax.swing.JScrollPane editorScrollPane;
    private javax.swing.JMenuItem expandSensibleOptionsMenuItem;
    private javax.swing.JPanel infoPanel;
    private org.cgsuite.ui.worksheet.InputPanel inputPanel;
    private javax.swing.JSplitPane primarySplitPane;
    private org.cgsuite.ui.explorer.ExplorerTreePanel tree;
    private javax.swing.JPopupMenu treePopupMenu;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ExplorerTopComponent getDefault()
    {
        if (instance == null)
        {
            instance = new ExplorerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ExplorerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ExplorerTopComponent findInstance()
    {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null)
        {
            Logger.getLogger(ExplorerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ExplorerTopComponent)
        {
            return (ExplorerTopComponent) win;
        }
        Logger.getLogger(ExplorerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType()
    {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened()
    {
    }

    @Override
    public void componentClosed()
    {
    }

    @Override
    public void selectionPathChanged(List<ExplorerNode> newPath)
    {
        updateEditor();
        reeval();
    }

    private void updateEditor()
    {
        ExplorerNode node = tree.getSelectedNode();
        if (node == null)
        {
            this.typeLabel.setText("No position is selected.");
        }
        else
        {
            this.editorPanel = node.getG().toEditor();
            this.editorScrollPane.setViewportView(editorPanel);
            this.addPositionButton.setEnabled(true);
            this.typeLabel.setText("Exploring " + node.getG().getCgsuiteClass().getQualifiedName() + ".");
        }
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    Object readProperties(java.util.Properties p)
    {
        if (instance == null)
        {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p)
    {
        String version = p.getProperty("version");
    }

    @Override
    protected String preferredID()
    {
        return PREFERRED_ID;
    }

    private synchronized void reeval()
    {
        analysisWorksheetPanel.clear();
        
        if (evaluationText != null && tree.getSelectedNode() != null)
        {
            explorerDomain.put("g", tree.getSelectedNode().getG());

            CalculationCapsule capsule = new CalculationCapsule(evaluationText, explorerDomain);
            RequestProcessor.Task task = CalculationCapsule.REQUEST_PROCESSOR.create(capsule);
            task.addTaskListener(this);
            task.schedule(0);

            boolean finished = false;

            try
            {
                finished = task.waitFinished(50);
            }
            catch (InterruptedException exc)
            {
            }

            Output[] output;

            if (finished)
            {
                output = capsule.getOutput();
            }
            else
            {
                output = new Output[] { new StyledTextOutput("Calculating ...") };
                this.currentCapsule = capsule;
            }

            analysisWorksheetPanel.postOutput(output);
        }
        
        analysisScrollPane.validate();
    }
    
    @Override
    public ExplorerNode getSelectedNode()
    {
        return tree.getSelectedNode();
    }
    
    @Override
    public List<ExplorerNode> getSelectionPath()
    {
        return tree.getSelectionPath();
    }

    @Override
    public synchronized void taskFinished(Task task)
    {
        if (currentCapsule == null)
            return;

        analysisWorksheetPanel.clear();
        Output[] output = currentCapsule.getOutput();
        currentCapsule = null;
        
        analysisWorksheetPanel.postOutput(output);
        analysisScrollPane.validate();
    }

    @Override
    public void keyTyped(KeyEvent e)
    {
    }

    @Override
    public void keyPressed(KeyEvent evt)
    {
        InputPane source = (InputPane) evt.getSource();

        switch (evt.getKeyCode())
        {
            case KeyEvent.VK_ENTER:
                if (evt.getModifiers() == 0)
                {
                    evt.consume();
                    if (!source.getText().equals(""))
                    {
                        evaluationText = source.getText();
                        commandTextArea.setText(evaluationText);
                        source.setText("");
                        reeval();
                    }
                }
                else if (evt.getModifiers() == KeyEvent.SHIFT_MASK)
                {
                    evt.consume();
                    source.insert("\n", source.getCaretPosition());
                }
                break;
        }
    }

    @Override
    public void keyReleased(KeyEvent e)
    {
    }
}
