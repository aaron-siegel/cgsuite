/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cgsuite.ui.explorer;

import org.cgsuite.lang.explorer.ExplorerNode;
import org.cgsuite.lang.explorer.DefaultEditorPanel;
import java.awt.Color;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;
import org.cgsuite.lang.CgsuiteObject;
import org.cgsuite.lang.Game;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.cgsuite.ui.explorer//Explorer//EN",
autostore = false)
public final class ExplorerTopComponent extends TopComponent
{

    private static ExplorerTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ExplorerTopComponent";

    private Map<Game,ExplorerNode> gamesToNodes;

    public ExplorerTopComponent()
    {
        gamesToNodes = new HashMap<Game,ExplorerNode>();
        initComponents();
        jScrollPane1.getViewport().setBackground(Color.white);
        jScrollPane2.getViewport().setBackground(Color.white);
        setName(NbBundle.getMessage(ExplorerTopComponent.class, "CTL_ExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(ExplorerTopComponent.class, "HINT_ExplorerTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        gameTreeComponent1 = new org.cgsuite.ui.explorer.ExplorerTreeComponent();

        setBackground(java.awt.Color.white);
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setBackground(new java.awt.Color(255, 255, 255));
        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout gameTreeComponent1Layout = new javax.swing.GroupLayout(gameTreeComponent1);
        gameTreeComponent1.setLayout(gameTreeComponent1Layout);
        gameTreeComponent1Layout.setHorizontalGroup(
            gameTreeComponent1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );
        gameTreeComponent1Layout.setVerticalGroup(
            gameTreeComponent1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(gameTreeComponent1);

        jSplitPane1.setRightComponent(jScrollPane2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.cgsuite.ui.explorer.ExplorerTreeComponent gameTreeComponent1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ExplorerTopComponent getDefault()
    {
        if (instance == null)
        {
            instance = new ExplorerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ExplorerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ExplorerTopComponent findInstance()
    {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null)
        {
            Logger.getLogger(ExplorerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ExplorerTopComponent)
        {
            return (ExplorerTopComponent) win;
        }
        Logger.getLogger(ExplorerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType()
    {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p)
    {
        if (instance == null)
        {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID()
    {
        return PREFERRED_ID;
    }

    public void addGame(Game g)
    {
        ExplorerNode initialNode = nodeForGame(g);
        gameTreeComponent1.getRootNode().addLeftChild(initialNode);
        gameTreeComponent1.setSelectedNode(initialNode);
        updateEditState();
    }

    private ExplorerNode nodeForGame(Game g)
    {
        if (gamesToNodes.containsKey(g))
        {
            return gamesToNodes.get(g);
        }

        ExplorerNode node = new ExplorerNode(g);
        gamesToNodes.put(g, node);
        return node;
    }

    private void updateEditState()
    {
        ExplorerNode node = gameTreeComponent1.getSelectedNode();
        if (node != null)
        {
            DefaultEditorPanel dep = new DefaultEditorPanel();
            dep.setDisplayedObject(node.getG());
            jScrollPane1.setViewportView(dep);
        }
    }
}
