/*
 * Heap.cgs
 *
 * Created by asiegel on Jul 20, 2011
 */

class Heap extends ImpartialGame

    var rules;
    var n;

    method Heap(rules, Integer n)
    
        rules := HeapRules.MakeRules(rules);
        n := n;
    
    end
    
    override method Options(Player player)
    
        opts := {};
        for list in rules.HeapOptions(n) do
            if list.Length == 0 then
                opts.Add(0);
            elseif list.Length == 1 then
                opts.Add(Heap(rules, list[1]));
            else
                opts.Add(SumGame(listof(Heap(rules, k) for k in list)));
            end
        end
        return opts;
    
    end
    
    override property NimValue.get
    
        return rules.NimValue(n);
        
    end
    
    override property ToString.get
    
        return "Heap(" + rules.ToString + "," + n.ToString + ")";
    
    end

end