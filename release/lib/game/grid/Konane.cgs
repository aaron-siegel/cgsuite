class Konane extends GridGame

    public method Konane(Grid grid)
        this.GridGame(grid);
    end

    public method Options(Player player)

        options := {};

        us := player.Ordinal;
        them := player.Opponent.Ordinal;

        for m from 1 to this.grid.NumRows do
            for n from 1 to this.grid.NumColumns do
                if this.grid[m,n] == us then

                    for d in Direction.Orthogonal do
                        if this.grid[m+d.RowShift,n+d.ColumnShift] == them and
                           this.grid[m+2*d.RowShift,n+2*d.ColumnShift] == 0 then

                           curGrid := this.grid;
                           curM := m;
                           curN := n;
                           while curGrid[curM+d.RowShift,curN+d.ColumnShift] == them and
                                 curGrid[curM+2*d.RowShift,curN+2*d.ColumnShift] == 0 do

                               newGrid := curGrid.Copy();
                               newGrid[curM,curN] := 0;
                               newGrid[curM+d.RowShift,curN+d.ColumnShift] := 0;
                               newGrid[curM+2*d.RowShift,curN+2*d.ColumnShift] := us;

                               options.Add(Konane(newGrid));
                               curGrid := newGrid;
                               curM := curM + 2*d.RowShift;
                               curN := curN + 2*d.ColumnShift;

                           end
                       end
                   end

               end
           end
       end;

       return options;

    end

    public property CharMap.get
        return ".xo";
    end
    
    public property Icons.get
        return
        [
            GridIcon.Blank,
            GridIcon.BlackStone,
            GridIcon.WhiteStone
        ];
    end

end