/*
 * Lasers.cgs
 *
 * Lasers is played on a grid containing red, blue and green lasers, burned
 * out lasers, and possibly blank squares. Left's options are to choose a blue
 * or green laser, and fire it. Firing a laser sends beams in the four orthogonal
 * directions. These burn out any active lasers they hit, pass through blank squares
 * and are blocked by previously burned lasers.
 *
 * This implementation supports one rule variation through the use of an optional
 * parameter:
 *   - the allowed set of directions can be changed (but is the same for both players)
 *
 * Examples:
 * g := game.grid.Lasers("bb|bb");
 * g.CanonicalForm; (should be 2)
 * g := game.grid.Lasers("brb|rbr|brb");
 * g.CanonicalForm; (should be {4 | 0})
 * g := game.grid.Lasers("brb|rbr|brb", directions => Direction.All);
 * g.CanonicalForm; (should be 1)
 *  
 * Created by malbert on 31/07/2011
 */

class Lasers extends GridGame

    var directions;

    method Lasers(grid, directions ? Direction.Orthogonal)
        this.GridGame(grid);
    end

    method Options(Player player)

        options := {};

        us := player.Ordinal;
        either := 3;
        burned := 4;
        
        for m from 1 to grid.RowCount do
            for n from 1 to grid.ColumnCount do
                if grid[m,n] == us or grid[m,n] == either then
                    copy := grid;
                    copy[m,n] := burned;
                    for d in directions do
                        gap := 1;
                        while grid[m + gap*d.RowShift, n + gap*d.ColumnShift] >= 0 and 
                            grid[m + gap*d.RowShift, n + gap*d.ColumnShift] != burned do
                            if grid[m + gap*d.RowShift, n + gap*d.ColumnShift] != 0 then
                                copy[m + gap*d.RowShift, n + gap*d.ColumnShift] := burned;
                            end
                            gap := gap+1;
                        end
                    end
                    options.Add(Lasers(copy, directions));
                end
            end
        end

        return options;

    end
    
    override property CanonicalForm.get

        components := grid.Decompose(4);
        g := 0;
        for component in components do
            g := g + Lasers(component.SymmetryInvariantRepresentation, directions).super.CanonicalForm;
        end
        return g;

    end

    
    override property CharMap.get
        return ".brg#";
    end
    
    override property Icons.get
        return
        [
            GridIcon.Blank,
            GridIcon.BlueSquare,
            GridIcon.RedSquare,
            GridIcon.GreenSquare,
            GridIcon.BlackSquare
        ];
    end
    
end