class ToadsAndFrogs extends GridGame

    var backsliding;

    method ToadsAndFrogs(grid, backsliding ? false)
        this.GridGame(grid);
        if grid.NumRows != 1 then
            error("ToadsAndFrogs grid must be 1 x N.");
        end
    end

    method Options(Player player)

        options := {};

        us := player.Ordinal;
        them := player.Opponent.Ordinal;

        for n from 1 to grid.NumColumns do
            if grid[1,n] == us then

                if grid[1,n+player.Sign] == 0 then
                    copy := grid;
                    copy[1,n] := 0;
                    copy[1,n+player.Sign] := us;
                    options.Add(ToadsAndFrogs(copy, backsliding));
                elseif grid[1,n+player.Sign] == them and grid[1,n+2*player.Sign] == 0 then
                    copy := grid;
                    copy[1,n] := 0;
                    copy[1,n+2*player.Sign] := us;
                    options.Add(ToadsAndFrogs(copy, backsliding));
                end;

                if backsliding and grid[1,n-player.Sign] == 0 then
                    copy := grid;
                    copy[1,n] := 0;
                    copy[1,n-player.Sign] := us;
                    options.Add(ToadsAndFrogs(copy, backsliding));
                end

            end
        end

        return options;

    end

    override property CharMap.get
        return ".tf";
    end
    
    override property Icons.get
        return
        [
            GridIcon.Blank,
            GridIcon.Toad,
            GridIcon.Frog
        ];
    end

    /*
    property CanonicalForm.get

        // Check the death leap principle (Erickson's criterion).

        deathLeap := true;
        for n from 1 to grid.NumColumns-1 do
            if grid[1,n] == 1 and grid[1,n+1] == 0 or
               grid[1,n] == 0 and grid[1,n+1] == 2 or
               grid[1,n] == 1 and grid[1,n+1] == 2 and grid[1,n+2] == 0 and grid[1,n+3] == 0 or
               grid[1,n] == 0 and grid[1,n+1] == 0 and grid[1,n+2] == 1 and grid[1,n+3] == 2 then

                deathLeap := false;
                break;

            end
        end;

        if deathLeap then
            return 0;
        end;

        return super.CanonicalForm;

    end
    */

end