class Domineering extends GridGame

    method Domineering(grid)
        this.GridGame(grid);
    end

    override method Options(Player player)

        options := {};

        us := player.Ordinal;

        if player == Player.Left then
            mDelta := 1; nDelta := 0;
        else
            mDelta := 0; nDelta := 1;
        end

        for m from 1 to grid.RowCount do
            for n from 1 to grid.ColumnCount do
                if grid[m,n] == 0 and grid[m+mDelta,n+nDelta] == 0 then
                    copy := grid;
                    copy[m,n] := 1;
                    copy[m+mDelta,n+nDelta] := 1;
                    options.Add(Domineering(copy));
                end
            end
        end

        return options;

    end

    override property CanonicalForm.get

        components := grid.Decompose(1);
        g := 0;
        for component in components do
            g := g + Domineering(component.SymmetryInvariantRepresentation).super.CanonicalForm;
        end
        return g;

    end
    
    override property CharMap.get
        return ".#";
    end
    
    override property Icons.get
        return
        [
            GridIcon.Blank,
            GridIcon.GraySquare
        ];
    end


end
