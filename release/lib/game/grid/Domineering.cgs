class Domineering extends GridGame

    method Domineering(grid)
        this.GridGame(grid);
    end

    method Options(Player player)

        options := {};

        us := player.Ordinal;

        if player == Player.Left then
            mDelta := 1; nDelta := 0;
        else
            mDelta := 0; nDelta := 1;
        end;

        for m from 1 to this.grid.NumRows do
            for n from 1 to this.grid.NumColumns do
                if this.grid[m,n] == 0 and this.grid[m+mDelta,n+nDelta] == 0 then
                    copy := this.grid;
                    copy[m,n] := 1;
                    copy[m+mDelta,n+nDelta] := 1;
                    options.Add(Domineering(copy));
                end
            end
        end;

        return options;

    end

    property CanonicalForm.get

        components := this.grid.Decompose(1);
        g := 0;
        for grid in components do
            g := g + Domineering(grid.SymmetryInvariantRepresentation).super.CanonicalForm;
        end;
        return g;

    end
    
    property CharMap.get
        return ".#";
    end
    
    property Icons.get
        return
        [
            GridIcon.Blank,
            GridIcon.Grayed
        ];
    end


end
