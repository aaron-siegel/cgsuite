/*${cgsuite.banner}*/

/*
 * Clobber.cgs
 *
 * Clobber is played on a grid with white and black stones (and
 * possibly some grayed out squares).  Left can move any black stone 
 * in any orthogonal direction, provided that the desination square 
 * is occupied by a white stone.  The targeted white stone is then
 * captured and removed from the game. Likewise, Right may move any
 * white stone onto a targeted black stone.
 *
 * This implementation supports several rule variations
 * through the use of optional parameters:
 *   - the allowed set of directions for clobbering can
 *     be changed.
 *   - in antiClobber, stones are moved onto vacant spaces
 *     and leave behind a stone of the opponent's colour
 *     on the original square.
 *   - in enlightened clobber, you may not clobber a stone
 *     if this would leave a monochrome connected component
 *
 * Mandatory parameters:
 *   - a grid, or string representation of a grid
 *
 * Optional parameters:
 *   - (directions) the allowed movement directions 
 *   - (anti) a boolean 
 *   - (enlightened) a boolean
 * 
 * Examples:
 * g := game.grid.Clobber("oox|oo.|oox");
 * g.CanonicalForm; (should be down-4-*)
 * h := game.grid.Clobber("xxo|oxx", directions => Direction.All);
 * h.CanonicalForm; (should be double-up-*)
 * k := game.grid.Clobber(".#x#|...o", anti => true);
 * k.CanonicalForm; (should be +/- 3)
 * m := game.grid.Clobber("oooox").CanonicalForm (should be 3)
 */

class Clobber extends GridGame

    var directions;
    var anti;
    var enlightened;

    method Clobber(grid, directions ? Direction.Orthogonal, anti ? false, enlightened ? false)
    
        this.GridGame(grid);
        
    end
    
    override method Options(Player player)

        options := {};

        us := player.Ordinal;
        them := player.Opponent.Ordinal;
        
        if anti then
            clobbered := 0;
            behind := them;
        else
            clobbered := them;
            behind := 0;
        end

        for m from 1 to grid.RowCount do
            for n from 1 to grid.ColumnCount do
                if grid[m,n] == us then
                    for d in directions do
                        if grid[m+d.RowShift,n+d.ColumnShift] == clobbered then
                            copy := grid;
                            copy[m,n] := behind;
                            copy[m+d.RowShift,n+d.ColumnShift] := us;
                            moveOk := true;
                            if enlightened then
                                moveOk := copy.LibertyCount(m+d.RowShift,n+d.ColumnShift,them) > 0;
                                for dd in Direction.Orthogonal do
                                    r := m + dd.RowShift;
                                    c := n + dd.ColumnShift;
                                    moveOk := moveOk and (copy[r,c] <= 0 or copy.LibertyCount(r,c,3-copy[r,c]) > 0);
                                end
                            end
                            if moveOk then
                                options.Add(Clobber(copy, directions, anti, enlightened));
                            end
                        end
                    end

                end
            end
        end
       
        return options;

    end

    override property CharMap.get
        return ".xo#";
    end
    
    override property Icons.get
        if anti then
            return
            [
                GridIcon.Blank,
                GridIcon.BlackStone,
                GridIcon.WhiteStone,
                GridIcon.GraySquare
            ];
        else
            return
            [
                GridIcon.Blank,
                GridIcon.BlackStone,
                GridIcon.WhiteStone
            ];
        end
    end

end