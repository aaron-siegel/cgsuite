class Game : java "org.cgsuite.lang.Game"

    static var memory := {=>};
    static var descent := {};

    method op+ (Game obj) : java "add";
    method op- (Game obj)
        return this + (-obj);
    end
    method op neg () : java "negate";
    
    method Options(Player player)
        error("Subclasses of Game must override the options method.");
    end

    property LeftOptions.get
        return Options(Player.Left);
    end
    property RightOptions.get
        return Options(Player.Right);
    end
    
    property CanonicalForm.get
    
        if Game.descent.Contains(this) then
            error("Unable to compute canonical form: the specified game is loopy.");
        end

        cg := this.Class.memory[this];
        
        if nil != cg then
            return cg;
        end
        
        try
        
            Game.descent.Add(this);
            lo := LeftOptions;
            ro := RightOptions;
            clo := setof(g.CanonicalForm for g in lo);
            cro := setof(g.CanonicalForm for g in ro);
            cg := {clo|cro};
            
        finally
        
            Game.descent.Remove(this);
            
        end
        
        this.Class.memory[this] := cg;
        return cg;
        
    end

    method SensibleOptions(Player player)

        opts := Options(player);
        copts := CanonicalForm.Options(player);
        sopts := {};

        for k in copts do
            for g in opts do
                if (player == Player.Left  and g.CanonicalForm >= k) or
                   (player == Player.Right and g.CanonicalForm <= k) then

                   sopts.Add(g);
                   break;

                end
            end
        end

        return sopts;

    end
    
    method SensibleLines(Player player)
    
        copts := CanonicalForm.Options(player);
        lines := {};
        
        for k in copts do
        
            cur := this;
            line := [];
            
            do
            
                for g in cur.Options(player) do
                    if (player == Player.Left  and g.CanonicalForm >= k) or
                       (player == Player.Right and g.CanonicalForm <= k) then
                        
                        line.Add(g);
                        break;
                        
                    end
                end
                
                if g.CanonicalForm == k then
                    break;
                end
                
                // Find a reversible option
                
                for h in g.Options(player.Opponent) do
                    if (player == Player.Left  and h.CanonicalForm <= this.CanonicalForm) or
                       (player == Player.Right and h.CanonicalForm >= this.CanonicalForm) then
                       
                        line.Add(h);
                        cur := h;
                        break;
                    
                    end
                end
            
            end
            
            lines.Add(line);

        end
        
        return lines;
    
    end

    method RandomPlay(Player player)
        
        result := [];
        opts := Options(player);
        while (opts.Size > 0) do
            opt := opts.RandomElement;
            result.Add(opt);
            player := player.Opponent;
            opts := opt.Options(player);
        end
        return result;        
    
    end
    
    method RandomWinner(Player player)
    
        opts := Options(player);
        if opts.IsEmpty then
            return player.Opponent;
        end
        opt := opts.RandomElement;
        return opt.RandomWinner(player.Opponent);
    
    end
    
    property SensibleLeftOptions.get
        return SensibleOptions(Player.Left);
    end

    property SensibleRightOptions.get
        return SensibleOptions(Player.Right);
    end
    
    property SensibleLeftLines.get
        return SensibleLines(Player.Left);
    end

    property SensibleRightLines.get
        return SensibleLines(Player.Right);
    end
    
    property AtomicWeight.get
        return CanonicalForm.AtomicWeight;
    end
    
    property Birthday.get
        return CanonicalForm.Birthday;
    end
    
    property Freeze.get
        return CanonicalForm.Freeze;
    end
    
    property IsAllSmall.get
        return CanonicalForm.IsAllSmall;
    end
    
    property IsInfinitesimal.get
        return CanonicalForm.IsInfinitesimal;
    end
    
    property IsInteger.get
        return CanonicalForm.IsInteger;
    end
    
    property IsNimber.get
        return CanonicalForm.IsNimber;
    end
    
    property IsNumber.get
        return CanonicalForm.IsNumber;
    end
    
    property IsNumberish.get
        return CanonicalForm.IsNumberish;
    end
    
    property IsNumberTiny.get
        return CanonicalForm.IsNumberTiny;
    end
    
    property IsNumberUpStar.get
        return CanonicalForm.IsNumberUpStar;
    end
    
    property IsUptimal.get
        return CanonicalForm.IsUptimal;
    end
    
    property LeftStop.get
        return CanonicalForm.LeftStop;
    end
    
    property Mean.get
        return CanonicalForm.Mean;
    end
    
    property Outcome.get
        return CanonicalForm.Outcome;
    end
    
    property Rcf.get
        return CanonicalForm.Rcf;
    end
    
    property RightStop.get
        return CanonicalForm.RightStop;
    end
    
    property Temperature.get
        return CanonicalForm.Temperature;
    end
    
    property Thermograph.get
        return CanonicalForm.Thermograph;
    end
    
    property UptimalExpansion.get
        return CanonicalForm.UptimalExpansion;
    end

end
