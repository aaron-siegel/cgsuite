/*
 * SubsetIterator.cgs
 *
 * Created by malbert on 4/08/2011
 */

mutable class SubsetIterator extends Iterator

    var valueList;
    var subsetSize;
    var indexSeq;
     
    method SubsetIterator(Integer subsetSize, Collection vals) 
        
        if vals is Set then
            valueList := listof(x for x in vals);
        elseif vals is List then
            valueList := vals;
        else
            error("SubsetIterator requires a Set or List collection.");
        end
        
        
         if subsetSize > valueList.Length or subsetSize < 0 then
            indexSeq := nil;
        else
            indexSeq := listof(i for i from 1 to subsetSize);
        end
        
    end
    
    override property HasNext.get
           return indexSeq != nil;     
    end
    
    override property Next.get
    
        result := {};
        for i from 1 to indexSeq.Length do    
            result.Add(valueList[indexSeq[i]]);
        end
        
        for i from indexSeq.Length to 1 by -1 while indexSeq[i] == valueList.Length - indexSeq.Length + i do end;
        
        if i == 0 then
            indexSeq := nil;
        else
            indexSeq[i] := indexSeq[i] + 1;
            for j from i+1 to indexSeq.Length do
                indexSeq[j] := indexSeq[j-1] + 1;
            end
        end
        
        return result;
    end

end