/*${cgsuite.banner}*/

mutable class Grid : java "org.cgsuite.lang.game.Grid"

    method Grid(Integer rows, Integer columns) : java "Grid(int,int)";
    method op[](Integer row, Integer col) : java "getAt(int,int)";
    mutable method op[]:=(Integer row, Integer col, Integer value) : java "putAt(int,int,int)";
    method SubGrid(Integer startRow, Integer endRow, Integer startCol, Integer endCol) : java "subgrid(int,int,int,int)";
    method Paste(Grid other, Integer startRow, Integer startCol) : java "paste(org.cgsuite.lang.game.Grid,int,int)";
    method Clear() : java "clear";
    method Permute(Symmetry symmetry) : java "permute";
    method SymmetryInvariant(Collection symmetries) : java "symmetryInvariant";
    method Decompose(Integer boundaryValue) : java "decompose(int)";
    method LibertyCount(Integer row, Integer col, Integer libertyValue) : java "libertyCount(int,int,int)";

    static method ParseGrid(String str, String charmap) : java "parseGrid(java.lang.String,java.lang.String)";

    property RowCount.get : java "getNumRows";
    property ColumnCount.get : java "getNumColumns";

    override property ToString.get
        return this.MapString(".123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    end

    method MapString(String charMap) : java "toString(java.lang.String)";
    
    method Contains(Integer value)
        for r from 1 to RowCount do
            for c from 1 to ColumnCount do
                if this[r,c] == value then
                    return true;
                end
            end
        end
        return false;
    end

end