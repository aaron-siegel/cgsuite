/*
 * FilteredIterator.cgs
 *
 * A filtered iterator is built from an ordinary iterator and a filter
 * procedure, which should return true or false for each element produced
 * by the iterator.
 *
 * The filtered iterator returns successively those values generated by the
 * iterator for which the value of the filter procedure is true.
 *
 * Example: (print all 3x2 Clobber positions whose value is positive)
 * C := game.grid.Clobber;
 * clobIt := cgsuite.util.iterators.GridGameIterator(C, 3, 2, [0,1,2]);
 * filtIt := cgsuite.util.iterators.FilteredIterator(clobIt, g -> g.CanonicalForm > 0);
 * filtIt.TraverseWith(Worksheet.Print);
 *
 * Created by malbert on 9/08/2011
 */

mutable class FilteredIterator extends Iterator

    var iterator;
    var filter;
    var nextValue;
    
    method FilteredIterator(Iterator iterator, Procedure filter)
    end
    
    override mutable property HasNext.get
        if not iterator.HasNext then
            return false;
        end
        nextValue := iterator.Next;
        if filter(nextValue) then
            return true;
        end
        return this.HasNext
     end
     
     override mutable property Next.get
        return nextValue;
     end
     
     override mutable method Reset() 
        iterator.Reset();
        if iterator.HasNext then
            currentValue := iterator.Next;
        else
            currentValue := nil;
        end
     end
     
end