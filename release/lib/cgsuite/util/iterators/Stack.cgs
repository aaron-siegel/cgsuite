/*
 * Stack.cgs
 *
 * Implementation of a stack based iterator, backed by a deque.
 * In contrast to the deque implementation, the iterator is destructive,
 * so in particular cannot be reset. On the other hand this allows a
 * standard metaphor for depth first search along the following lines:
 *
 * s := Stack();
 * s.Add(initialNode);
 * while s.HasNext do
 *    node := s.Next;
 *    if "node is what we are looking for" break;
 *    for n in "followers of node"
 *    s.Push(n);
 * end
 *
 * To further facilitate the use of this metaphor a non-destructive 
 * 'Contains' method is included.
 *
 * Additionally, TraverseWith operates on the underlying deque and so is
 * non-destructive.
 *
 * Created by malbert on 10/08/2011
 */

mutable class Stack extends Iterator

    var valueDeque;
    
    method Stack(List values ? [])
        valueDeque := Deque(values);
    end
    
    mutable method Push(value)
        valueDeque.Prepend(value);
    end
    
    mutable method Pop()
        return valueDeque.Pop();
    end
    
    method Contains(value)
        return valueDeque.Contains(value);
    end
    
    override property HasNext.get
        return valueDeque.Size > 0;
    end
    
    override property Next.get
        return Pop();
    end
    
    override method Reset()
        error("Reset not supported by stack iterators");
    end
    
    override method TraverseWith(f)
        valueDeque.TraverseWith(f);
    end
    
    override property ToString.get
        result := "Stack[ ";
        valueDeque.TraverseWith(val -> (result := result + val.ToString + " "));
        result := result + "]";
        return result;
    end
end