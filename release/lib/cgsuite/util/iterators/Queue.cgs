/*${cgsuite.banner}*/

/*
 * Queue.cgs
 *
 * Implementation of a queue based iterator, backed by a deque.
 * In contrast to the deque implementation, the iterator is destructive,
 * so in particular cannot be reset. On the other hand this allows a
 * standard metaphor for breadth first search along the following lines:
 *
 * q := Queue();
 * q.Add(initialNode);
 * while q.HasNext do
 *    node := q.Next;
 *    if "node is what we are looking for" break;
 *    for n in "followers of node"
 *    q.Add(n);
 * end
 *
 * To further facilitate the use of this metaphor a non-destructive 'Contains'
 * method is included.
 *
 * Additionally, Traverse operates on the underlying deque and so is
 * non-destructive.
 *
 * Created by malbert on 10/08/2011
 */

mutable class Queue extends Iterator
    var valueDeque;
    
    method Queue(List values ? [])
        valueDeque := Deque(values);
    end
    
    mutable method Add(value)
        valueDeque.Append(value);
    end
    
    mutable method Get()
        return valueDeque.Pop();
    end
    
    method Contains(value)
        return valueDeque.Contains(value);
    end
    
    override property HasNext.get
        return valueDeque.Size > 0;
    end
    
    override property Next.get
        return Get();
    end
    
    override method Reset()
        error("Reset not supported by queue iterators");
    end
    
    override method Traverse(f)
        valueDeque.Traverse(f);
    end
    
    override property ToString.get
        result := "Queue[ ";
        valueDeque.Traverse(val -> (result := result + val.ToString + " "));
        result := result + "]";
        return result;
    end
    
end