/*
 * GridIterator.cgs
 *
 * An iterator for all possible fillings of a grid using a fixed set of values
 *
 * Example use: (find up to symmetry 2x3 fully filled clobber grids with positive value)
 *
 * it := GridIterator(2,3,{1,2});
 * result := {};
 * while it.HasNext do
 *      g := game.grid.Clobber(it.Next);
 *      if g.CanonicalForm > 0 then 
 *            result.Add(game.grid.Clobber(g.Grid.SymmetryInvariantRepresentation); 
        end
 * end
 *
 * Created by malbert on 4/08/2011
 */

mutable class GridIterator extends Iterator

    var it;
    var rows;
    var columns;
    
    method GridIterator(Integer rows, Integer columns, vals) 
        it := SequenceIterator(rows*columns, vals);
    end
    
    override property HasNext.get
        return it.HasNext;
    end
    
    override property Next.get
        s := it.Next;
        i := 1;
        result := Grid(rows,columns);
        for r from 1 to rows do
            for c from 1 to columns do
                result[r,c] := s[i];
                i := i+1;
            end
        end
        return result;
    end

end