/*
 * Clobber.cgs
 *
 * Clobber is played on a grid with white and black stones.  Left
 * can move any black stone in any orthogonal direction, provided
 * that the desination square is occupied by a white stone.  The
 * targeted white stone is then captured and removed from the game.
 * Likewise, Right may move any white stone onto a targeted black
 * stone.
 *
 * Examples:
 * g := examples.Clobber("xox|ox.");
 * g.CanonicalForm;
 */

// Clobber is played on a grid, so it extends the GridGame
// utility class.  Grid values of 0, Player.Left, and Player.Right
// correspond to empty, black, and white, respectively.

class Clobber extends GridGame

    method Clobber(grid)
    
        // Construction of the position is delegated to GridGame.
        // Either a String or a Grid object is permitted.
        this.GridGame(grid);
        
    end
    
    // Constructs the set of options for specified player.
    
    method Options(Player player)

        options := {};

        us := player.Ordinal;
        them := player.Opponent.Ordinal;

        // Iterate over all squares in the grid, looking for
        // occupied spaces that match our color.

        for m from 1 to grid.RowCount do
            for n from 1 to grid.ColumnCount do
                if grid[m,n] == us then
                
                    // Found one.  Now look in all directions
                    // for an enemy stone.

                    for d in Direction.Orthogonal do
                        if grid[m+d.RowShift,n+d.ColumnShift] == them then
                        
                            // Found an enemy stone.  Construct
                            // the option and add it to the set
                            // of options.  Note that CGSuite
                            // uses "clone-on-write", so we don't
                            // need to explicitly clone the grid.
                        
                            copy := grid;
                            copy[m,n] := 0;
                            copy[m+d.RowShift,n+d.ColumnShift] := us;   // Clobber!
                            options.Add(Clobber(copy));
                            
                        end
                    end

                end
            end
        end

        return options;

    end

    // GridGame will do the string conversion for us; we just need to specify
    // the mapping of grid values to characters.

    override property CharMap.get
        return ".xo";
    end
    
    // Likewise, we specify a list of icons to display a graphical grid.
    
    override property Icons.get
        return
        [
            GridIcon.Blank,
            GridIcon.BlackStone,
            GridIcon.WhiteStone
        ];
    end

end