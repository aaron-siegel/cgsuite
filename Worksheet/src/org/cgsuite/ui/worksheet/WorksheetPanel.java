/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * java
 *
 * Created on Jan 30, 2011, 10:55:50 AM
 */

package org.cgsuite.ui.worksheet;

import org.cgsuite.lang.output.Output;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.Scrollable;
import org.openide.util.RequestProcessor;

/**
 *
 * @author asiegel
 */
public class WorksheetPanel extends javax.swing.JPanel implements Scrollable
{
    private final static RequestProcessor REQUEST_PROCESSOR = new RequestProcessor(WorksheetPanel.class);

    /** Creates new form WorksheetPanel */
    public WorksheetPanel()
    {
        initComponents();
        addNewCell();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    private void addNewCell()
    {
        JLabel label = new JLabel("> ");
        label.setFont(new Font("Monospaced", Font.PLAIN, 12));
        label.setAlignmentY(Component.TOP_ALIGNMENT);
        EmbeddedTextArea textArea = new EmbeddedTextArea();
        textArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) { cellKeyPressed(evt); }
        });
        /*
        textArea.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent evt) { cellFocusGained(evt); }
        });
         */
        textArea.setAlignmentY(Component.TOP_ALIGNMENT);
//        textArea.addMouseListener(MainFrame.getMainFrame().editPopupListener);
        Box box = Box.createHorizontalBox();
        box.add(label);
        box.add(textArea);
        box.setAlignmentX(Component.LEFT_ALIGNMENT);
        add(box);
    }
    
    private void cellKeyPressed(KeyEvent evt)
    {
        EmbeddedTextArea source = (EmbeddedTextArea) evt.getSource();
        java.awt.Component[] components = getComponents();
        int index;
        for (index = 0; index < components.length; index++)
        {
            if (components[index] instanceof Box &&
                ((Box) components[index]).getComponent(1) == source)
            {
                break;
            }
        }

        switch (evt.getKeyCode())
        {
            case KeyEvent.VK_TAB:
                if (evt.getModifiers() == 0)
                {
                    evt.consume();
                    for (index++; index < components.length; index++)
                    {
                        if (components[index] instanceof Box)
                        {
                            ((Box) components[index]).getComponent(1).requestFocusInWindow();
                            break;
                        }
                    }
                }
                else if (evt.getModifiers() == KeyEvent.SHIFT_MASK)
                {
                    evt.consume();
                    for (index--; index >= 0; index--)
                    {
                        if (components[index] instanceof Box)
                        {
                            ((Box) components[index]).getComponent(1).requestFocusInWindow();
                            break;
                        }
                    }
                }
                break;

            case KeyEvent.VK_ENTER:
                if (evt.getModifiers() == 0)
                {
                    evt.consume();
                    if (!source.getText().equals(""))
                    {
                        processCommand(source);
                    }
                }
                else if (evt.getModifiers() == KeyEvent.SHIFT_MASK)
                {
                    evt.consume();
                    source.insert("\n", source.getCaretPosition());
                }
                break;

            default:
                break;
        }
    }
    
    private void processCommand(EmbeddedTextArea source)
    {
        CalculationCapsule capsule = new CalculationCapsule(source.getText());
        capsule.run();
        Output[] output = capsule.getOutput();
        if (capsule.isErrorOutput())
            getToolkit().beep();

        // Find this component.
        int index = findIndex(source, false) + 1;
        Component[] components = getComponents();

        for (int i = index; i < components.length && components[i] instanceof OutputBox; i++)
        {
            remove(index);
        }

        if (output != null)
        {
            for (int i = 0; i < output.length; i++)
            {
                OutputBox outputBox = new OutputBox();
                outputBox.setOutput(output[i]);
                outputBox.setWorksheetWidth(getWidth());
                outputBox.setAlignmentX(Component.LEFT_ALIGNMENT);
                add(outputBox, index + i);
            }
            advanceToNext(index + output.length);
        }

        repaint();
        getParent().getParent().validate();
    }

    // Finds the component index of eta.  If skipPastOutput is true, finds the
    // index immediately following all output after eta.
    private int findIndex(EmbeddedTextArea eta, boolean skipPastOutput)
    {
        Component components[] = getComponents();
        int index;
        for (index = 0; index < components.length; index++)
        {
            if (components[index] instanceof Box &&
                ((Box) components[index]).getComponent(1) == eta)
            {
                break;
            }
        }
        if (index == components.length)
        {
            index = -1;
        }
        if (skipPastOutput)
        {
            do
            {
                index++;
            } while (index < components.length && components[index] instanceof OutputBox);
        }
        return index;
    }

    private void advanceToNext(int index)
    {
        if (index == getComponentCount())
        {
            add(Box.createVerticalStrut(10));
            addNewCell();
        }
        index++;    // Skip the vertical strut
        updateComponentSizes();
        validate();
        Point topLeft = getComponent(index).getLocation();
        Point bottomLeft = new Point(topLeft.x, topLeft.y + getComponent(index).getHeight());
        if (!((JViewport) getParent()).getViewRect().contains(bottomLeft))
        {
            ((JScrollPane) getParent().getParent()).getHorizontalScrollBar().setValue(0);
            ((JScrollPane) getParent().getParent()).getVerticalScrollBar().setValue
                (bottomLeft.y - ((JViewport) getParent()).getHeight());
        }
        ((Box) getComponent(index)).getComponent(1).requestFocusInWindow();
        validate();
    }

    private void insertOutput(Output output, int index)
    {
        OutputBox outputBox = new OutputBox();
        outputBox.setOutput(output);
        outputBox.setWorksheetWidth(getWidth());
        outputBox.setAlignmentX(Component.LEFT_ALIGNMENT);
        add(outputBox, index);
        getParent().getParent().validate();
    }

    public void updateComponentSizes()
    {
        if (getComponentCount() == 0)
        {
            return;
        }
        int width = ((JScrollPane) getParent().getParent()).getViewport().getExtentSize().width;
        java.awt.Component components[] = getComponents();
        for (int index = 0; index < components.length; index++)
        {
            if (components[index] instanceof Box)
            {
                Box box = (Box) components[index];
                EmbeddedTextArea eta = (EmbeddedTextArea) box.getComponent(1);
                int etaW = width - box.getComponent(0).getWidth();
                eta.setMinimumSize(new Dimension(etaW, eta.getMinimumSize().height));
                eta.setMaximumSize(new Dimension(etaW, eta.getMaximumSize().height));
                eta.setSize(etaW, eta.getHeight());
                eta.invalidate();
            }
            if (components[index] instanceof OutputBox)
            {
                OutputBox outputBox = (OutputBox) components[index];
                outputBox.setWorksheetWidth(width);
                outputBox.invalidate();
            }
        }
        getParent().getParent().validate();
    }
    
    @Override
    public Dimension getPreferredScrollableViewportSize()
    {
        return getPreferredSize();
    }

    @Override
    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)
    {
        return 40;
    }

    @Override
    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)
    {
        return 200;
    }

    @Override
    public boolean getScrollableTracksViewportWidth()
    {
        return false;
    }

    @Override
    public boolean getScrollableTracksViewportHeight()
    {
        return false;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
