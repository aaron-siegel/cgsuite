/*${cgsuite.banner}*/

/** A [[Collection]] that maps keys to values.
  *
  * Basic usage of maps is discussed in the [[/tutorials/getting-started/cgscript]]
  * tutorial page.
  *
  * Every `Map` is a `Collection` of [[MapEntry]] objects. Thus if you use methods
  * of `Collection` on a `Map`, you'll get back a `MapEntry`. For example:
  *
  * \display{map := { 3 => 9, 4 => 16 }; map.Head}
  *
  * You can use [[#Keys]] or [[#Values]] to get collections just of the map keys
  * or map values, rather than [[MapEntry]] objects.
  *
  * Maps in CGSuite are immutable: they cannot be modified once created. Operations
  * such as [[Collection#Concat]] will create a new map with
  * the new elements, without modifying the original map. A separate [[MutableMap]]
  * class is provided for applications that specifically need a modifiable map.
  */
system class Map extends Collection, Function

  /** The value corresponding to the specified key. If the specified key is not
    * present in this map, the result will be [[Nothing]].
    */
  external def op[](key);

  /** `true` if the specified key is present in this `Map`.
    */
  external def ContainsKey(key);

  /** The entries of this `Map`, as a [[Set]] of [[MapEntry]] objects.
    */
  external def Entries;

  /** The keys of this map, as a [[Set]].
    */
  external def Keys;

  /** The `Map` obtained by swapping the keys and values of this `Map`.
    * If `y == map.Reversed[x]`, it will always be the case that `map[y] == x`. However, if there are multiple `y`
    * that satisfy `map[y] == x`, then the specific choice of `map.Reversed[x]` is not deterministic.
    */
  external def Reversed;

  /** The `Map` obtained from this `Map` by replacing the value with the specified `key` with `value`.
    * If the specified `key` is not already contained in this `Map`, then it will be added.
    */
  external def Updated(key, value);

  /** The `Map` obtained from this `Map` by replacing all entries specified in `newValues`. The value of each `key` in
    * `newValues` will be updated to `newValues[key]`. If `key` is not already contained in this `Map`, then it will be
    * added.
    */
  external def Updated(newValues as Map);

  /** All the values of this map, as a [[Set]].
    */
  external def Values;

  def Eval(key) := this[key];

  override def ToOutput begin
    var entries := Entries;
    if entries.IsEmpty then
      cgsuite.util.output.TextOutput("{=>}")
    else
      "{" + Entries.ToList.Sorted.MkOutput(", ") + "}"
    end
  end

end
