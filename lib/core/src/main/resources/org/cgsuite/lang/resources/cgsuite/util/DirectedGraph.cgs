/*${cgsuite.banner}*/

system class DirectedGraph

  static var Empty := DirectedPath(0);

  external static def DirectedPath(n as Integer, vertexTag ? Nothing, edgeTag ? Nothing);

  external static def FromAdjacencyList(adjacencyList as List, vertexTag ? Nothing, edgeTag ? Nothing);

  external static def Parse(
    str as String,
    vertexTypes as Function ? { "" => Nothing },
    edgeTypes as Function ? { "" => Nothing }
  ) as DirectedGraph;

  external static def Singleton(vertexTag ? Nothing);

  def op[](index as Integer) := Vertices[index];

  def AdjacencyList := [[edge.ToVertex for edge in vertex.Edges] for vertex in Vertices];

  external def DeleteEdge(edge as Edge) as DirectedGraph;

  external def DeleteEdgeByIndex(vertex as Integer, edge as Integer) as DirectedGraph;

  external def DeleteVertex(vertex as Integer) as DirectedGraph;

  external def DeleteVertices(vertices as List) as DirectedGraph;

  external def EdgeCount as Integer;

  external def Edges as List;

  external def RetainVertices(vertices as List) as DirectedGraph;

  external def UpdatedVertexTags(updates as Map) as DirectedGraph;

  external def VertexCount as Integer;

  external def Vertices as List;

  external override def ToOutput as Output;

end
