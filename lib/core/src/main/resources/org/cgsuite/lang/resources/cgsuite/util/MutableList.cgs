/*${cgsuite.banner}*/

/** A mutable [[Collection]] whose elements appear in sequence.
  *
  * `MutableList` is the mutable analog of [[List]]; it is a list whose elements may be modified.
  * A `MutableList` is not an instance of `List`, but the [[#ToList]] method can be used to construct an
  * immutable `List` with the same elements.
  *
  * It is advisable to use mutable collections sparingly; see the [[tbd]] tutorial for further discussion.
  */
mutable system class MutableList() extends Collection

  /** Constructs a new `MutableList` and populates it with the elements of the specified `Collection`. */
  static def Eval(initialElements as Collection) begin
    var list := MutableList();
    list.AddAll(initialElements);
    list
  end

  /** Adds the specified element to this `MutableList`. */
  external def Add(element);

  /** Adds all of the elements in the specified `Collection` to this `MutableList`. */
  external def AddAll(elements as Collection);

  /** Removes all elements from this `MutableList`. */
  external def Clear();

  /** `true` if this `MutableList` contains the specified element. */
  external def Contains(element);

  /** Removes the specified element from this `MutableList`. If the specified element is not contained in this
    * `MutableList`, there will be no effect. If the specified element occurs more than once in this `MutableList`,
    * then only the first instance will be removed.
    */
  external def Remove(element);

  /** Removes all elements in the specified `Collection` from this `MutableList`. Elements in the `Collection` that
    * are not present in this `MutableList` will be ignored.
    *
    * If an element in the `Collection` occurs more than once
    * in this `MutableList`, then only the first instance will be removed, unless it also occurs more than once in the
    * `Collection`. In that case, the first `n` copies will be removed, where `n` is the number of occurrences in the
    * `Collection`.
    */
  external def RemoveAll(elements as Collection);

  /** Removes the element at the specified index from this `MutableList`. Returns the removed element. */
  external def RemoveAt(index as Integer);

  /** Rearranges this `MutableList` in sort order. */
  external def Sort();

  /** Rearranges this `MutableList` in a custom sort order, according to the specified `Function`.
    *
    * See [[List#SortedWith]] for details on the interpretation of the specified `Function`.
    */
  external def SortWith(fn as Function);

  override def ToOutput := "MutableList(" + ToList.MkOutput(", ") + ")";

  /** Replaces the element of this `MutableList` at the specified index with the specified element. */
  external def Update(index as Integer, element);

end
