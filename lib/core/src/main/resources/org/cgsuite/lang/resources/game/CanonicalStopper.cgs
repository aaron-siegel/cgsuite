/*${cgsuite.banner}*/

/** A finite stopper in canonical form.
  *
  * A ~~stopper~~ is a loopy game $G$ such that no subposition of $G$ admits an infinite ~alternating~ sequence of
  * play. It can be shown that stoppers have canonical forms in normal play, just like ordinary loopfree games (see
  * \ww, Chapter 11 or \cgt, Chapter VI).
  *
  * A `CanonicalStopper` represents both a (normal-play) game value
  * and the canonical form of that value, and
  * therefore extends both the [[Game]] and [[NormalValue]] classes. It is the most general class of game values
  * for which this is the case.
  */
system class CanonicalStopper extends Game, StopperSidedValue

  /** The degree of loopiness of this stopper.
    *
    * `G.Degree` is defined as `G Upsum -G`.
    */
  external def Degree;

  /** The downsum of this stopper and `that`.
    *
    * `G Downsum H` is the unique value of `T` such that
    * `G + H = S & T` for some (unique) `S`.
    *
    * See also [[#Upsum]].
    */
  external def Downsum(that as CanonicalStopper);

  /** The downsum variety of this stopper relative to degree `deg`.
    * The degree `deg` must be an [[NormalValue#IsIdempotent][idempotent]],
    * or an error will be raised.
    *
    * `G DownsumVariety D` is equal to `G Downsum (-G Upsum D)`.
    *
    * See also [[#UpsumVariety]].
    */
  external def DownsumVariety(deg as CanonicalStopper);

  /** `true` if this game is stable.
    *
    * A stopper `G` of degree `D` is ~~stable~~ if its upsum and downsum variety
    * relative to degree `D` are equal, i.e., if
    *
    * `(G UpsumVariety D) == (G DownsumVariety D)`.
    *
    * It was previously conjectured that every stopper whose degree is an idempotent
    * is stable (and hence has a well-defined variety), but in 2022 Ian Grenville
    * found a counterexample to this conjecture: the unstable game
    *
    * `U := a{0|{0||||0,*2|||a|0||0}||0}`
    *
    * See \ww, Chapter 11 or \cgt, Chapter VI for the relevant theory.
    */
  external def IsStable;

  /** The Left stop of this game. `G.LeftStop` is equivalent to `G.Stop(Left)`.
    *
    * See [[#Stop]] for the definition and discussion.
    */
  external def LeftStop;

  /** Shorthand for the game `{this|0||0}`.
    */
  def Miny := {this|0||0};

  override external def Options(player as Player);

  /** The Right stop of this game. `G.RightStop` is equivalent to `G.Stop(Right)`.
    *
    * See [[#Stop]] for the definition and discussion.
    */
  external def RightStop;

  /** The Left or Right stop of this game.
    *
    * The stops `L(G)` and `R(G)` are defined for all [[CanonicalStopper][stoppers]] by
    *
    * $L(G) = R(G) = G$ if $G$ is a pseudonumber; \\
    * $L(G) = max{R(G^L^)}$, $R(G) = min{L(G^R^)}$ otherwise.
    *
    * If `G` is loopfree (i.e., an instance of [[CanonicalShortGame]]), then `L(G)` and `R(G)`
    * will necessarily be [[DyadicRational]]s, since the only loopfree pseudonumbers are ordinary
    * numbers. If `G` is a
    * stopper that is not a short game, then `L(G)` and `R(G)` might take on one of the additional values
    * `on`, `off`, `x + over`, or `x + under`, where `x` is a `DyadicRational`.
    */
  external def Stop(player as Player);

  /** The strong Left or Right stop of this game.
    *
    * `G.StrongStop(player)` differs from `G.Stop(player)` only in its treatment of the
    * values `x + over` and `x + under`. If `G.Stop(player)` is equal to `x + over` or
    * `x + under`, then `G.StrongStop(player)` will be equal to `x`. (That is, in computing
    * `G.StrongStop(player)`, we simply disregard `x + over` and `x + under` as stopping
    * positions.)
    *
    * In particular, for loopfree games (instances of [[CanonicalShortGame]]), the stop and
    * strong stop are always equal.
    *
    * See also [[#Stop]].
    */
  external def StrongStop(player as Player);

  /** The subordinate of this game to the specified base.
    *
    * `G.Subordinate(B)` is the unique `H` such that `G = B:H`. The base `B` must be a short game
    * (but not necessarily in canonical form). If `G` cannot be expressed in the form `B:H`, then
    * an error will occur.
    *
    * \display{(3/8).Subordinate(1)}
    *
    * Subordinating to a non-canonical base:
    *
    * \display{^.Subordinate('{*|*}')}
    */
  external def Subordinate(base as Game);

  /** Shorthand for the game `{0||0|-this}`.
    */
  def Tiny := {0||0|-this};

  /** The upsum of this stopper and `that`.
    *
    * `G Upsum H` is the unique value of `S` such that
    * `G + H = S & T` for some (unique) `T`.
    *
    * See also [[#Downsum]].
    */
  external def Upsum(that as CanonicalStopper);

  /** The upsum variety of this stopper relative to degree `deg`.
    * The degree `deg` must be an [[NormalValue#IsIdempotent][idempotent]],
    * or an error will be raised.
    *
    * `G UpsumVariety D` is equal to `G Upsum (-G Downsum -D)`.
    *
    * See also [[#DownsumVariety]].
    */
  external def UpsumVariety(deg as CanonicalStopper);

  /** The variety of this stopper.
    *
    * A stopper `G` of degree `D` is ~~stable~~ if its upsum and downsum variety
    * relative to degree `D` are equal, i.e., if
    *
    * `(G UpsumVariety D) == (G DownsumVariety D)`.
    *
    * When this identity holds, the common value is the ~~variety~~ of `G`.
    *
    * If `G` is not stable, then an error will be raised. Stability can be checked
    * in advance with the [[IsStable]] method.
    */
  external def Variety;

end
