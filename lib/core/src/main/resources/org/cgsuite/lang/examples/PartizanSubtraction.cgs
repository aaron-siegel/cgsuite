/*
 * PartizanSubtraction.cgs
 *
 * A subtraction game with separate Left and Right subtraction sets.
 * This is a really a ruleset schema, whose parameters are two
 * sets of positive integers L and R. From a heap of size n,
 * Left's move is to a heap of size n - k, for any k in L (provided
 * n - k >= 0); Right's move is to n-k for any k in R.
 *
 * It is permissible to include 0 in either (or both) subtraction set,
 * in which case the relevant player(s) are granted a pass move from
 * any nonempty heap. This is a good example of how to incorporate
 * loopy positions seamlessly into a CGSuite ruleset. For positions
 * involving pass moves, you will need to use `GameValue` in place of
 * `CanonicalForm`.
 *
 * Examples:
 * R := examples.PartizanSubtraction([1,3],[2,3])
 * R(10).CanonicalForm
 * Table([n, R(n).CanonicalForm] for n from 1 to 10)
 *
 * Rloopy := examples.PartizanSubtraction([0,4,5],[2,3])
 * Rloopy(25).GameValue
 * Table([n, Rloopy(n).GameValue] for n from 1 to 25)
 */

class PartizanSubtraction(leftSet as Collection, rightSet as Collection) extends Ruleset

  class Position(heapSize as Integer) extends Game

    override def Options(player as Player) begin

      if heapSize == 0 then
        // Explicitly specify an empty list of options from a heap of size 0.
        // This is only strictly necessary in cases involving pass moves (see above
        // description), to ensure pass moves are not permitted from an empty heap.
        []
      else
        var subtSet := if player == Left then leftSet else rightSet end;
        // Generate the list of options. When k is 0, we get a pass move.
        [ Position(heapSize - k) for k in subtSet where k <= heapSize ]
      end

    end

    // This declaration is optional; it's used to help CGSuite speed up the calculation
    // of loopy game values. See the CGScript tutorial for more details.
    override def DepthHint := heapSize;

  end

  def Eval(heapSize as Integer) := Position(heapSize);

end
