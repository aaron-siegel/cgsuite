/*
 * PartizanSubtraction.cgs
 *
 * A subtraction game with separate Left and Right subtraction sets.
 * This is a really a ruleset schema, whose parameters are two
 * sets of positive integers L and R. From a heap of size n,
 * Left's move is to a heap of size n - k, for any k in L (provided
 * n - k >= 0); Right's move is to n-k for any k in R.
 *
 * Example:
 * R := examples.PartizanSubtraction([1,3],[2,3])
 * R(10).CanonicalForm
 * Table([n, R(n).CanonicalForm] for n from 1 to 10)
 */

class PartizanSubtraction(leftSet as Collection, rightSet as Collection) extends Ruleset

  class Position(heapSize as Integer) extends Game

    override def Options(player as Player) begin

      var subtSet := if player == Left then leftSet else rightSet end;
      // Generate the list of options.
      [ Position(heapSize - k) for k in subtSet where k <= heapSize ]

    end

  end

  def Eval(heapSize as Integer) := Position(heapSize);

end
