/*${cgsuite.banner}*/

/** A finite impartial combinatorial game.
  */
system class ImpartialGame extends Game

  /** The normal-play canonical form of this `ImpartialGame`. The result
    * will always be a [[Nimber]], and in fact `CanonicalForm` for
    * impartial games defined simply as
    *
    * `def CanonicalForm := *NimValue`
    *
    * so that all the work is done by the (more efficient) [[#NimValue]]
    * property.
    *
    * `CanonicalForm` works only for loopfree games, and will raise an error if this
    * `ImpartialGame` is loopy. To find the values of loopy games, use the
    * [[#GameValue]] property instead.
    */
  //override def CanonicalForm := *NimValue;

  //override def GameValue := *NimValue;    // TODO Nope! This won't work for loopy G

  /** The (extended) genus of this `ImpartialGame`.
    *
    * The ~genus~ of an impartial game $G$ is a symbol that contains information
    * about both normal and misere play of $G$. Specifically, it encodes:
    * \ul
    * \li The [[#NimValue][nim value]] of $G$
    * \li The [[#MisereNimValue][misere nim value]] of $G$
    * \li The misere nim values of $G + *2$, $G + *2 + *2$, ...
    * \endul
    * See \ww, Chapter 13 or \cgt, Chapter V.2 for a complete discussion of genus
    * theory.
    *
    * Note that the genus may take a large amount of time and memory to
    * compute, since in general it depends on the full
    * [[#MisereCanonicalForm][misere canonical form]] of $G$.
    */
  external def Genus as Genus;

  /** The misere canonical form of this `ImpartialGame`.
    *
    *
    */
  external def MisereCanonicalForm as Object;   // TODO

  external def MisereNimValue as Integer;

  external def NimValue as Integer;

  external def Options as Collection of ImpartialGame; // := error("Subclasses of `ImpartialGame` must override the `Options` method.");

  //override def OptionsFor(player as Player) as Collection of ImpartialGame := Options;

end
