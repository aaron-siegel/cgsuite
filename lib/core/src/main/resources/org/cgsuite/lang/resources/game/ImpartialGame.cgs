/*${cgsuite.banner}*/

/** A finite impartial combinatorial game.
  */
system class ImpartialGame extends Game

  /** The normal-play canonical form of this `ImpartialGame`. The result
    * will always be a [[Nimber]], and in fact `CanonicalForm` for
    * impartial games defined simply as
    *
    * `def CanonicalForm := *NimValue`
    *
    * so that all the work is done by the (more efficient) [[#NimValue]]
    * property.
    *
    * `CanonicalForm` works only for loopfree games, and will raise an error if this
    * `ImpartialGame` is loopy. To find the values of loopy games, use the
    * [[#GameValue]] property instead.
    */
  override def CanonicalForm := *NimValue;
  override def GameValue := *NimValue;    // TODO Nope! This won't work for loopy G

  /** The (extended) genus of this `ImpartialGame`.
    *
    * The ~genus~ of an impartial game $G$ is a symbol that contains information
    * about both normal and misere play of $G$. Specifically, it encodes:
    * \ul
    * \li The [[#NimValue][nim value]] of $G$
    * \li The [[#MisereNimValue][misere nim value]] of $G$
    * \li The misere nim values of $G + *2$, $G + *2 + *2$, ...
    * \endul
    * See \ww, Chapter 13 or \cgt, Chapter V.2 for a complete discussion of genus
    * theory.
    *
    * Note that the genus may take a large amount of time and memory to
    * compute, since in general it depends on the full
    * [[#MisereCanonicalForm][misere canonical form]] of $G$.
    */
  external def Genus;

  /** The misère canonical form of this `ImpartialGame`.
    *
    * The ~misère canonical form~ of an impartial game $G$ is the simplest game
    * that is equal to $G$ in misère play. See the documentation for
    * [[game.misere.MisereCanonicalGame]] for details on how misère canonical form
    * is represented in CGSuite.
    */
  external def MisereCanonicalForm as game.misere.MisereCanonicalGame;

  /** The misère nim value of this `ImpartialGame`.
    *
    * The misère nim value $g^-^(G)$ of $G$ is defined recursively by:
    *
    * $g^-^(G) = 1$ if $G = 0$\\
    * $g^-^(G) = mex{g(G') : G' \in G}$ otherwise
    *
    * Equivalently, it is the unique natural number $m$ such that $G + *m$ is a P-position
    * (but unlike in normal play, it is ~not~ necessarily the case that $G = *m$).
    */
  external def MisereNimValue;

  /** The nim value of this `ImpartialGame`.
    *
    * The Nim value $g(G)$ of $G$ is defined recursively by:
    *
    * $g(G) = mex{g(G') : G' \in G}$
    *
    * Equivalently, it is the unique natural number $m$ such that $G = *m$ (in normal play).
    *
    * Nim value is sometimes referred to as the ~~Grundy value~~ or ~~Grundy number~~ of $G$.
    */
  external def NimValue;


  override def Options := error("Subclasses of `ImpartialGame` must implement the `Options` method.");

  /** The options of this `Game` for the specified `Player`.
    *
    * Subclasses of `ImpartialGame`
    */
  override def Options(player as Player) := Options;

end
