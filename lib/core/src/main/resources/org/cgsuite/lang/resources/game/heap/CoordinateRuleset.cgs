/*${cgsuite.banner}*/

class CoordinateRuleset extends Ruleset

  def Eval(coord as Coordinates) := Position(coord);

  def Eval(row as Integer, col as Integer) := Position((row, col));

  /** The `CoordinateRuleset` obtained by adjoining moves from `that` to this ruleset.
    */
  def Adjoin(that as CoordinateRuleset) := FunctionalCoordinateRuleset
    ((m, n) -> CoordinateOptions((m, n)) Concat that.CoordinateOptions((m, n)));

  def CoordinateOptions(coord as Coordinates) := error("Subclasses of `CoordinateRuleset` must implement `CoordinateOptions`.");

  def NimValueTable(maxRow as Integer, maxCol as Integer) begin
    Table([Position((m, n)).NimValue for n from 0 to maxCol] for m from 0 to maxRow)
  end

  class Position(coord as Coordinates) extends ImpartialGame

    def Coord := coord;

    override def Options := CoordinateOptions(coord) Apply
      (opt -> if opt is Coordinates then Position(opt) elseif opt.IsEmpty then 0 else Sum(Position(c) for c in opt) end);

  end

end
