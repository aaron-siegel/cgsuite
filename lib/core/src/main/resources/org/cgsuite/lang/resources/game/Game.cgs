/*${cgsuite.banner}*/

/** A finite combinatorial game.
  *
  * `Game` is the abstract base class for all finite combinatorial
  * games in CGSuite. It may not be directly instantiated: that is,
  * every instance of `Game` is actually an instance of some subclass,
  * such as [[CanonicalShortGame]]. The only requirement for
  * subclasses of `Game` is that they ~must~ implement the
  * [[#Options]] method, specifying how to compute the Left and Right
  * options for that class of game. `Game` provides generic implementations
  * of various other methods and nested classes that are meaningful at this
  * level of generality. In particular, the [[#CanonicalForm]] property
  * can be used to compute canonical forms.
  *
  * Instances of `Game` need not be loopfree; they are permitted to
  * refer back to themselves as subpositions. Thus, if `G` is a `Game`, then
  * it is permissible for `G.LeftOptions` (say) to contain `G` itself
  * as an element, or for some option of `G.LeftOptions` to contain `G`, and
  * so on.
  *
  * However, all instances of `Game` must be ~finite~ in the sense that
  * they have only finitely many ~distinct~ subpositions. Transfinite games
  * (with infinitely many distinct subpositions) are not in general supported, and
  * will typically cause CGSuite to run out of memory or raise an
  * `infinite recursion` error.
  */
system class Game

  /** The atomic weight of this `Game`. This is simply shorthand for `CanonicalForm.AtomicWeight`;
    * CGSuite will first compute the corresponding [[CanonicalShortGame]] and then call
    * [[CanonicalShortGame#AtomicWeight]].
    */
  def AtomicWeight := CanonicalForm.AtomicWeight;

  /** The normal-play canonical form of this `Game`, as a [[CanonicalShortGame]].
    *
    * This property can be used to find the canonical form of a game
    * (equivalently, its normal-play game value), as described in \ww.
    * It will always return an instance of [[CanonicalShortGame]].
    *
    * `CanonicalForm` works only for loopfree games and will raise an error if this
    * `Game` is loopy. To find the values of loopy games, use the
    * [[#GameValue]] property instead.
    */
  external def CanonicalForm;

  /** The Conway product of this game and `that`. */
  external def ConwayProduct(that as Game);

  /** The normal-play game value of this `Game`, as a [[SidedValue]].
    */
  external def GameValue;

  /** The ordinal product of this game and `that`.
    *
    * The ~~ordinal product~~ $G\oast{}H$ of $G$ and $H$ is defined by:
    *
    * $G\oast{}H = {G\oast{}H^L^:G^L^, G\oast{}H^R^:-G^R^ | G\oast{}H^L^:G^R^, G\oast{}H^R^:-G^L^}$.
    */
  external def OrdinalProduct(that as Game);

  /** The reduced canonical form of this `Game`. This is simply shorthand for `CanonicalForm.ReducedCanonicalForm`;
    * CGSuite will first compute the corresponding [[CanonicalShortGame]] and then call
    * [[CanonicalShortGame#ReducedCanonicalForm]].
    */
  def ReducedCanonicalForm := CanonicalForm.ReducedCanonicalForm;

  /** The sensible Left options of this `Game`. This is simply an alias for `SensibleOptions(Left)`. */
  external def SensibleLeftOptions;

  /** The sensible lines of play of this `Game` for the specified `Player`. The result will be
    * returned as a [[List]] of [[List]] of `Game`s.
    *
    * Let $G$ be a game with canonical form $K$. Then a sequence
    *
    * $G^L^$, $G^LR^$, $G^LRL^$, ...
    *
    * is ~~sensible line of play~~ for Left if there is some $K^L^$ such that:
    * \ul
    * \li Each $G^L^$, $G^LRL^$, ... is $\geq K^L^$;
    * \li Each $G^LR^$, $G^LRLR^$, ... is $\leq G$; and
    * \li The last term of the sequence is exactly $K^L^$.
    * \endul
    * It is a reversible sequence terminating at a canonical follower of $G$.
    *
    * The sensible lines of play for $G$ indicate how the canonical form $K$ embeds in the structure of $G$.
    */
  external def SensibleLines(player as Player);

  /** The sensible options of this `Game` for the specified `Player`.
    *
    * Let $G$ be a game with canonical form $K$. Then a Left option $G^L^$ is ~~sensible~~ if there is some Left
    * option $K^L^$ with $G^L^ \geq K^L^$.
    */
  external def SensibleOptions(player as Player);

  /** The sensible Right options of this `Game`. This is simply an alias for `SensibleOptions(Right)`. */
  external def SensibleRightOptions;

  /** An optional indicator of the loopy structure of this `Game`.
    *
    * `DepthHint` is only meaningful for loopy games, and it need not be specified. Subclasses may override it to speed
    * up the calculation of [[#GameValue]]s of loopy games. (There is no penalty for failing to override `DepthHint`,
    * other than loss of efficiency.)
    *
    * The value must always be an [[Integer]], and the contract of `DepthHint` is as follows:
    *
    * If $G.DepthHint < H.DepthHint$, then $H$ cannot be a follower of $G$.
    *
    * In other words, as we progress from a game $G$ through its followers, the value of `DepthHint` must be
    * monotonically decreasing. The idea is that if an option $G^L$ has `DepthHint` ~strictly~ less than $G$, then the
    * value of $G^L^$ can be computed recursively, since it is guaranteed that $G$ will not be a follower of $G^L^$.
    *
    * The default implementation simply sets `DepthHint := 0`.
    */
  def DepthHint := 0;

  /** The options of this `Game` for the specified `Player`.
    *
    * This method is not implemented in the base class `Game`; each subclass of `Game` must implement it in order to
    * define the structure of that subclass.
    */
  def Options(player as Player) := error("Subclasses of `Game` must implement the `Options` method.");

  /** All options of this game. This will return a single [[Collection]] containing all the Left and Right options of
    * this game combined. It is simply an alias for:
    *
    * `Options(Left) Concat Options(Right)`
    */
  def Options := Options(Left) Concat Options(Right);

  /** The disjunctive decomposition of this `Game`.
    *
    * The result must be a [[Collection]] of `Game`s representing the summands of the decomposition.
    * The default implementation simply returns `[this]`, the
    * one-element [[List]] containing this `Game`. Subclasses may override in order to capture the modular
    * decomposition properties of specific rulesets.
    *
    * The decomposition will be used by [[#CanonicalForm]] and related methods to speed up the calculation.
    */
  def Decomposition := [this];

  /** The Left options of this `Game`. This is simply an alias for `Options(Left)`. */
  def LeftOptions := Options(Left);

  /** The Right options of this `Game`. This is simply an alias for `Options(Right)`. */
  def RightOptions := Options(Right);

  /** The dicotic (all-small) variant of this `Game`.
    *
    * The dicotic variant of $G$ is played identically to $G$, but terminates immediately if either player has no
    * move. Formally, it is the game $d(G)$ given by
    *
    * $d(G) = {d(G^L^) | d(G^R^)}$ if there is at least one $G^L^$ and at least one $G^R^$;\\
    * $d(G) = 0$ otherwise.
    */
  def DicoticVariant := game.variant.DicoticVariantGame(this);

  /** The impartial variant of this `Game`.
    *
    * The impartial variant of $G$ is the game obtained from $G$ by allowing either player to make any available move
    * (for Left and/or Right). Formally, it is the game $i(G)$ given by
    *
    * $i(G) = {i(G^L^), i(G^R^) | i(G^L^), i(G^R^)}$.
    */
  def ImpartialVariant := game.variant.ImpartialVariantGame(this);

end
