/*${cgsuite.banner}*/

/** A finite combinatorial game.
  *
  * `Game` is the abstract base class for all finite combinatorial
  * games in CGSuite. It may not be directly instantiated: that is,
  * every instance of `Game` is actually an instance of some subclass,
  * such as [[CanonicalShortGame]]. The only requirement for
  * subclasses of `Game` is that they ~must~ implement the
  * [[#Options]] method, specifying how to compute the Left and Right
  * options for that class of game. `Game` provides generic implementations
  * of various other methods and nested classes that are meaningful at this
  * level of generality. In particular, the [[#CanonicalForm]] property
  * can be used to compute canonical forms.
  *
  * Instances of `Game` need not be loopfree; they are permitted to
  * refer back to themselves as subpositions. Thus, if `G` is a `Game`, then
  * it is permissible for `G.LeftOptions` (say) to contain `G` itself
  * as an element, or for some option of `G.LeftOptions` to contain `G`, and
  * so on.
  *
  * However, all instances of `Game` must be ~finite~ in the sense that
  * they have only finitely many ~distinct~ subpositions. Transfinite games
  * (with infinitely many distinct subpositions) are not in general supported, and
  * will typically cause CGSuite to run out of memory or raise an
  * `infinite recursion` error.
  */
system class Game

  external def op+(that as Game) as Game;

  external def op-(that as Game) as Game;

  external def op:(that as Game) as Game;

  external def op unary+ as Game;

  external def op unary- as Game;

  /** The normal-play canonical form of this `Game`, given as a [[CanonicalShortGame]].
    *
    * This property can be used to find the canonical form of a game
    * (equivalently, its normal-play game value), as described in \ww.
    * It will always return an instance of [[CanonicalShortGame]].
    *
    * `CanonicalForm` works only for loopfree games and will raise an error if this
    * `Game` is loopy. To find the values of loopy games, use the
    * [[#GameValue]] property instead.
    */
  external def CanonicalForm as CanonicalShortGame;

  external def ConwayProduct(h as Game) as Game;

  external def GameValue as SidedValue;

  external def OrdinalSum(h as Game) as Game;

  external def OrdinalProduct(h as Game) as Game;

  def ReducedCanonicalForm := CanonicalForm.ReducedCanonicalForm;

  external def SensibleLines(player as Player) as Collection of Collection of Game;

  external def SensibleOptions(player as Player) as Collection of Game;

  def DepthHint as Integer := error("That game is loopy (not a short game). If that is intentional, it must implement the `DepthHint` method. See the CGSuite documentation for more details.");

  external def Options(player as Player) as Collection of Game;

//  def Options(player as Player) as Collection of Game := error("Subclasses of `Game` must override the `Options` method.");

//  def Options as Collection of Game := Options(Left).ToSet Union Options(Right).ToSet;

  def Decomposition := [this];

  external def Substitution as Game;

  def LeftOptions as Collection of Game := Options(Left);

  def RightOptions as Collection of Game := Options(Right);

/*
  // TODO DicotVariant and ImpartialVariant should override Decomposition
  class DicotVariant() extends Game
  
    override def Options(player as Player) begin
      var otherOptions := EnclosingObject Options player.Opponent;
      if otherOptions.IsEmpty then
        []
      else
        setof(g.DicotVariant() for g in EnclosingObject Options player)
      end
    end
    
  end

  class ImpartialVariant() extends ImpartialGame
  
    override def Options begin
      setof(g.ImpartialVariant() for g in EnclosingObject.Options)
    end
  end
*/
end
