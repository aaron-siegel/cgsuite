/*${cgsuite.banner}*/

system class Game

  external def CanonicalForm;
  external def ConwayProduct(h as Game);
  external def GameValue;
  external def OrdinalProduct(h as Game);
  def ReducedCanonicalForm := CanonicalForm.ReducedCanonicalForm;
  external def SensibleLines(player as Player);
  external def SensibleOptions(player as Player);

  def DepthHint := error("That game is loopy (not a short game). If that is intentional, it must implement the `DepthHint` method. See the CGSuite documentation for more details.");

  def Options(player as Player) := error("Subclasses of `Game` must override the `Options` method.");

  def Decomposition := [this];
  def LeftOptions := Options(Left);
  def RightOptions := Options(Right);

  // TODO DicotVariant and ImpartialVariant should override Decomposition
  class DicotVariant() extends Game
  
    override def Options(player as Player) begin
      var otherOptions := EnclosingObject Options player.Opponent;
      if otherOptions.IsEmpty then
        []
      else
        setof(g.DicotVariant() for g in EnclosingObject Options player)
      end
    end
    
  end

  class ImpartialVariant() extends ImpartialGame
  
    override def Options begin
      setof(g.ImpartialVariant() for g in EnclosingObject.LeftOptions) Union
      setof(g.ImpartialVariant() for g in EnclosingObject.RightOptions)
    end
  end

end
