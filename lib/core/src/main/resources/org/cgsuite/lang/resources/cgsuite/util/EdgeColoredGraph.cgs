/*${cgsuite.banner}*/

system class EdgeColoredGraph

  external static def FromList(leftList as List, rightList as List, vertexTags as List ? Nothing) as EdgeColoredGraph;

  external static def Parse(str as String, tagMap as Map ? { => }) as EdgeColoredGraph;

  def AdjacencyList(player as Player) := [Outedges(vertex, player) for vertex from 1 to VertexCount];

  external def ConnectedComponent(vertex as Integer) as EdgeColoredGraph;

  external def DeleteVertex(vertex as Integer) as EdgeColoredGraph;

  external def DeleteVertices(vertices as List) as EdgeColoredGraph;

  external def IsConnected;

  def IsEmpty := VertexCount == 0;

  external def Outedge(vertex as Integer, player as Player, index as Integer) as Integer;

  external def Outedges(vertex as Integer, player as Player) as List;

  external def TotalEdgeCount(player as Player) as Integer;

  external def UpdateTag(vertex as Integer, value as Object);

  external def UpdateTags(updateMap as Map);

  external def VertexCount as Integer;

  external def VertexTag(vertex as Integer) as Object;

  external def VertexTags as List;

  external override def ToOutput as Output;

end
