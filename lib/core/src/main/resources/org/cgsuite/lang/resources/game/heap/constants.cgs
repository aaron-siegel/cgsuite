/*${cgsuite.banner}*/

singleton class constants

  var Cutcake := GenCutcake(TakeAndBreak("4.0"), TakeAndBreak("4.0"));

  var DawsonsKayles := TakeAndBreak("0.07");

  var Eatcake := GenCutcake(TakeAndBreak("0.7"), TakeAndBreak("0.7"));

  var FibonacciNim := TakeAway(2);

  var GrundysGame := TakeAndBreak("4!.0");

  var Kayles := TakeAndBreak("0.77");

  var MaundyCake := GenCutcake(TakeAndBreak("{2+}=.0"), TakeAndBreak("{2+}=.0"));

  var Mem := GenMem((memory as Integer, j as Integer) -> memory <= j);

  var Nim := TakeAndBreak("0.[3]");

  def PartizanSplittles(leftSet as Collection of Integer, rightSet as Collection of Integer, allbut as Boolean ? false) :=
    PartizanHeapRuleset(Splittles(leftSet, allbut), Splittles(rightSet, allbut));

  def PartizanSubtraction(leftSet as Collection of Integer, rightSet as Collection of Integer, allbut as Boolean ? false) :=
    PartizanHeapRuleset(Subtraction(leftSet, allbut), Subtraction(rightSet, allbut));

  def PartizanTakeAndBreak(leftCode as String, rightCode as String) :=
    PartizanHeapRuleset(TakeAndBreak(leftCode), TakeAndBreak(rightCode));

  def Splittles(subtset as Collection of Integer, allbut as Boolean ? false) := TakeAndBreak.FromSubtractionSet(subtset, "7", allbut);

  def Subtraction(subtset as Collection of Integer, allbut as Boolean ? false) := TakeAndBreak.FromSubtractionSet(subtset, "3", allbut);

  def TakeAway(limit as DyadicRational) := GenMem((memory as Integer, j as Integer) -> j <= memory * limit);
  
  def TakeAway(limit as Procedure of (Integer, Rational)) := GenMem((memory as Integer, j as Integer) -> j <= limit(memory));
/*
  def TakeAway(arg) begin
    if arg is DyadicRational then GenMem((memory, j) -> j <= memory * arg)
    elseif arg is Procedure then GenMem((memory, j) -> j <= arg(memory))
    else System.Error("Argument to `TakeAway` must be a `DyadicRational` or a `Procedure`.")
    end
  end
*/
  var TurnAndEatcake := GenCutcake(TakeAndBreak("0.7"), TakeAndBreak("0.7"), twisted => true);

  var Wythoff := GenWythoff(1);

end
