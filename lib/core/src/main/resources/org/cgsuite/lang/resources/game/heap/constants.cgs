/*${cgsuite.banner}*/

/**
 * Ruleset library for games played on heaps of tokens.
 */
singleton class constants

  var Cutcake := GenCutcake(TakeAndBreak("4.0"), TakeAndBreak("4.0"));

  var DawsonsKayles := TakeAndBreak("0.07");

  var Eatcake := GenCutcake(TakeAndBreak("0.7"), TakeAndBreak("0.7"));

  var FibonacciNim := TakeAway(2);

  var GrundysGame := TakeAndBreak("4!.0");

  var Kayles := TakeAndBreak("0.77");

  var MaundyCake := GenCutcake(TakeAndBreak("{2+}=.0"), TakeAndBreak("{2+}=.0"));

  var Mem := GenMem((memory, j) -> j >= memory);

  var Nim := TakeAndBreak("0.[3]");

  var PartizanEuclid := PartizanCoordinateRuleset(
    FunctionalCoordinateRuleset((p, q) -> if q == 0 or p % q == 0 then [] else [(q, p % q)] end),
    FunctionalCoordinateRuleset((p, q) -> if q == 0 or p % q == 0 then [] else [(q, q - p % q)] end)
  );

  def PartizanSplittles(leftSet as Collection, rightSet as Collection, allbut as Boolean ? false) :=
    PartizanHeapRuleset(Splittles(leftSet, allbut), Splittles(rightSet, allbut));

  def PartizanSubtraction(leftSet as Collection, rightSet as Collection, allbut as Boolean ? false) :=
    PartizanHeapRuleset(Subtraction(leftSet, allbut), Subtraction(rightSet, allbut));

  def PartizanTakeAndBreak(leftCode as String, rightCode as String) :=
    PartizanHeapRuleset(TakeAndBreak(leftCode), TakeAndBreak(rightCode));

  def Splittles(subtset as Collection, allbut as Boolean ? false) := TakeAndBreak.FromSubtractionSet(subtset, "7", allbut);

  def Subtraction(subtset as Collection, allbut as Boolean ? false) := TakeAndBreak.FromSubtractionSet(subtset, "3", allbut);

  def TakeAway(limit as DyadicRational) := GenMem((memory, j) -> j <= memory * limit);

  def TakeAway(limit as Function) := GenMem((memory, j) -> j <= limit(memory));

  var TurnAndEatcake := GenCutcake(TakeAndBreak("0.7"), TakeAndBreak("0.7"), twisted => true);

  /** Ruleset for Wythoff Nim.
    *
    * Wythoff Nim is an impartial game played on two heaps of tokens. From a position $(a,b)$, a player may
    * remove any number of tokens from any one heap (as in ordinary [[Nim]]), or else remove the same number
    * of tokens from both heaps.
    *
    * Wythoff Nim is an instance of the ruleset schema [[GenWythoff]] and is implemented as a
    * [[CoordinateRuleset]], so that positions are represented by coordinate pairs:
    *
    * `game.heap.Wythoff((10, 11))` \\
    * `game.heap.Wythoff.NimValueTable(30, 30)`
    */
  var Wythoff := GenWythoff(1);

end
