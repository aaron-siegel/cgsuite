/*${cgsuite.banner}*/

// Benchmark: game.grid.Clobber("xox.|oxox|xoxo|oxox").CanonicalForm in 12.96 s

class GenClobber(
  directions ? Coordinates.Orthogonal,
  clobbered ? {Left => {2}, Right => {1}},
  leftBehind ? {Left => 0, Right => 0},
  maxDistance ? 1
  ) extends GridRuleset

  var clobberedAsList := [clobbered[Left], clobbered[Right]];
  var leftBehindAsList := [leftBehind[Left], leftBehind[Right]];

  class Position(grid as Grid) extends GridGame

    override def Options(player as Player) begin

      var us := player.Ordinal;

      var clob := clobberedAsList[us];
      var lb := leftBehindAsList[us];

      for c in grid FindAll us
      for d in directions
      for p in ClobberablePoints(c, d, clob)
      yield
        Position(grid Updated {c => lb, p => us})
      end

    end

    override def Decomposition := listof(Position(component) for component in grid.Decomposition(0, directions));
  
    def ClobberablePoints(c as Coordinates, d as Coordinates, clob as Collection) begin
      var n := 1;
      while n < maxDistance and grid[c+n*d] == 0 do
        n := n + 1;
      end
      if clob Contains grid[c+n*d] then [c+n*d] else [] end
    end

  end

  override def CharMap := if clobbered.Values Contains 0 then ".xo#" else ".xo" end;

  override def Icons begin
  
    var bwIcons := [Icon.BlackStone, Icon.WhiteStone];
    if maxDistance == inf then
      if directions == Coordinates.Orthogonal then
        bwIcons := [Icon.BlackRook, Icon.WhiteRook];
      elseif directions == Coordinates.Compass then
        bwIcons := [Icon.BlackQueen, Icon.WhiteQueen];
      end
    elseif maxDistance == 1 then
      if directions == Coordinates.Compass then
        bwIcons := [Icon.BlackKing, Icon.WhiteKing];
      end
    end
    
    if clobbered.Values Contains 0 then
      [Icon.Blank, bwIcons[1], bwIcons[2], Icon.GraySquare]
    else
      [Icon.Blank, bwIcons[1], bwIcons[2]]
    end
        
  end

end
