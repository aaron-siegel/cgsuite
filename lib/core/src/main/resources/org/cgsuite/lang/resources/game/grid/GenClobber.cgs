/*${cgsuite.banner}*/

class GenClobber(
  directions ? Coordinates.Orthogonal,
  clobbered ? {Left => {2}, Right => {1}},
  leftBehind ? {Left => 0, Right => 0}
  ) extends GridRuleset

  var clobberedAsList := [clobbered[Left], clobbered[Right]];
  var leftBehindAsList := [leftBehind[Left], leftBehind[Right]];

  class Position(grid as Grid) extends GridGame

    override def Options(player as Player) begin

      var us := player.Ordinal;

      var clob := clobberedAsList[us];
      var lb := leftBehindAsList[us];

      for c in grid FindAll us
      for d in directions where clob Contains grid[c+d]
      yield
        Position(grid Updated {c => lb, c+d => us})
      end

    end

    override def Decomposition := listof(Position(component) for component in grid.Decomposition(0, directions));

  end

  override def CharMap := ".xo#";

  override def Icons := [Icon.Blank, Icon.BlackStone, Icon.WhiteStone, Icon.GraySquare];

end
