/*${cgsuite.banner}*/

/** Base class for all collections in CGSuite.
  */
system class Collection

  /** Returns `true` if there exists an element in this collection
    * that satisfies the specified predicate.
    * `predicate` must be a [[Boolean]]-valued function.
    *
    * For example:
    *
    * `c Exists (n -> n.IsEven)`
    *
    * returns `true` just if the collection `c` contains an even element.
    */
  external def Exists(predicate as Function);

  external def Filter(predicate as Function);

  /** Returns the first element in this collection that
    * satisfies the specified predicate.
    * `predicate` must be a [[Boolean]]-valued function.
    *
    * If no element of this collection satisfies the predicate, then
    * [[Nothing]] will be returned.
    */
  external def Find(predicate as Function);

  /** Returns `true` if every element in this collection
    * satisfies the specified predicate.
    * `predicate` must be a [[Boolean]]-valued function.
    */
  external def ForAll(predicate as Function);

  /** Applies the specified function to each element in this collection.
    */
  external def ForEach(fn as Function);

  /** The first element in this collection (in iteration order).
    * An exception will be thrown if this collection is empty.
    */
  external def Head;

  /** `true` if this collection is empty.
    */
  external def IsEmpty;

  /** A maximal element of this collection. If there are multiple
    * distinct maxima, then the first such element (in iteration
    * order) will be returned.
    */
  def Max begin
    var max := Head;
    for x in Tail where x > max do
      max := x;
    end
    max
  end

  /** The mex (minimal excluded value) of this collection.
    * The ~mex~ of a collection $c$ is defined to be the least
    * non-negative [[Integer]] that is not an element of $c$.
    */
  external def Mex;

  /** A minimal element of this collection. If there are multiple
    * distinct minima, then the first such element (in iteration
    * order) will be returned.
    */
  def Min begin
    var min := Head;
    for x in Tail where x < min do
      min := x;
    end
    min
  end

  /** The number of elements in this collection.
    */
  external def Size;

  /** The sum of all the elements in this collection.
    */
  def Sum begin
    var sum := Head;
    for x in Tail do
      sum := sum + x;
    end
    sum
  end

  external def Take(n as Integer);

  /** A `Collection` containing all the elements of this collection
    * except for [[#Head]].
    */
  external def Tail;

  /** Converts this collection to a [[List]]. The resulting
    * `List` will contain exactly the elements of this collection, in
    * iteration order.
    */
  external def ToList;

  /** Converts this collection to a [[Set]]. The resulting `Set` will
    * contain exactly one of each of the elements of this collection.
    *
    * The iteration order of the resulting `Set` is arbitrary.
    */
  external def ToSet;

end
