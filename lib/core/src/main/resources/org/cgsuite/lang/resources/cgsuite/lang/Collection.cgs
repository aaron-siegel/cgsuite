/*${cgsuite.banner}*/

/** Base class for all collections in CGSuite.
  */
system class Collection

  /** The `Collection` obtained by adjoining the given element
    * to this `Collection`.
    *
    * For example:
    *
    * \display{[1,2,3] Adjoin 5}
    */
  external def Adjoin(element as Object);

  /** The `Collection` obtained by adjoining all the elements
    * in the given `Collection` to this one.
    *
    * For example:
    *
    * \display{[1,2,3] Concat [5,6,7]}
    */
  external def Concat(elements as Collection);

  /** `true` if there exists an element in this collection
    * that satisfies the given predicate.
    * `predicate` must be a [[Boolean]]-valued function.
    *
    * For example:
    *
    * `c Exists (n -> n.IsEven)`
    *
    * is `true` just if the collection `c` contains an even element.
    */
  external def Exists(predicate as Function);

  /** The subcollection of this `Collection` obtained by retaining only
    * those elements that satisfy the given predicate.
    *
    * For example:
    *
    * \display{[1,2,3,5,8] Filter (n -> n.IsEven)}
    */
  external def Filter(predicate as Function);

  /** The first element in this `Collection` that
    * satisfies the given predicate.
    * `predicate` must be a [[Boolean]]-valued function.
    *
    * For example:
    *
    * \display{[1,3,9,12,14,19] Find (n -> n.IsEven)}
    *
    * If no element of this collection satisfies the predicate, then
    * [[Nothing]] will be returned.
    */
  external def Find(predicate as Function);

  /** A new `Collection` obtained by "flattening" this `Collection`.
    * The flattened `Collection` is derived by expanding every `Collection`
    * contained in this one into its elements.
    *
    * For example:
    *
    * \display{[1,2,4,[5,7],[10,11,12],15].Flattened}
    */
  external def Flattened;

  /** `true` if every element in this collection
    * satisfies the given predicate.
    * `predicate` must be a [[Boolean]]-valued function.
    */
  external def ForAll(predicate as Function);

  /** Applies the specified function to each element in this collection.
    */
  external def ForEach(fn as Function);

  /** The first element in this collection (in iteration order).
    * An exception will be thrown if this collection is empty.
    */
  external def Head;

  /** `true` if this collection is empty.
    */
  external def IsEmpty;

  /** A maximal element of this collection. If there are multiple
    * distinct maxima, then the first such element (in iteration
    * order) will be returned.
    */
  def Max begin
    var max := Head;
    for x in Tail where x > max do
      max := x;
    end
    max
  end

  /** The mex (minimal excluded value) of this collection.
    * The ~mex~ of a collection $c$ is defined to be the least
    * non-negative [[Integer]] that is not an element of $c$.
    *
    * If this `Collection` contains elements that are not `Integer`s,
    * those elements will be ignored.
    */
  external def Mex;

  /** A minimal element of this collection. If there are multiple
    * distinct minima, then the first such element (in iteration
    * order) will be returned.
    */
  def Min begin
    var min := Head;
    for x in Tail where x < min do
      min := x;
    end
    min
  end

  /** The number of elements in this collection.
    */
  external def Size;

  /** The sum of all the elements in this collection.
    */
  def Sum begin
    var sum := Head;
    for x in Tail do
      sum := sum + x;
    end
    sum
  end

  /** A `Collection` containing all the elements of this collection
    * except for [[#Head]].
    */
  external def Tail;

  /** Converts this collection to a [[List]]. The resulting
    * `List` will contain exactly the elements of this collection, in
    * iteration order.
    */
  external def ToList;

  /** Converts this collection to a [[Set]]. The resulting `Set` will
    * contain exactly one of each of the elements of this collection.
    *
    * The iteration order of the resulting `Set` is arbitrary.
    */
  external def ToSet;

end
