/*${cgsuite.banner}*/

system class HeapRuleset extends ImpartialRuleset of Integer

  def CakeProduct(that as HeapRuleset, twisted as Boolean ? false) := GenCutcake(this, that, twisted);

  override def ComponentwiseOptions(heapSize as Integer) := HeapOptions(heapSize);

  override def Substitution(heapSize as Integer) as Nimber := *(HeapNimValue(heapSize));

  external def HeapOptions(heapSize as Integer) as Collection of List of Integer;
  //def HeapOptions(heapSize as Integer) as Collection of Collection of Integer := error("Subclasses of `HeapRuleset` must override `HeapOptions`.");

  external def HeapNimValue(heapSize as Integer) as Integer;

  external def NimValueSequence(toHeapSize as Integer) as List of Integer;

  external def CheckPeriodicity(toHeapSize as Integer) as Periodicity;

end
