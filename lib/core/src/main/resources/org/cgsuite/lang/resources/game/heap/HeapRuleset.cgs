/*${cgsuite.banner}*/

system class HeapRuleset extends Ruleset

  def CakeProduct(that as HeapRuleset, twisted as Boolean ? false) := GenCutcake(this, that, twisted);

  def Eval(heapSize as Integer) := Position(heapSize);

  def HeapOptions(heapSize as Integer) := error("Subclasses of `HeapRuleset` must override `HeapOptions`.");

  external def HeapNimValue(heapSize as Integer);

  external def NimValueSequence(toHeapSize as Integer);

  external def CheckPeriodicity(toHeapSize as Integer);

  class Position(heapSize as Integer) extends ImpartialGame

    override def Options := HeapOptions(heapSize) Apply
      (heaps -> if heaps.IsEmpty then 0 else Sum(Position(n) for n in heaps) end);

    override def NimValue := HeapNimValue(heapSize);

  end

end
