/*${cgsuite.banner}*/

class Turning(arg) extends StripRuleset

  var heapRules :=
    if arg is game.heap.HeapRuleset then
      arg
    elseif arg is String then
      game.heap.Spawning(arg)
    else
      error("Expecting a `HeapRuleset` or a `String`.")
    end;

  class Position(strip as Strip) extends StripGame, ImpartialGame
  
    override def Options begin
    
      for n from 1 to strip.Length where strip[n] == 1
      for heaps in heapRules HeapOptions n
      yield
        var updates := mapof(j => 1-strip[j] for j in heaps);
        Position(strip Updated updates Updated { n => 0 })
      end
    
    end
    
    override def NimValue begin
    
      // It's much more efficient to do nim value computations on
      // the corresponding heap game.

      var value := 0;
      var seq := heapRules.NimValueSequence(strip.Length);
      for n from 1 to strip.Length where strip[n] == 1 do
        value := value NimSum seq[n+1];     // TODO Somewhat counterintuitive to have nim value seq start with 0
      end
      value
      
    end
  
  end
  
  override def CharMap := "th";
  
  override def Icons := [Icon.PennyTails, Icon.PennyHeads];

end
