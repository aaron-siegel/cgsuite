/*${cgsuite.banner}*/

class GenCol(leftPermitted as List, rightPermitted as List) extends GraphRuleset

  class Position(graph as Graph) extends GraphGame

    override def Options(player as Player) begin
      var permitted := if player == Left then leftPermitted else rightPermitted end;
      for vertex from 1 to graph.VertexCount
      where permitted Contains graph[vertex].Tag
      yield
        var tagUpdates :=
          { target.OutVertex => player
            for target in graph[vertex].Edges where graph[target.OutVertex].Tag == Nothing };
        var blockedVertices :=
          graph[vertex].OutVertices Filter (target -> graph[target].Tag == player.Opponent);
        var deletedVertices := blockedVertices Adjoin vertex;
        Position(graph UpdatedVertexTags tagUpdates DeleteVertices deletedVertices)
      end
    end

  end

  override def VertexTypes := { "" => Nothing, "L" => Left, "R" => Right };

end
