/*${cgsuite.banner}*/

/** A short partizan game in normal-play canonical form.
  *
  * A `CanonicalShortGame` represents both a (normal-play) game value
  * and the canonical form of that value, and
  * therefore extends both the [[Game]] and [[NormalValue]] classes.
  */
system class CanonicalShortGame extends CanonicalStopper

  external override def Options(player as Player) as Collection;

  /** The atomic weight of this game.
    *
    * The ~atomic weight~ of $G$ is the unique $W$ such that $G \sim W\cdot\^$, where
    * $\sim$ is the ~atomic weight relation~:
    *
    * $G \sim H$ \sp iff \sp $o(G + X + *m) = o(H + X + *m)$
    *
    * for all games $X$ and all sufficiently large $m$.
    *
    * Such a $W$ is guaranteed to exist whenever $G$ is [[#IsAllSmall][all small]], and
    * also exists for certain other infinitesimals. If no such $W$ exists, then
    * `G.AtomicWeight` will raise an error. In cases where this is undesirable,
    * the [[#IsAtomic]] property can be used to test for existence in advance.
    *
    * The theory of atomic weights is discussed in detail in \ww and \cgt.
    */
  external override def AtomicWeight as CanonicalShortGame;

  /** The birthday of this game.
    *
    * When `G` is in canonical form,
    * the ~birthday~ of `G` is the [[Integer]] $b(G)$ defined recursively by
    *
    * $b(0) = 0,\\
    * b(G) = max{b(G^L^), b(G^R^)}$.
    *
    * It is equal to the height of the complete game tree for `G`.
    */
  external def Birthday as Integer;

  /** The lattice companion of this game.
    *
    * The mapping `G -> G.Companion` defines the unique lattice automorphism
    * of games born by day $n \geq 1$. The relevant theory is described in \cgt,
    * Chapter III.2.
    */
  external def Companion as CanonicalShortGame;

  /** The value of this game cooled by temperature `t`.
    *
    * `G.Cool(t)` is usually denoted by $G_t_$, and is defined by
    *
    * $G_t_ = {G^L^_t_ - t | G^R^_t_ + t}$
    *
    * unless there is some $t' < t$ for which $G_t'_$ is equal to a number,
    * in which case $G_t = G_t'_$ for the smallest such $t'$.
    * See \ww, \lip, or \cgt.
    */
  external def Cool(t as DyadicRational) as CanonicalShortGame;

  /** The value of this game cooled by its temperature.
    *
    * `G.Freeze` is equal to `G.Cool(G.Temperature)` and is always
    * infinitesimally close to a number.
    */
  external def Freeze as CanonicalShortGame;

  /** The value of this game heated by temperature `t`.
    */
  external def Heat(t as CanonicalShortGame) as CanonicalShortGame;

  /** The Incentives of `G`.
    *
    * `G.Incentives` is a `List` of `CanonicalShortGame`s, representing all Left and
    * Right incentives together in one `List` (with each distinct value appearing
    * exactly once).
    *
    * See also [[#LeftIncentives]] and [[#RightIncentives]].
    */
  external def Incentives as List;

  /** `true` if the atomic weight of this `CanonicalShortGame` exists.
    *
    * See the discussion of the [[#AtomicWeight]] property
    * for more details.
    */
  external def IsAtomic as Boolean;

  /** `true` if this `CanonicalShortGame` is even.
    *
    * `G` is ~even~ if either: `G` the empty game; or every option of `G` is odd.
    *
    * Likewise, `G` is ~odd~ if both: `G` is not the empty game; and every option of
    * `G` is even.
    *
    * See also [[#IsOdd]].
    */
  external def IsEven as Boolean;

  /** `true` if this `CanonicalShortGame` is even-tempered.
    *
    * `G` is ~even-tempered~ if either: `G` is equal to a number;
    * or every option of `G` is odd-tempered.
    *
    * Likewise, `G` is ~odd-tempered~ if both: `G` is not equal to a number;
    * and every option of `G` is even-tempered.
    *
    * See also [[#IsOddTempered]].
    */
  external def IsEvenTempered as Boolean;

  /** `true` if this `CanonicalShortGame` is odd. See [[#IsEven]] for the definition. */
  external def IsOdd as Boolean;

  /** `true` if this `CanonicalShortGame` is odd-tempered. See [[#IsEvenTempered]] for the definition. */
  external def IsOddTempered as Boolean;

  /** The Left incentives of this `CanonicalShortGame`.
    *
    * `G.LeftIncentives` is a `List` containing all games of the form
    *
    * $G^L^ - G$
    *
    * with $G^L^$ a Left option of $G$.
    */
  external def LeftIncentives as List;

  /** The mean value of this `CanonicalShortGame`, as a [[DyadicRational]].
    *
    * The mean value $m(G)$ is defined as the limit:
    *
    * $L(n\cdot G)/n \to m(G)$ \sp as \sp $n \to \infty$.
    *
    * It is equal to the mast value of the [[#Thermograph]]
    * of $G$ (the constant value of $G_t_$ for all sufficiently large $t$).
    */
  external def Mean as DyadicRational;

  /** The Norton product of this game and `that`.
    *
    * The ~~Norton product~~ $G\cdot{}U$ is defined by
    *
    * $G\cdot{}U =$ the sum of $G$ copies of $U$, if $G$ is an integer;\\
    * $G\cdot{}U = {G^L^\cdot{}U + (U + I) | G^R^\cdot{}U - (U + I)}$ otherwise,
    *
    * where $I$ ranges over all [[#Incentives][incentives]] of $U$.
    */
  external def NortonMultiply(that as CanonicalShortGame) as CanonicalShortGame;

  /** The value of this game overheated from `s` to `t`. */
  external def Overheat(s as CanonicalShortGame, t as CanonicalShortGame) as CanonicalShortGame;

  /** The value of this game raised to the specified power. */
  external def Pow(x as Pseudonumber);

  /** The value of this game raised to the specified cumulative power. */
  external def PowTo(x as Pseudonumber);

  /** The reduced canonical form of this game.
    *
    * The ~~reduced canonical form~~ of $G$ is the simplest game infinitesimally close to $G$.
    */
  external override def ReducedCanonicalForm as CanonicalShortGame;

  /** The Right incentives of this `CanonicalShortGame`.
    *
    * `G.RightIncentives` is a `List` containing all games of the form
    *
    * $G - G^R^$
    *
    * with $G^R^$ a Right option of $G$.
    */
  external def RightIncentives as List;

  external override def RightStop as DyadicRational;

  /** The total number of stopping positions in this game's complete game tree.
    *
    * It is defined by
    *
    * $SC(x) = 1$ \sp if $x$ is a number;\\
    * $SC(G) = \Sigma\,SC(G^L^) + \Sigma\,SC(G^R^)$ \sp otherwise,
    *
    * where the sums are understood to range over all Left and Right options of $G$.
    */
  external def StopCount as Integer;

  /**
   * The temperature of this `CanonicalShortGame`, as a [[DyadicRational]].
   *
   * The temperature $t(G)$ is defined to be the least $t \geq -1$ such that
   * $G$ [[#Cool][cooled by]] $t$ is infinitesimally close to a number.
   *
   * If $G$ itself is a number, then $t(G)$ will be negative. In particular,
   *
   * $t(m/2^n^) = -1/2^n^$.
   */
  external def Temperature as DyadicRational;

  /** The thermograph of this `CanonicalShortGame`. */
  external def Thermograph as Thermograph;

  external override def ToOutput as String;

end
