/*${cgsuite.banner}*/

/** A short partizan game in normal-play canonical form.
  *
  * A `CanonicalShortGame` represents both a (normal-play) game value
  * and the canonical form of that value, and
  * therefore extends both the [[Game]] and [[NormalValue]] classes.
  */
system class CanonicalShortGame extends CanonicalStopper

  external def op+(that as CanonicalShortGame) as CanonicalShortGame;

  external def op-(that as CanonicalShortGame) as CanonicalShortGame;

  external override def op unary+ as CanonicalShortGame;

  external override def op unary- as CanonicalShortGame;

  external override def op unary+- as CanonicalShortGame;

  external override def Options(player as Player) as Collection of CanonicalShortGame;

  /** The atomic weight of this game.
    *
    * The ~atomic weight~ of $G$ is the unique $W$ such that $G \sim W\cdot\^$, where
    * $\sim$ is the ~atomic weight relation~:
    *
    * $G \sim H$ \sp iff \sp $o(G + X + *m) = o(H + X + *m)$
    *
    * for all games $X$ and all sufficiently large $m$.
    *
    * Such a $W$ is guaranteed to exist whenever $G$ is [[#IsAllSmall][all small]], and
    * also exists for certain other infinitesimals. If no such $W$ exists, then
    * `G.AtomicWeight` will raise an error. In cases where this is undesirable,
    * the [[#IsAtomic]] property can be used to test for existence in advance.
    *
    * The theory of atomic weights is discussed in detail in \ww and \cgt.
    */
  external def AtomicWeight as CanonicalShortGame;
  
  /** The birthday of this game.
    *
    * The ~birthday~ of `G` is the [[Integer]] $b(G)$ defined recursively by
    *
    * $b(0) = 0,\\
    * b(G) = max{b(G^L^), b(G^R^)}$.
    *
    * It is equal to the height of the complete game tree for `G`.
    */
  external def Birthday as Integer;
  
  /** The lattice companion of this game.
    *
    * The mapping `G -> G.Companion` defines the unique lattice automorphism
    * of games born by day $n \geq 1$. The relevant theory is described in \cgt,
    * Chapter III.2.
    */
  external def Companion as CanonicalShortGame;
  
  /** The value of this game cooled by temperature `t`.
    */
  external def Cool(t as DyadicRational) as CanonicalShortGame;
  
  /** The `CanonicalShortGame` equal to this game cooled by its temperature.
    */
  external def Freeze as CanonicalShortGame;
  external def Heat(t as CanonicalShortGame) as CanonicalShortGame;
  external def Incentives as List of CanonicalShortGame;
  
  external override def IsAllSmall as Boolean;
  
  /** `true` if the atomic weight of this `CanonicalShortGame` exists.
    *
    * See the discussion of the [[#AtomicWeight]] property
    * for more details.
    */
  external def IsAtomic as Boolean;
  
  /** `true` if this `CanonicalShortGame` is even.
    *
    * `G` is ~even~ if either: `G` is identically zero; or every option of `G` is odd.
    *
    * Likewise, `G` is ~odd~ if both: `G` is not identically zero; and every option of
    * `G` is even.
    *
    * See also [[#IsOdd]].
    */
  external def IsEven as Boolean;
  external def IsEvenTempered as Boolean;
  external override def IsInfinitesimal as Boolean;
  external override def IsInteger as Boolean;
  external override def IsNimber as Boolean;
  external override def IsNumber as Boolean;
  external override def IsNumberish as Boolean;
  external override def IsNumberTiny as Boolean;
  external def IsOdd as Boolean;
  external def IsOddTempered as Boolean;
  external override def IsUptimal as Boolean;
  external def LeftIncentives as List of CanonicalShortGame;
  external override def LeftStop as DyadicRational;
  
  /** The mean value of this `CanonicalShortGame`, as a [[DyadicRational]].
    *
    * The mean value $m(G)$ is defined as the limit:
    *
    * $L(n\cdot G)/n \to m(G)$ \sp as \sp $n \to \infty$.
    *
    * It is equal to the mast value of the [[#Thermograph]]
    * of $G$ (the constant value of $G_t_$ for all sufficiently large $t$).
    */
  external def Mean as DyadicRational;
  external def NortonMultiply(h as CanonicalShortGame) as CanonicalShortGame;
  external def Overheat(s as CanonicalShortGame, t as CanonicalShortGame) as CanonicalShortGame;
  external def Pow(x as Pseudonumber) as CanonicalShortGame;
  external def PowTo(x as Pseudonumber) as CanonicalShortGame;
  external override def ReducedCanonicalForm as CanonicalShortGame;
  external def RightIncentives as List of CanonicalShortGame;
  external override def RightStop as DyadicRational;
  
  /** The total number of stopping positions in this game's complete game tree.
    *
    * It is defined by
    *
    * $SC(x) = x$ \sp if $x$ is a number;\\
    * $SC(G) = \Sigma\,SC(G^L^) + \Sigma\,SC(G^R^)$ \sp otherwise,
    *
    * where the sums are understood to range over all Left and Right options of $G$.
    */
  external def StopCount as Integer;
  
  /**
   * The temperature of this `CanonicalShortGame`, as a [[DyadicRational]].
   *
   * The temperature $t(G)$ is defined to be the least $t \geq -1$ such that
   * $G$ [[#Cool][cooled by]] $t$ is infinitesimally close to a number.
   *
   * If $G$ itself is a number, then $t(G)$ will be negative. In particular,
   *
   * $t(m/2^n^) = -1/2^n^$.
   */
  external def Temperature as DyadicRational;
  external def Thermograph as Thermograph;

end
