/*${cgsuite.banner}*/

/** Ruleset schema for generalizations of Fox and Geese.
  *
  * This schema generalizes the [[FoxAndGeese][Fox and Geese]] ruleset, allowing for varying board widths and
  * fox capabilities, such as used in the [[CeyloneseFoxAndGeese][Ceylonese]] variant. See the
  * [[FoxAndGeese]] documentation for the relevant background material.
  */
class GenFoxAndGeese(
  /** The width of the game board. The default is 8, used in traditional [[FoxAndGeese][Fox and Geese]]. */
  boardWidth as Integer ? 8,
  /** The range of the fox. On his turn, Right may move the fox in any diagonal direction, up to a distance of
    * `foxRange`. The fox may never change direction during a move and may never jump over geese.
    */
  foxRange as Integer ? 1
  ) extends Ruleset

  if foxRange < 1 then
    error("`foxRange` must be >= 1");
  end

  private var GeeseMoves := [(-1,-1),(-1,1)];

  def Eval(geese as Collection, fox as Coordinates) begin
    ValidateGeese(geese);
    if not IsValidCoordinate(fox) then
      error("`fox` must be a valid `Coordinates` (1 <= col <= boardWidth; row >= 1; row + col even)")
    end
    Position(geese.ToSet, fox)
  end

  private def ValidateGeese(geese as Collection) begin
    if not geese.ForAll(c -> IsValidCoordinate(c)) then
      error("Every element of `geese` must be a valid `Coordinates` (1 <= col <= boardWidth; row >= 1; row + col even)")
    end
  end

  private def IsValidCoordinate(c) begin
    c is Coordinates and 1 <= c.Row and 1 <= c.Col and c.Col <= boardWidth and (c.Row + c.Col).IsEven
  end

  class Position(geese as Set, fox as Coordinates) extends Game

    override def Options(player as Player) begin

      var next;

      if player == Right then
        for dir in Coordinates.Diagonal
        for distance from 1 to foxRange
        while (next := fox + dir * distance) >= (1,1) and next.Col <= boardWidth and not geese.Contains(next)
        yield
          Position(geese, next)
        end
      else
        for goose in geese
        for dir in FoxAndGeese.GeeseMoves
        where (next := goose + dir) >= (1,1) and next.Col <= boardWidth
          and next != fox and not geese.Contains(next)
        yield
          Position(geese Replaced {goose => next}, fox)
        end
      end

    end

    override def Decomposition begin

      var maxGooseRow := geese.Apply(x -> x.Row).Max;
      if fox.Row >= maxGooseRow or
        (fox.Row == maxGooseRow - 1 and
          (fox.Col > 1 and not geese.Contains(fox + (1,-1)) or fox.Col < boardWidth and not geese.Contains(fox + (1,1)))) then
        [off]
      else
        [this]
      end

    end

    override def DepthHint := Sum(goose.Row for goose in geese);

    override def ToOutput begin
      var maxRow := geese.Apply(x -> x.Row).Max Max fox.Row;
      var emptyGrid := Grid.Empty(maxRow, boardWidth);
      var checkeredUpdates := { (row, col) => 3 for row from 1 to maxRow for col from 1 to boardWidth where (maxRow + 1 - row + col) % 2 == 1 };
      var gooseUpdates := { (maxRow + 1 - coord.Row, coord.Col) => 1 for coord in geese };
      var grid := emptyGrid Updated checkeredUpdates Updated gooseUpdates Updated { (maxRow + 1 - fox.Row, fox.Col) => 2 };
      cgsuite.util.output.GridOutput(grid, [icon.Literal for icon in Icons], this.Class.Name + "(\"" + grid.ToString(CharMap) + "\")")
    end

  end

  private var CharMap := ".xo.";

  private var Icons := [Icon.Blank, Icon.BlackStone, Icon.WhiteStone, Icon.GraySquare];

  def ValuesTable(geese as Collection) begin

    var geeseSet := geese.ToSet;
    ValidateGeese(geeseSet);
    var maxGooseRow := geeseSet.Apply(x -> x.Row).Max;
    Table([
      if geese Contains (row,col) then
        "X".ToUnquotedOutput
      elseif (row + col) % 2 == 0 then
        Position(geeseSet, (row,col)).GameValue
      else
        Nothing
      end
      for col from 1 to boardWidth
    ] for row from maxGooseRow to 1 by -1)

  end

end
