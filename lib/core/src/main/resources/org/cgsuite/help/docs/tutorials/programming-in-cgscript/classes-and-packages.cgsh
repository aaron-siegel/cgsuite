Classes and Packages

This section describes the structure and content of a CGScript class, such as a ruleset implementation.

+++ The Structure of a Class +++

Every class in CGSuite is associated with a $.cgs$ file.  The class declaration begins with a line such as

$class PartizanSubtraction(leftSet as Collection, rightSet as Collection) extends Ruleset$

or

$singleton class Clobber extends game.grid.GridRuleset$

The declaration specifies several things:
\ul
\li The ~~name~~ of the class (`PartizanSubtraction` or `Clobber`);
\li The ~~parent~~ class or classes (`Ruleset` in the first example; the more specific class `game.grid.GridRuleset` in the second);
\li The ~~class parameters~~ (`leftSet` and `rightSet`; the `Clobber` class doesn't have any);
\li Optional ~~modifiers~~ (`Clobber` has the modifier `singleton`, indicating that it has no parameters and only one instance).
\endul

Every class belongs to a ~~package~~, which is defined by the directory where the $.cgs$ file resides.  If the $.cgs$
file is given by, say,

$game/grid/GridRuleset.cgs$

(relative to either the User Folder or the System Folder), then the package will be $game.grid$, so the
~~qualified name~~ of the class will be $game.grid.GridRuleset$. This is why all of the examples in the `examples` folder
are contained in the examples package, such as `examples.Clobber`.

Three packages in CGSuite are special: $cgsuite.lang$, $cgsuite.util$, and $game$. These packages contain the essential
building blocks of CGScript, and references to their classes don't need to be qualified: you can type simply $Integer$ instead of
$cgsuite.lang.Integer$. Classes from any other package, such as $game.grid$ or `examples`, need to be qualified.

+++ Declarations +++

The remainder of the class is a sequence of declarations: variables, methods, and initializers.

A variable declaration has the form

`var myVar := *2;`

This establishes $myVar$ as a member variable with the value `*2`. By convention, variables and packages start with
lowercase letters, and classes and methods are capitalized. You can also omit the assignment:

`var myVar;`

This gives `myVar` the initial value `Nothing`, and is exactly equivalent to:

`var myVar := Nothing;`

Typically you'd declare `myVar` this way with the intent to assign it a value later on; however, see the below section
on Mutable and Immutable Classes.

A method declaration has the form

`def MyMethod(x, y, z) := x * y + z;`

or (equivalently, and more convenient for complicated methods)

`def MyMethod(x, y, z) begin
\sp x * y + z
end`

With `MyMethod` defined as above, CGSuite will admit ~any~ object for the parameters `x`, `y`, and `z`. Sometimes this
isn't what we want: for example, maybe we only ~intended~ for `MyMethod` to admit numbers; but if one calls (say)

`MyMethod(*2, *4, *8)`

CGSuite blithely accepts the input, generating an error only later, when the multiplication `x * y` is evaluated.
This can be prevented by specifying types for the parameters:

`def MyMethod(x as Rational, y as Rational, z as Rational) := x * y + z;`

This will cause CGSuite to generate an error as soon as something other than a `Rational` is passed to `MyMethod`.

+++ Inheritance +++

Every class inherits from one or more ~~parent classes~~ as defined by its $extends$ clause.  A special class, $Object$,
is automatically an ancestor of every class.  The $extends$ clause is optional, and the declaration

$class MyClass()$

without an $extends$ clause is equivalent to

$class MyClass() extends Object$

A class can ~~override~~ methods and properties from its ancestors.  This is done through the $override$ keyword:

`override def MyMethod(parameters)`

This specifies that $MyMethod$ is also declared by one or more ancestors, and we are redefining it in the subclass.
If a method has the same name as a method in some ancestor class, then the $override$ keyword ~must~ be specified.

+++ Static Declarations +++

Some variables and methods are `static`.  Whereas ordinary variables are members of class instances,
static variables are members of the class itself - so they exist just once, and are accessible without
having to create any objects of the class.

Static variables can be declared with the static keyword:

`static var myStaticVar;`

Likewise static methods:

`static def MyStaticMethod(parameters)`

You can access static methods by calling the class directly; for example,

`MyClass.MyStaticMethod`

A typical example is the `System.Print` method, which is a static method of class `System`.

+++ Enums +++

Certain classes come equipped with a fixed set of instances.  For example, the `Player` class has just two instances,
`Player.Left` and `Player.Right`; and `OutcomeClass` has instances `OutcomeClass.P`, `OutcomeClass.N`, etc.

Such classes are known as ~~enumerated types~~, or enums, and they're treated specially in CGScript. An enum can be
declared like so:

`enum OutcomeClass
\sp P,
\sp N,
\sp L,
\sp R;
end`

This declares an enum with exactly four instances; no others can ever be constructed. `OutcomeClass` is a particularly
simple example; more complex enums have methods and properties of their own.

+++ Mutable and Immutable Classes +++

If you try to reassign a variable within an ordinary class, you'll get an error message.

`class MyClass()
\sp var x := 3;
\sp def SetX(newValue) begin
\sp\sp x := newValue
\sp end
end`

Calling the `SetX` method gives the following error message.

`Cannot reassign to immutable var: \`x\``

This is because all classes in CGSuite are ~~immutable~~ by default, meaning that their internal structure cannot change
once it's been defined. Since `x` is a member variable of the immutable class `MyClass`, changing its value would alter
the internal structure of an immutable class, which is not allowed.

In order to reassign a value to `x`, you need to use the `mutable` modifier for both the variable and the class:

`mutable class MyClass()
\sp mutable var x := 3;
\sp def SetX(newValue) begin
\sp\sp x := newValue
\sp end
end`

Now you can safely call `SetX` to reassign the value of `x`.

Note that this restriction applies only to member variables of a class. Local variables (declared inside of a method
definition) and Worksheet variables (declared directly on the worksheet, not inside a class) are always mutable.

A word of advice: if you're inclined to create a mutable class, first pause and think if it's really necessary. CGSuite
is well-optimized for using immutable objects, and it's generally easier and safer to program with them. While there
~are~ situations where it's more efficient to use mutable objects, they're relatively rare in CGSuite applications: the
use of immutable objects will rarely be your performance bottleneck.

\footer

~~Continue on to the next part of the tutorial: [[control-flow-and-scope]]~~
