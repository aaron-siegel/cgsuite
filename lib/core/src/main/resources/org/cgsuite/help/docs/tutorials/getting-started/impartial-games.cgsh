Impartial Games

This section describes CGSuite's specialized support for impartial games.

+++ Take-and-Break Games +++

Rulesets and positions in heap games can be constructed in much the same way as other
types of games. For example:

`R := game.heap.TakeAndBreak("0.07");`

constructs the ruleset for the octal game \<b\>0.07\</b\> (aka Dawson's Kayles). Then

`R(24)`

(say) creates a Dawson's Kayles heap of size 24. Canonical forms can be calculated just as for partizan games:

`> R(24).CanonicalForm`\\
\<big\>`*`3\</big\>

Or, alternatively, you can use `NimValue` to get the integer nim value (Grundy value):

`R(24).NimValue`\\
\<big\>3\</big\>

+++ Sequences of Nim Values +++

When analyzing a heap game, we typically want to compute a whole sequence of values. One could use a collection
iterator to do this, but it's more efficient to use CGSuite's built-in `NimValueSequence` method, which is called
directly on the ruleset:

`R.NimValueSequence(300)`

This gives the first `300` nim values of Dawson's Kayles. Periodicity can be checked as follows:

`R.CheckPeriodicity(300)`

This tells CGSuite to attempt to determine if \<b\>0.07\</b\> is periodic, computing
at most 300 values. It succeeds, and gives the correct answer, period 34. Now
we can pretty-print the period by typing:

`R.NimValueSequence(300).PeriodicTable(34)`

Try it! (If `CheckPeriod` fails to determine periodicity, it will return the special value `Nothing`: try this by
entering `R.NimValueSequence(100)`; no periodicity is apparent after computing just `100` values.)

+++ Take-and-Break Codes +++

CGSuite supports a wide variety of take-and-break codes.  You can use 
the digits 0-9 and A-F in the usual fashion for octal and hexadecimal games,
and G-Z for digits 16-35. It's also possible to attach modifiers to code digits
that place further restrictions on the available moves. For example, the ruleset

`game.heap.TakeAndBreak("4.0")`

is "split a heap into two non-empty heaps". If you compute just a few nim values,
you'll see that it's not very interesting. However, try changing this to

`game.heap.TakeAndBreak("4!.0")`

The ! after the digit `4` means "the resulting heaps must all be unequal", so we now
have Grundy's Game: "split a heap into two nonempty heaps of different sizes".
It's unknown whether Grundy's Game is ultimately periodic. Likewise,

`game.heap.TakeAndBreak("0.4!")`

would be the variant "remove one token and split the remainder into two 
nonempty heaps of different sizes," and so on.

Various other modifiers and extensions are possible, including infinite repeating codes
and a special notation for "digits" larger than 35;
see the class documentation for [[game.heap.TakeAndBreak]] for the full range of options.

+++ Other Heap Games +++

`game.heap.TakeAndBreak` is a special case of a more general class, `game.heap.HeapRuleset`. CGSuite includes
a variety of other heap ruleset implementations; for a complete list, see the package documentation for
[[game.heap]].

You can also quickly experiment with new rulesets with the [[game.heap.FunctionalHeapRuleset]] class.
`FunctionalHeapRuleset` takes as input a function `f` that maps each `Integer` to a `Collection` of `Collection`s of
`Integer`s. Then `f(n)` is the collection of options of heap `n`, expressed as a collection of summand heaps. For
example, let

`R := game.heap.FunctionalHeapRuleset(n -> [\[a,b] for a from 0 to n - 1 for b from 0 to a - 1])`

Then a legal move is to replace a heap of size `n` with any two heaps `a` and `b`, provided that
`a < b < n`.

\## Footer ##

~~Continue on to the next part of the tutorial: [[cgsuite-in-action]]~~
