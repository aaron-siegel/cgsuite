Using the Worksheet

In this section of the tutorial, we'll continue discussing the features of the Worksheet.

+++ Additional Operators +++

You can compare two games using any of nine standard ~comparison operators~:

`==\sp<=\sp>=\sp<\sp>\sp!=\sp<|\sp|>\sp<>`

(Respectively: equals, less than or equal to, greater than or equal to, less than, greater than, not equal to,
less than or confused with, greater than or confused with, confused with.) For example, try entering:

`^^ > *` \\
`0 <| ^*`

You'll see that they return the boolean values `true` and `false`.

The operator `:` is used for ordinal sum:

\display{*4:*5}

+++ Variable Assignments +++

You can assign variables as follows:

`G := {2||1|0}`

This assigns to `G` the value `{2||1|0}`. Then `G` can be manipulated in all the usual ways, say,

`G + ^*`\\
`G + G`

and so on.

+++ Properties and Operations on Games +++

There is a huge variety of other operations on games that are specified by name, rather than a symbolic operator.
They are universally accessed using the "dot operator". Here are some examples (they assume that `G` has been assigned
a value as above):

`G.Mean`\\
`G.Temperature`\\
`G.LeftStop`\\
`G.RightOptions`\\
`G.Birthday`

The above examples are all invariant properties of games. Other operations take parameters:

`G.Cool(1/2)`\\
`G.Heat(1)`\\
`G.Thermograph.Plot()`

You can find a list of all the built-in operators on the reference page for [[CanonicalShortGame]].

+++ User-Defined Functions +++

Sometimes it's handy to define functions for operations that you plan to use repeatedly. You can do this as follows:

\display{def f(x) := x + 1}

This defines a function `f`, which you can then invoke using standard function notation.

\display{f(6)}

\display{f(*2)}

You can implement quite sophisticated functions using the CGScript language, which we'll learn about shortly. The
following function computes the Collatz stopping time of `n` (i.e., the number of steps required to go from `n` to `1`,
where each step replaces `n` by `n/2` if `n` is even, or `3n + 1` if `n` is odd). Copy the entire function onto a
a single Worksheet cell if you want to try it.

\displayAndHide{def Collatz(n) :=
  if n == 1 then 0
  elseif n.IsEven then 1 + Collatz(n/2)
  else 1 + Collatz(3*n+1)
  end}

\display{Collatz(97)}

+++ Objects and Types +++

Pretty much everything you will encounter in CGSuite is an ~~object~~. The game `{2||1|0}` is an object; when we wrote
`G := {2||1|0}` above, we assigned this object to the variable `G`. Integers are objects too, and you can access
their properties with the dot operator as well. All of the following are valid CGSuite expressions:

`4.Birthday`\\
`64.IsTwoPower`\\
`2.Tiny`\\
`(5/4).Floor`\\
`^^*.AtomicWeight`\\
`(G + {2|*}).Temperature`

Every object has an associated ~~type~~ as well. The game `{2||1|0}` has type `CanonicalShortGame`, which means it is
just that: a short combinatorial game in canonical form. Whenever you add two objects of type `CanonicalShortGame`,
CGSuite will compute the sum and automatically put it into canonical form as well. Integers such has `5` have a more
specific type, `Integer`, which is a subtype of `CanonicalShortGame`. This means they inherit all the properties and
operations of `CanonicalShortGame`, but have some additional ones as well (such as the example `IsTwoPower` given
above).

You can always find out the type of any object with the `Class` property:

`5.Class`\\
`{2||1|0}.Class`

For some further examples, try:

`*2.Class`\\
`(1/4).Class`\\
`(1/7).Class`\\
`true.Class`

(Yes, `true` is an object too!)

The [[/reference/overview]] page is a starting point for browsing through the capabilities of all the different types in
CGSuite, and you can use the [[/reference/cgscript-index]] to quickly find a specific type. The "Packages" and "Index" buttons
at the top of the Help window will take you quickly to those pages.

+++ Worksheet Tips and Tricks +++

Here are a few tips and tricks to help you use the Worksheet more effectively:

\ul
\li You can put several commands on the same line by separating them with semicolons, as the following example
illustrates. Output will only be generated for the last command on the line.

`G := {2|*}; H := G + {1|0}; H.Thermograph.Plot()`

\li If a Worksheet command ~ends~ with a semicolon, then output will be suppressed entirely. This is useful when (for example)
you want to set a variable equal to some complicated expression for which you specifically don't want all the output.

\li It can also be useful to enter multi-line commands into the worksheet. You can do this by pressing Shift-Enter.

\li You can press the up arrow key on a blank worksheet line to repeat the previous command. Repeatedly pressing the
up arrow will cycle through all previous commands.

You can also type a ~fragment~ of a command, and then press the up arrow, to jump to the most recent command that
begins with that fragment. For example, if you type

`G :=`

and then press up, CGSuite will jump to the most recent command that started with "`G :=`". This can be extremely handy
when you need to enter a slight modification of an earlier command. You can press up repeatedly to cycle through all
previous commands that started with that fragment.

\li  You might have noticed that every time you enter a command, it appears in the Command History window. This
provides a record of all previous commands (and it's saved even after you restart cgsuite). You can double-click on a
command in the Command History window to copy its contents directly to the worksheet.

\li Sometimes you might start a calculation and find that it runs for a very long time. For example, a calculation
such as

`*14.Heat(1)`

takes a rather long time to complete. If you find it's taking longer than expected and want to abort, just click
"Kill Calculation" in the System menu, or press Ctrl-K (Command-K on MacOS). This instructs cgsuite to stop the current
calculation immediately.

\li CGSuite runs a user-defined ~~startup script~~ every time it starts. You can edit the startup script to include any
functions or variables that you use especially frequently, to avoid having to redefine them every time you start
CGSuite. To edit the startup script, double-click `startup.cgs` in the `Browser` window of CGSuite.

To re-run the startup script at any time (for example, if you've just added to it and want to test it, but don't want
to restart CGSuite), just enter

`startup()`

into the Worksheet.

\li You can create other user-defined scripts if you'd like, as well. Just select New/Script from the File menu and give
the script a name (such as `myscript.cgs`). Then you can run it from the Worksheet just like the startup script:

`myscript()`

(Unlike the startup script, other scripts won't run automatically when CGSuite starts.)
\endul

\footer

~~Continue on to the next part of the tutorial: [[games-and-rulesets]]~~
