What's New

This is a list of the most important differences in the most recent versions of CGSuite.

If this is your first time
using CGSuite 2.x, it's strongly recommended that you read through the [[/tutorials/getting-started/getting-started]]
tutorial in addition to this page; much has changed from earlier versions.

+++ Version 2.1 +++

\ul
\li ~~Scatter Plots of Integer Sequences.~~ The newly introduced method [[List#ScatterPlot]] generates a scatter plot
for a given list of integers. The primary application is to visualize the large-scale structure of nim values of a
particular heap game. For an example, try entering on the Worksheet:

`> R := game.heap.TakeAndBreak("0.007");
\sp{}R.NimValueSequence(20000).ScatterPlot()`

\li ~~Transfinite Nim Arithmetic.~~ CGSuite 2.1 includes an implementation of Conway's transfinite nim arithmetic,
using Lenstra's algorithms for effective nim multiplication of ordinals below `omega^omega^omega`. The core implementation
is given by [[GeneralizedOrdinal#NimSum]] and [[GeneralizedOrdinal#NimProduct]]; the corresponding game values are
instances of [[TransfiniteNimber]].

\display{omega^(omega^13) NimExp 47}

\li Upgraded the versions of the core Java and NetBeans platforms used by CGSuite (to JDK 17 and version 17.0,
respectively).

\li Fixed several UI bugs on Windows. Numerous other bugfixes, code cleanup, and improved error messages.
\endul

+++ Version 2.0 +++

\ul
\li ~~CGScript 2.~~ The CGScript language has been completely overhauled. It's much faster than the original CGScript,
and the language is
more concise and expressive: for example, the `Amazons` implementation in CGScript 2 totals 30 lines of code,
versus 65 in the original CGScript, and canonical form calculations are roughly 6x faster.

Unfortunately, CGScript 2 is not backward-compatible with the original - there was simply no way to achieve these
improvements while maintaining compatibility. However, CGScript 2 will be the definitive version of the CGScript
language.

\li ~~Standard Games Library.~~ CGSuite 2.0 comes bundled with the ~Standard Games Library~, a greatly enlarged library
of many rulesets commonly
encountered in the literature. You can use the [[/reference/overview]] overview as a starting point for browsing
through the library.

Along with the Standard Games Library is a comprehensive Help system, with searchable documentation for all classes in CGScript.

\li ~~Loopy Games.~~ Loopy games are now "first-class citizens" of CGSuite. It is no longer a requirement that implementations of
`Game` be loopfree. To create a loopy game, just implement `Game` as you normally would, allowing instances of `Game`
to be followers of themselves; then `G.GameValue` can be used in place of `G.CanonicalForm` to obtain the loopy game
value of `G`. The [[/tutorials/advanced-topics/loopy-games]] tutorial goes into more detail on this feature.

\li ~~Misère Impartial Games.~~ Misère impartial games in canonical form are now supported and built in to the language. If `G` is any impartial game,
then

`G.MisereCanonicalForm`

gives its canonical form. See the [[/tutorials/advanced-topics/misere-theory]] tutorial for an overview.

\li ~~Surreal Numbers.~~ CGSuite now includes a basic implementation of a fragment of surreal numbers: specifically, the field closure of
ordinals below $\epsilon_0_$. The ordinal `omega` is defined as a constant, and expressions like

`(1/7).Birthday`

now give the correct answer.
\endul
