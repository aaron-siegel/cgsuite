Three Examples

We'll begin with several examples demonstrating how to create new ruleset classes in CGScript.

+++ Example: Nim +++

In the Browser window of CGSuite, you'll see a list of folders containing CGScript files. (If you don't
see the Browser window, click "Browser" in the Window menu, and then you should see it. If all else fails, you can
always click "Reset Windows" in the Window menu to restore all windows to their defaults.) Each `.cgs` file contains
code for one CGScript class, such as a ruleset implementation.

Open up the `examples` folder (you can double-click the folder name to open it), and you'll see several
example `.cgs` files that are included with CGSuite, such as `Nim.cgs`. These can be accessed from the Worksheet just
like any other class in CGSuite; for example:

`examples.Nim(8).CanonicalForm`

gives the canonical form of a nim-heap of size 8. Notice that the package `examples` corresponds to the folder name,
and the ruleset name `Nim` corresponds to the file name (without the `.cgs` extension).

Now double-click on `Nim.cgs` to open the file, and you'll see the code that specifies the `examples.Nim`
class in CGScript. Throughout the code are various comments, which are greyed out in the editor window. These comments
are ignored by CGSuite; everything else is part of the class description.

The first line of code (aside from the comments) is

`singleton class Nim extends Ruleset`

This defines the class `Nim` and indicates that it's a ruleset. The `singleton` keyword tells CGSuite that `Nim` has
no parameters as a ruleset: there is only one `Nim` (we'll see an example of a non-singleton ruleset shortly).

The next line of code is

`class Position(heapSize as Integer) extends ImpartialGame`

Every ruleset in CGScript has a ~nested class~ called `Position`, which defines the structure of an individual
position of that ruleset. The `Position` class for `Nim` extends `ImpartialGame`, indicating that `Nim` is impartial.
It has a single parameter, `heapSize`, which must always be an `Integer`.

The meat of the class is the `Options` method:

`override def Options := [Position(k) for k from 0 to heapSize - 1];`

It returns a `List` of all the options for this `Position`: all `Nim` positions
with strictly smaller heap size.

And that's everything we need in order to implement Nim!

+++ Example: Partizan Subtraction +++

A ~Partizan Subtraction~ ruleset is played with heaps of tokens, as with ~Nim~. ~Subtraction sets~ `L` and `R` are
specified as parameters to the ruleset; then Left may remove `n` tokens for any `n` in `L`, while Right may remove `n`
tokens for any `n` in `R`. For example, `L = {1,3}`, `R = {1,2}` specifies the ruleset in which Left may remove $1$ or
$3$ tokens from a heap, while Right may remove $1$ or $2$.

The file `PartizanSubtraction.cgs` in the `examples` folder implements the general partizan subtraction ruleset: the
class `PartizanSubtraction` takes a pair of subtraction sets as parameters; instances of class `PartizanSubtraction`
represent specific rulesets. Double-click `PartizanSubtraction.cgs` to see the code.

The first line of code is more complex than for `Nim`:

`class PartizanSubtraction(leftSet as Collection, rightSet as Collection) extends Ruleset`

It defines a class with two parameters, `leftSet` and `rightSet`, that can be arbitrary `Collection`s.

Note that `PartizanSubtraction` (unlike `Nim`) is ~not~ a `singleton` class: this is because there are many
Partizan Subtraction rulesets, not just one. (In fact, the `PartizanSubtraction` class is best thought of as a
~schema~ of rulesets, as we discussed briefly in the [[/tutorials/getting-started/getting-started]] tutorial.)

Another difference shows up in the next line:

`class Position(heapSize as Integer) extends Game`

`PartizanSubtraction` is partizan, so instead of extending `ImpartialGame`, its positions extend the more general
class [[Game]].

Things get more interesting with the `Options` method.  The first line:

`var subtSet := if player == Left then leftSet else rightSet end;`

sets a variable, `subtSet`, depending on the player. The next line:

`[ Position(heapSize - k) for k in subtSet where k <= heapSize ]`

does the actual work of constructing the options.  It's pretty much self-explanatory: Left's moves from heap `n` are to
heaps `n-k`, where `k` ranges over all elements of `subtSet` satisfying `n-k >= 0`.

You can test the `PartizanSubtraction` class by typing into the Worksheet, say,

`R := examples.PartizanSubtraction([1,3],[2,3])`
`R(10).CanonicalForm`
`Table([n, R(n).CanonicalForm] for n from 1 to 10)`

+++ Example: Clobber +++

Now let's turn to a more complex example: Clobber.  Open up the `Clobber.cgs` file to see CGSuite's implementation.
Notice that it extends a special base class, [[game.grid.GridRuleset]].  The `GridRuleset` class provides generalized
mechanisms for constructing, displaying, and editing rulesets played on grids. Just as in our previous examples,
`Clobber` has a nested `Position` class. This time, `Position` takes a [[Grid]] parameter and extends `GridGame`:

`  class Position(grid as Grid) extends GridGame`

The member variable `grid` stores the actual content of the position.  Now a `Grid` is just a two-dimensional array of
integers, so it's up to each ruleset class to decide what the integer values represent. For Clobber, we'll use the
following mapping:
\ul
\li `0` - an empty space
\li `1` - a black stone
\li `2` - a white stone
\endul
Grids are accessed with coordinate pairs; for example:

`grid[(2,3)]`

refers to the value stored at row 2, column 3.

Now we're ready to tackle the Clobber `Options` method. The first few lines simply define a few convenience
variables:

`    override def Options(player as Player) begin

      var us := player.Ordinal;
      var them := player.Opponent.Ordinal;`

This sets local variables `us` and `them` equal to integers meaning "a stone of our color" and "a stone of the opponent's
color," respectively.  Here `player.Ordinal` gives the ~ordinal~ assigned to each player: Left = 1, Right = 2.
Likewise, `player.Opponent` turns Left into Right and vice versa.

The bulk of the work is done by the following six lines of code, which sets up a giant iterator that searches the grid
for all legal moves, constructing a new position each time it finds one.

`      for coord in (grid FindAll us)
      for direction in Coordinates.Orthogonal
      where grid[coord + direction] == them
      yield
        Position(grid Updated { coord => 0, coord + direction => us })
      end`

Let's go through the lines one by one.

`for coord in (grid FindAll us)`

Here `grid FindAll us` searches the grid for all coordinates with a value of `us`, i.e., all spaces in the `grid` that
are occupied by a stone of the current player's color. The variable `coord` iterates over all such coordinates.

`for direction in Coordinates.Orthogonal`

Likewise, the variable `direction` iterates over the list `Coordinates.Orthogonal`, which is defined by CGSuite to
contain all ~unit~ orthogonal coordinates: `(-1,0)`, `(0,1)`, `(1,0)`, and `(0,-1)`.

`where grid[coord + direction] == them`

If `direction` is a unit orthogonal coordinate, then `coord + direction` is the coordinate obtained by moving one
square from `coord` in the direction of `direction`. This clause simply checks that the "target" square of the grid
at `coord + direction` is occupied by an enemy stone. If it is, then there is a legal move from `coord` to
`coord + direction`.

`yield
  Position(grid Updated { coord => 0, coord + direction => us })
end`

Finally, for each `coord` and `direction` where the legal move condition is true, the iterator generates a new
position. The grid for the new position is obtained from this `grid` by making two updates: set the value at `coord`
to `0` (an empty space) and the value at `coord + direction` to `us` (replacing the enemy stone by a stone of our
color).

That's it for the `Options` method! The `Clobber` class has two other methods:

`  override def CharMap := ".xo";

  override def Icons := [Icon.Blank, Icon.BlackStone, Icon.WhiteStone];`

These two methods govern the aesthetic properties of `Clobber`. The `CharMap` method says that when the user is
creating new `Clobber` positions, then the characters `.`, `x`, and `o`, respectively, represent grid values `0`,
`1`, and `2`. The `Icons` method says that when a `Clobber` position is displayed graphically in the Worksheet or
Explorer, then `Icon.Blank`, `Icon.BlackStone`, and `Icon.WhiteStone`, respectively, represent grid values `0`, `1`,
and `2`.

+++ The System Folder +++

If you've read through the [[/tutorials/getting-started/getting-started]]
tutorial, then you'll know that each of the rulesets in the `examples` folder is also defined in the CGScript
Standard Library. For example,

`game.heap.Nim(8).CanonicalForm`

gives the same answer as

`examples.Nim(8).CanonicalForm`

Although they are functionally equivalent, however, the rulesets in the Standard Library are defined differently. The
implementations in the `examples` folder are designed to be simple and instructive, whereas the Standard Library aims
for a higher degree of robustness and generality.

All of the code in the Standard Library can be viewed inside CGSuite, and sometimes it's instructive to do so, to see
in detail how particular rulesets are implemented. Simply click the drop-down that's labeled "User Folder" in the
Browser window, and change it to "System Folder", to see the source code for the entire library. (Note that some
classes in the library have methods labeled `external`; these are defined externally to CGSuite, not in CGScript.)

\footer

~~Continue on to the next part of the tutorial: [[classes-and-packages]]~~
