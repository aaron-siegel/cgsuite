Control Flow and Scope

In this section, we introduce the use of control flow and variable scope in CGScript.

+++ Conditionals +++

A conditional in CGScript follows the syntax

$if ~expression~ then ~statements~ [else ~statements~] end$

For example,

`if x > 5 then
\sp System.Print("x exceeds 5.");
else
\sp System.Print("x does not exceed 5.");
end`

Conditionals can also have one or more `elseif` clauses:

`if x > 5 and y == 0 then
\sp System.Print("x exceeds 5 and y is zero.");
elseif x > 5 then
\sp System.Print("x exceeds 5, but y is nonzero.");
else
\sp System.Print("x does not exceed 5.");
end`

The conditions will be evaluated top-down until one of them is `true`. If none of the conditions is `true`, then the
`else` clause will be evaluated, if present.

Conditionals can be used within expressions; for example

`var x := if y % 2 == 0 then 1 else -1 end;`

+++ Loops +++

The basic loop in CGSuite takes the form

$while ~expression~ do ~statements~ end$

The statements will be evaluated repeatedly as long as the condition remains `true`. You can also use

$for ~var~ from ~integer~ to ~integer~ do ~statements~ end$

This lets ~var~ range between the two integers, evaluating the statements once for each value. Example:

`for x from 1 to 5 do
\sp System.Print(x);
end`

Any of the keywords `for`, `from` and `to` can be omitted. The following are all legal:

`from 1 to 5 do ...`

simply executes the loop five times, without explicitly tracking the loop index.

`for x to 5 do ...`

assumes that `x` already has some preassigned value, and steps through the loop until it exceeds `5`.  Finally,

`for x from 1 do ...`

will go on forever, unless the loop is explicitly broken (which we'll discuss momentarily).

Two other keywords are useful: the syntax

`for x from 1 to 5 by 2 do ...`

will increment `x` by two at each step, and the syntax

`for x from 1 to 5 where x != 3 do ...`

will only execute the body when $x != 3$. In this example, the body would be evaluated four times, for `x = 1,2,4,5`.
Contrast with

`for x from 1 to 5 while x != 3 do ...`

which will ~stop~ the loop at `3`, evaluating the loop only for `x = 1,2`.

+++ The ~in~ keyword +++

A final type of loop is extremely useful.  You can type

$for ~var~ in ~collection~ do ~statements~ end$

to iterate over all the elements in a collection.  This syntax is used most commonly to iterate over the options of a
game.  It can also be used in combination with `while` and `where`.

All of these types of loops can be used with collection iterators, as described in the
[[/tutorials/getting-started/cgscript]] tutorial.

Finally, you can type simply

$do ~statements~ end$

with no antecedent, to loop forever until explicitly broken.

+++ break, continue, return +++

A ~~break statement~~ consists in its entirety of the keyword

`break;`

If encountered within a loop, CGSuite immediately ceases evaluating the loop. Similarly,

`continue;`

tells CGSuite to stop evaluating ~this iteration~ of the loop, but to continue evaluating the next iteration.

Finally, we've already seen

`return 5;`

which can only appear inside the body of a method.  When a return statement is encountered, CGSuite immediately stops
evaluating the method and returns the specified value.  If `return` is specified without a value:

`return;`

then the implied value is `Nothing`. If CGSuite reaches the end of the method without encountering a `return` statement,
then it will return the value of the last statement evaluated in the method.

+++ Variable Scope +++

Every variable in CGSuite is associated with a particular ~~scope~~, which refers to the environment where it was defined.
There are three basic types of scope in CGSuite:
\ul
\li ~~Workspace scope~~, which includes all variables assigned on the worksheet.
\li ~~Method scope~~. Any local variables defined inside a method
are part of that method's scope.
\li ~~Member scope~~. Any variables defined inside the body of a class (but not inside of one of its methods) are part
of the member scope of that class.
\endul

\footer

~~Continue on to the next part of the tutorial: [[grids-and-strips]]~~
