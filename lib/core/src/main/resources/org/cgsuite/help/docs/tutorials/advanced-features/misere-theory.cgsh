Misère Theory

+++ Misère Canonical Forms +++

CGSuite also supports misère
canonical forms of games, as described in Winning Ways and ONaG,
though the notation used is slightly different.  Every
misère canonical form starts with
a star, followed by an expression in brackets.  The expression
may be a single number, representing a nim-heap, or a sequence of
numbers, representing a game with those nim-heaps as options.

Thus `*[2]` is a nim-heap
of size two, and `*[42]` is the
misère canonical form whose
options are `*[4]` and `*[2]`.  A game with only one option is represented
by subscripting the option with a `#` (pronounced "sharp"), so `*[2#]` refers to
the misère canonical form whose
only option is the nim-heap *[2].  Subscripts are also used to
represent ~sums~ of games.  For example, `*[2<sub>2</sub>]` is
the sum `*[2] + *[2]`.

You can enter subscripts on the worksheet by enclosing them in
nested brackets, so `*[2<sub>2</sub>]` can be entered as

`*[2[2]]`

which means the same as the sum

`*[2] + *[2]`

A convenient shorthand is available for the subscripted slash denoting games
with one option: you can omit the subscript brackets and type

`*[2#]`

for the game `*[2#]`, which is defined to be { *[2] }.

Subscripted options may also be concatenated, so

`*[2[2]2#20]`

is the game with the four options *[2<sub>2</sub>], *[2<sub>#</sub>],
*[2], and *[0].  Parens can be used for grouping:

`*[(2#320)#(32)]`

denotes the game

`{ { *[2<sub>#</sub>320] }, *[32] }`

Subscripts can be "chained", so

`*[2[/22//2]]`

denotes the misère canonical
form `*[2<sub>#22##2</sub>]`, which is equal to

`{ { {*[2]} + *[2] + *[2] } } + *[2]`

If `g` is any impartial game, then

`g.MisereCanonicalForm`

returns its canonical form.  For example,

`Heap("0.77", 15).MisereCanonicalForm`

gives the canonical form of a Kayles heap of size 15.

+++ Misère Quotients +++

The ~MisereSolver~ plug-in, bundled with CGSuite, can be used to compute
misère quotients.  It's turned off by
default; to load it: go to Tools/Plug-in Manager; click "MisereSolver"; and
click "Load".  Then you can type:

`MisereQuotient(G)`

for the quotient of a particular game or canonical form;

`MisereQuotient("0.77")`

for the quotient of a heap game;

`MisereQuotient("0.77" : Heap := 24)`

for a particular partial quotient.

It's returned as a two-element list.  The first element is a commutative
monoid presentation; the second lists the P-portion.  See the
<a href=\"glossary.html\">Glossary of Methods</a> for a list of available methods.

You can also run ~MisereSolver~ directly from the commandline; this is
often useful for exploring large and complicated quotients.  Change to the `plugins/`
directory (where `misere.jar` is located) and type

`java -jar misere.jar`

for help.
