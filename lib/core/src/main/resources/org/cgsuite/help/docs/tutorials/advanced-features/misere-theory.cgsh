Misère Theory

This section describes CGSuite's capabilities for impartial games in misère play. CGSuite currently implements the
canonical theory of impartial misère games, but does not provide support for misère quotients or partizan misère games.

Familiary with the misère theory is assumed; see \ww, Chapter 13 or \cgt, Chapter V.

+++ Misère Evaluation +++

You can get the misère nim value, genus, and misère canonical form of any impartial game in CGSuite as follows:

`G := game.heap.GrundysGame(22)`\\
`G.MisereNimValue`\\
`G.Genus`\\
`G.MisereCanonicalForm`

Misère canonical forms always begin with a $*$, followed by an expression in brackets. The expression may be a
single number, representing a nim-heap, or a sequence of
numbers, representing a game with those nim-heaps as options.

Thus `*[2]` is a nim-heap
of size two, and `*[42]` is the
misère canonical form whose
options are `*[4]` and `*[2]`.  A game with only one option is subscripted with a `#` (pronounced "sharp"), so
`*[2\<sub\>#\</sub\>]` refers to
the misère canonical form whose
only option is the nim-heap `*[2]`.  Subscripts are also used to
represent sums of ; for example, `*[2\<sub\>2\</sub\>]` is
the sum `*[2] + *[2]`. Multiple subscripts should be read left-to-right, so
`*[2\<sub\>#2#\</sub\>]` is shorthand for the game whose only option is to
`(*[2\<sub\>#\</sub\>] + *[2])`.

+++ Directly Entering Games +++

You can enter games directly by using `*` followed by a list.

``*[4,2]``

Lists may contain other lists, in order to obtain nested options.

``*[[4,2],4,3,1]``

There is no shorthand for entering `#`'s or subscripts; for `#` you can use an extra pair of brackets:

``*[[2],2,1,0]``

And for `+`, just include compound expressions as list elements:

``*[[*[4] + *[2]]]``

+++ Misère Operations +++

Many standard misère operations are implemented. Here's a demonstration of Simon Norton's observation that the monoid
of canonical misère games does not have unique partitions.

``*[[*[4] + *[2]]].Partitions``

See the class documentation for [[game.misere.MisereCanonicalGame]] for the full list.

\<!--
+++ Misère Quotients +++

The ~MisereSolver~ plug-in, bundled with CGSuite, can be used to compute
misère quotients.  It's turned off by
default; to load it: go to Tools/Plug-in Manager; click "MisereSolver"; and
click "Load".  Then you can type:

`MisereQuotient(G)`

for the quotient of a particular game or canonical form;

`MisereQuotient("0.77")`

for the quotient of a heap game;

`MisereQuotient("0.77" : Heap := 24)`

for a particular partial quotient.

It's returned as a two-element list.  The first element is a commutative
monoid presentation; the second lists the P-portion.  See the
<a href=\"glossary.html\">Glossary of Methods</a> for a list of available methods.

You can also run ~MisereSolver~ directly from the commandline; this is
often useful for exploring large and complicated quotients.  Change to the `plugins/`
directory (where `misere.jar` is located) and type

`java -jar misere.jar`

for help.
--\>
