Grids and Strips

This section describes several tools included with CGSuite to assist with game implementation.

+++ Grids +++

A ~~grid~~ is a matrix of integers with a fixed number of rows and columns.  CGScript provides dedicated support for grids
via a utility class, $cgsuite.util.Grid$, and associated ruleset skeleton, $game.grid.GridRuleset$.

Rulesets such as Clobber that are played on grids will normally be subclasses of `GridRuleset`, which implements the nuts and
bolts of constructing, displaying and exploring grid-based positions.  An example of `GridRuleset` usage was given in the
first section of this tutorial ([[three-examples]]); this section will focus on the underlying utility classes.

A blank `Grid` can be created by passing the dimensions of the grid to the static method `Grid.Empty`.  For example:

`grid := Grid.Empty(3,4)`

constructs an empty grid with 3 rows and 4 columns. Grid values can be accessed with brackets:

`x := grid[(1,3)]`

The notation is the same as for lists, except that the argument to the accessor is a coordinate pair, rather than a single
integer. Accessing a location that is out of bounds returns `Nothing`. For example, in the $3x4$ grid above, any of
the following would return `Nothing`:

`grid[(0,1)]
grid[(4,4)]
grid[(-8,20)]`

Like most objects in CGSuite, grids are immutable. To create a new grid by changing some of the values of an existing
one, use the `Updated` method:

`newGrid := grid.Updated({ (1,1) => 5, (1,2) => 4, (2,1) => -1 })`

Grids can accept any value $x$ with $-128 \leq x \leq 127$. This limitation is for efficiency reasons: the grid structure
is optimized for implementations of games played on grids, where each grid location has a small finite number of states.
If you need more flexibility, use a different structure, such as a list of lists (which can accept any type of value,
but will be less efficient).

+++ Grid Manipulation +++

Grids can also be constructed by parsing strings, using the static method `Grid.Parse`.  For example:

`Grid.Parse("xox.|..ox|oxx.", ".xo")`

constructs the following 3x4 grid:

`1210
0021
2110`

The second argument to `Grid.Parse` (in this case `".xo"`) is the ~~character map~~, which describes the mapping between
symbols and grid values. The first character in the map corresponds to grid value 0, the second to grid value 1, etc.

CGScript provides a range of other methods for manipulating grids in ways that are common to ruleset implementations,
such as `Subgrid`, `Decomposition`, and `SymmetryInvariant`. See the help page for the [[cgsuite.util.Grid]] class for
details.

+++ Strips +++

A ~~strip game~~ is a game played on a 1-by-n grid.  The `Grid` class is cumbersome for strip games, so CGScript provides
a related class, `Strip`, and an associated `game.strip.StripRuleset` skeleton.  The structure is similar to $Grid$, except that
a single number (the strip location) is used in place of a pair of grid coordinates.  For example,

`strip := Strip.Empty(8)`

constructs a strip of length 8, and syntax like `strip[3]`, etc., is used to access it.

\footer

~~Continue on to the next part of the tutorial: [[advanced-language-features]]~~

\comment
+++ Symmetries +++

CGScript also provides tools for symmetry checking.  This can greatly speed up implementations of games where symmetries
are common.  The eight symmetries are defined in the $cgsuite.util.Symmetry$ enum.

$Grid.Permute(symmetry)$ constructs a new grid, obtained by permuting this grid according to the specified symmetry.
For example,

$grid := Grid(3,4); grid.Permute(Symmetry.RotateClockwise)$

would return an empty 4x3 grid.

$Grid.SymmetryInvariant(symmetries)$ is the method used most often by game implementations.  The input is a ~collection~
of symmetries, $S$, representing the elements of a symmetry group.  $S$ will ordinarily be one of the values
$Symmetry.Reflection$, $Symmetry.Rotational$ or $Symmetry.Eightfold$, but it's allowed to be any group of symmetries.
The return value will be another grid, obtained by applying some element of $S$ to this grid.  Crucially,
$SymmetryInvariant$ will return the same value if applied to any two grids that are symmetric according to $S$.

Typically, game implementations will override $CanonicalForm$ (or $NimValue$ in the case of impartial games) to return
the canonical form of the $SymmetryInvariant$ representation of $g$, rather than $g$ itself.  This ensures that no extra
work is done to compute canonical forms of symmetric positions.

A word of caution: be judicious in checking for symmetries.  For games where symmetries are common (such as
Domineering), it can provide an enormous speed gain.  For other games, however, it can actually have the opposite
effect.  For example, Amazons is ostensibly symmetric, but in practice symmetries are rarely encountered as followers
of a given starting position.  Adding symmetry checking to Amazons actually results in ~slower~ performance:
CGSuite does a lot of extra work checking all the different symmetries, and realizes little benefit.
\endcomment
