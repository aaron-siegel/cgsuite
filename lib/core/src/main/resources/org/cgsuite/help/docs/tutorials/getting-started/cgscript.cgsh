CGScript

CGScript is a powerful scripting language used in CGSuite for just about everything.  When you type commands into
the worksheet, you're writing them in CGScript.  In addition to evaluating simple expressions,
CGScript can also be used for more complicated tasks, such as implementing new rulesets.

This chapter introduces the basic elements of CGScript.  A separate tutorial,
[[/tutorials/programming-in-cgscript/programming-in-cgscript]], goes into more detail on CGScript programming and
describes how to design new classes, games, and rulesets.

+++ Sets +++

When you type, say,

`opts := *8.LeftOptions`

you get back all the Left options of `*8`.  The resulting ~set~ is itself an object and can be
    manipulated in various ways.  For example,

`opts.Contains(*3)`

returns `true` or `false` depending on whether `*3` is in the set.  You can also use these sets to construct
    games, as in

`{ opts,*8 | opts,*8 }`

which returns the expected `*9` (since we included `*8` in addition to the original set).

You can also specify sets explicitly, such as

`{}`

for the empty set, or

`{0,*,*2}`

for a set with elements.

Note that a pair of braces `{}` denotes a ~game~ if there's at least one slash in between (as in `{3|2}` or `{|}`),
and a ~set~ otherwise (as in `{3,2}` or `{}`).

+++Lists and Maps+++

A list is like a set, but the elements are sequenced and can be repeated.  Lists are created just like sets, but using
square brackets instead of curly braces.  For example,

`[0,*,*2]`

creates the list of `0`, `*` and `*2`.  To appreciate the difference between lists and sets, try entering the following
two commands into the worksheet:

`{1,5,1,3}`

`[1,5,1,3]`

If `x` is a list, then you can access the n^th^ element with square brackets.  For example, let

`x := [1,5,1,3];`

Then we can retrieve the element at index 2 with

`x[2]`

Maps are another useful abstraction.  They associate keys to values (both of which can be any object).  The syntax
for constructing a map looks like this:

`{ "key" => 14, "anotherKey" => 22, "hello" => "world" }`

In this map, the value `14` is associated to the key `"key"`, etc.

If `x` is a map, then you can access its values with square brackets.  For example, let

`x := { "key" => 14, "anotherKey" => 22, "hello" => "world" };`

Then we can retrieve the value corresponding to the key `"key"` with

`x["key"]`

Note that square brackets are used to retrieve (or assign) ~list elements~ by index, and also to retrieve (or assign)
~map elements~ by key.

The keys of a map don't need to be strings; they can be any object at all, and the same map can use objects of
different types as keys.  For example

`x[\^\^*4] := 2`

assigns the value `2` to the key `\^\^*4`.

The special syntax

`{ => }`

is used to denote an empty map (this distinguishes it from `{}`, which denotes an empty set).

+++ Example: PartizanSubtraction +++

Here's an example that illustrates the use of collections in practice.  Let $S_L_$ and $S_R_$ be sets of positive
integers.  The ~Partizan Subtraction Game~ on $(S_L_,S_R_)$ is played with heaps of tokens.  Left may remove $k$ tokens
from a heap, for any $k$ in $S_L_$.  Likewise Right may remove $k$ tokens for any $k$ in $S_R_$.

The CGSuite class `game.heap.PartizanSubtraction` can represent ~any~ partizan subtraction game: the subtraction sets are
simply specified as parameters.  For example,

`R := game.heap.PartizanSubtraction({1,3},{2,3})`

constructs a ruleset representing the partizan subtraction game with $S_L_ = {1,3}$ and $S_R_ = {2,3}$. Then to obtain
(say) the canonical form for a heap of size $10$, you can type, as always,

`R(10).CanonicalForm`

+++ Collection Iterators +++

In addition to specifying the elements of lists and sets explicitly, you can construct them by iterating over an
expression. The basic syntax looks like this:

`{g.CanonicalForm for g in x}`

If `x` is an existing collection, this command returns the set of all canonical forms of games in `x`. If you want
a list instead of a set:

`[g.CanonicalForm for g in x]`

You can also iterate over integers spanning a certain range:

`[n^2 for n from 1 to 10]`

Collection iterators can also be specified as arguments to functions. Here's an example that illustrates the handy
`Table` class, which takes as input a list of table rows, each of which is itself a list of table entries. With the
ruleset `R` defined as above:

`Table([n, R(n).CanonicalForm] for n from 1 to 10)`

This gives the first 10 values of the partizan subtraction game we introduced above.  As you can see (by typing it
into the worksheet), CGSuite prints tables in a neatly readable format.

+++ Defined Functions +++

We've already encountered user-defined functions, in the [[using-the-worksheet]] section of the tutorial:

`def f(x) := x + 1`

You can also specify a function as follows:

`x -> x + 1`

This notation is handy when you just want to pass a function along to some other operation, rather than giving it a
name. The following two expressions are exactly equivalent.

`def f(x) := x + 1`\\
`f := x -> x + 1`

+++ Other Types +++

A few other types are worth mentioning.  Strings like

`"xox|ox."`

or

`"Hello there!"`

are objects of class `String`, and the special values `true` and `false` are objects of class `Boolean`.

<!--Finally, there is the class `Nothing`, which is a `singleton`: it has only one instance.-->

You can test whether any object `x` matches a given type (say `String`) with the syntax

`x is String`

and you can get the exact type of `x` by typing

`x.Class`

Try the following, for example:

`*2 is CanonicalShortGame`\\
`*2.Class`\\
`game.heap.Nim is game.heap.HeapRuleset`

<!--
+++ Exercises +++
\ol
\li Consider the partizan subtraction game we studied above, `{1,3}` vs. `{2,3}`.  Print the first 10 canonical forms just as we
did in the `tableof` section above, and note that they rapidly become a mess.  Now print the first 30 ~reduced~ canonical
forms.  (You can do this by using the `ReducedCanonicalForm` property in place of `CanonicalForm`.)  Make a conjecture about the RCFs of
arbitrary positions.
\endol
-->

\## Footer ##

~~Continue on to the next part of the tutorial: [[impartial-games]]~~
