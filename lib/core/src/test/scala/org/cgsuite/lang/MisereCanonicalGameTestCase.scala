package org.cgsuite.lang

object MisereCanonicalGameTestCase {

  val instances = Seq(

    MisereCanonicalGameTestCase(
      "*[0]", "*[0]", "MisereCanonicalGame",
      birthday = "0",
      genus = "0",
      isEven = "true",
      isExtraverted = "true",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "true",
      isNimHeap = "true",
      isPrime = "false",
      isRestive = "false",
      isRestless = "false",
      isTame = "true",
      isTameable = "true",
      mate = "*[1]",
      misereNimValue = "1",
      misereOutcomeClass = "N",
      nimValue = "0",
      options = "[]",
      partitions = "[[]]",
      parts = "[]"
    ),

    MisereCanonicalGameTestCase(
      "*[1]", "*[1]", "MisereCanonicalGame",
      birthday = "1",
      genus = "1",
      isEven = "false",
      isExtraverted = "true",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "true",
      isNimHeap = "true",
      isPrime = "false",
      isRestive = "false",
      isRestless = "false",
      isTame = "true",
      isTameable = "true",
      mate = "*[0]",
      misereNimValue = "0",
      misereOutcomeClass = "P",
      nimValue = "1",
      options = "[*[0]]",
      partitions = "[[*[1]]]",
      parts = "[]"
    ),

    MisereCanonicalGameTestCase(
      "*[2]", "*[2]", "MisereCanonicalGame",
      birthday = "2",
      genus = "2",
      isEven = "true",
      isExtraverted = "true",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "true",
      isPrime = "true",
      isRestive = "false",
      isRestless = "false",
      isTame = "true",
      isTameable = "true",
      mate = "*[2]",
      misereNimValue = "2",
      misereOutcomeClass = "N",
      nimValue = "2",
      options = "[*[0],*[1]]",
      partitions = "[[*[2]]]",
      parts = "[]"
    ),

    MisereCanonicalGameTestCase(
      "*[[2]]", "*[2#]", "MisereCanonicalGame",
      birthday = "3",
      genus = "0^0",
      isEven = "true",
      isExtraverted = "true",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "false",
      isRestive = "false",
      isRestless = "false",
      isTame = "true",
      isTameable = "true",
      mate = "*[2#]",
      misereNimValue = "0",
      misereOutcomeClass = "P",
      nimValue = "0",
      options = "[*[2]]",
      partitions = "[[*[2],*[2[#-2]]]]",
      parts = "[*[2],*[2[#-2]]]"
    ),

    MisereCanonicalGameTestCase(
      "*[[[2]]]", "*[2##]", "MisereCanonicalGame",
      birthday = "4",
      genus = "1^1",
      isEven = "true",
      isExtraverted = "true",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "false",
      isRestive = "false",
      isRestless = "false",
      isTame = "true",
      isTameable = "true",
      mate = "*[2##]",
      misereNimValue = "1",
      misereOutcomeClass = "N",
      nimValue = "1",
      options = "[*[2#]]",
      partitions = "[[*[2],*[2[#-2]],*[2[##-2]0]]]",
      parts = "[*[2],*[2[##-2]],*[2#],*[2[##-2]0],*[2[#-2]],*[(2[##-2]0)[2]]]"
    ),

    MisereCanonicalGameTestCase(
      "*[2]+*[2]", "*[2[2]]", "MisereCanonicalGame",
      birthday = "4",
      genus = "0^0",
      isEven = "true",
      isExtraverted = "true",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "false",
      isRestive = "false",
      isRestless = "false",
      isTame = "true",
      isTameable = "true",
      mate = "*[2[2]]",
      misereNimValue = "0",
      misereOutcomeClass = "P",
      nimValue = "0",
      options = "[*[2],*[3]]",
      partitions = "[[*[2],*[2]]]",
      parts = "[*[2]]"
    ),

    MisereCanonicalGameTestCase(
      "*[[*[2]+*[[2]]]]", "*[2[#2#]]", "MisereCanonicalGame",
      birthday = "6",
      genus = "0^0",
      isEven = "true",
      isExtraverted = "true",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "false",
      isRestive = "false",
      isRestless = "false",
      isTame = "true",
      isTameable = "true",
      mate = "*[2[#2#]]",
      misereNimValue = "0",
      misereOutcomeClass = "P",
      nimValue = "0",
      options = "[*[2[#2]]]",
      partitions = "[[*[2],*[2],*[2[#-2]],*[2[#-2]]]]",
      parts = "[*[2],*[2[#2#-2]],*[2#],*[2[2]],*[2[#2#-2-2]],*[2[#-2]],*[2[#2]]]"
    ),

    MisereCanonicalGameTestCase(
      "*[[2],0]", "*[2#0]", "MisereCanonicalGame",
      birthday = "4",
      genus = "1^2",
      isEven = "true",
      isExtraverted = "false",
      isGenerallyRestive = "true",
      isGenerallyTame = "false",
      isHalfTame = "true",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "true",
      isRestive = "true",
      isRestless = "false",
      isTame = "false",
      isTameable = "false",
      mate = "*[2#1]",
      misereNimValue = "2",
      misereOutcomeClass = "N",
      nimValue = "1",
      options = "[*[0],*[2#]]",
      partitions = "[[*[2#0]]]",
      parts = "[]"
    ),

    // Restive
    MisereCanonicalGameTestCase(
      "*[[2],0]", "*[2#0]", "MisereCanonicalGame",
      birthday = "4",
      genus = "1^2",
      isEven = "true",
      isExtraverted = "false",
      isGenerallyRestive = "true",
      isGenerallyTame = "false",
      isHalfTame = "true",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "true",
      isRestive = "true",
      isRestless = "false",
      isTame = "false",
      isTameable = "false",
      mate = "*[2#1]",
      misereNimValue = "2",
      misereOutcomeClass = "N",
      nimValue = "1",
      options = "[*[0],*[2#]]",
      partitions = "[[*[2#0]]]",
      parts = "[]"
    ),

    // Restless
    MisereCanonicalGameTestCase(
      "*[[2],1]", "*[2#1]", "MisereCanonicalGame",
      birthday = "4",
      genus = "2^1420",
      isEven = "true",
      isExtraverted = "false",
      isGenerallyRestive = "false",
      isGenerallyTame = "false",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "true",
      isRestive = "false",
      isRestless = "true",
      isTame = "false",
      isTameable = "false",
      mate = "*[2#0]",
      misereNimValue = "1",
      misereOutcomeClass = "N",
      nimValue = "2",
      options = "[*[1],*[2#]]",
      partitions = "[[*[2#1]]]",
      parts = "[]"
    ),

    // Multiple partitions
    MisereCanonicalGameTestCase(
      "*[[*[4]+*[2]]]", "*[4[2#]]", "MisereCanonicalGame",
      birthday = "7",
      genus = "0^0",
      isEven = "true",
      isExtraverted = "false",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "false",
      isRestive = "false",
      isRestless = "false",
      isTame = "true",
      isTameable = "true",
      mate = "*[4[2#]]",
      misereNimValue = "0",
      misereOutcomeClass = "P",
      nimValue = "0",
      options = "[*[4[2]]]",
      partitions = "[[*[2],*[4[2#-2]]],[*[4],*[4[2#-4]]]]",
      parts = "[*[2],*[4[2#-2]],*[4],*[4[2#-4]]]"
    ),

    // Generally tame, but not tame
    MisereCanonicalGameTestCase(
      "*[[[2]],[[2],1]]", "*[(2#1)2##]", "MisereCanonicalGame",
      birthday = "5",
      genus = "0^0",
      isEven = "true",
      isExtraverted = "false",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "true",
      isRestive = "false",
      isRestless = "false",
      isTame = "false",
      isTameable = "true",
      mate = "*[(2#0)2##]",
      misereNimValue = "0",
      misereOutcomeClass = "P",
      nimValue = "0",
      options = "[*[2##],*[2#1]]",
      partitions = "[[*[(2#1)2##]]]",
      parts = "[]"
    ),

    // Generally tame with separate reverting moves to 0^1 and 1^0
    MisereCanonicalGameTestCase(
      "*[[[2]],[[[2],0],0,1]]", "*[((2#0)10)2##]", "MisereCanonicalGame",
      birthday = "6",
      genus = "0^0",
      isEven = "true",
      isExtraverted = "false",
      isGenerallyRestive = "false",
      isGenerallyTame = "true",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "true",
      isRestive = "false",
      isRestless = "false",
      isTame = "false",
      isTameable = "true",
      mate = "*[((2#1)10)2##]",
      misereNimValue = "0",
      misereOutcomeClass = "P",
      nimValue = "0",
      options = "[*[2##],*[(2#0)10]]",
      partitions = "[[*[((2#0)10)2##]]]",
      parts = "[]"
    ),

    // Tameable, but not generally tame
    MisereCanonicalGameTestCase(
      "*[*[[2],1]+*[1],[[2],*[[2]]+*[1],[[2],0]]]", "*[((2#0)2[#1]2#)(2#1)[1]]", "MisereCanonicalGame",
      birthday = "6",
      genus = "0^120",
      isEven = "true",
      isExtraverted = "false",
      isGenerallyRestive = "false",
      isGenerallyTame = "false",
      isHalfTame = "false",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "true",
      isRestive = "false",
      isRestless = "false",
      isTame = "false",
      isTameable = "true",
      mate = "*[((2#1)2[#1]2#)(2#0)[1]]",
      misereNimValue = "1",
      misereOutcomeClass = "N",
      nimValue = "0",
      options = "[*[(2#1)[1]],*[(2#0)2[#1]2#]]",
      partitions = "[[*[((2#0)2[#1]2#)(2#1)[1]]]]",
      parts = "[]"
    ),

    // Restive, but not generally restive
    MisereCanonicalGameTestCase(
      "*[[[2],2,0],[[2],3],1]", "*[(2#20)2[#1]1]", "MisereCanonicalGame",
      birthday = "5",
      genus = "0^2",
      isEven = "true",
      isExtraverted = "false",
      isGenerallyRestive = "true",
      isGenerallyTame = "false",
      isHalfTame = "true",
      isIntroverted = "false",
      isNimHeap = "false",
      isPrime = "true",
      isRestive = "false",
      isRestless = "false",
      isTame = "false",
      isTameable = "false",
      mate = "*[(2#21)2[#1]0]",
      misereNimValue = "2",
      misereOutcomeClass = "N",
      nimValue = "0",
      options = "[*[1],*[2[#1]],*[2#20]]",
      partitions = "[[*[(2#20)2[#1]1]]]",
      parts = "[]"
    )

  )

}

case class MisereCanonicalGameTestCase(
  x: String,
  xOut: String,
  cls: String,
  birthday: String,
  genus: String,
  isEven: String,
  isExtraverted: String,
  isGenerallyRestive: String,
  isGenerallyTame: String,
  isHalfTame: String,
  isIntroverted: String,
  isNimHeap: String,
  isPrime: String,
  isRestive: String,
  isRestless: String,
  isTame: String,
  isTameable: String,
  mate: String,
  misereNimValue: String,
  misereOutcomeClass: String,
  nimValue: String,
  options: String,
  partitions: String,
  parts: String
  ) {

  def toTests = Seq(
    (x, xOut),
    (s"($x).Class", s"<<game.misere.$cls>>"),
    (s"($x).Birthday", birthday),
    (s"($x).Genus", genus),
    (s"($x).IsEven", isEven),
    (s"($x).IsExtraverted", isExtraverted),
    (s"($x).IsHalfTame", isHalfTame),
    (s"($x).IsGenerallyRestive", isGenerallyRestive),
    (s"($x).IsGenerallyTame", isGenerallyTame),
    (s"($x).IsIntroverted", isIntroverted),
    (s"($x).IsNimHeap", isNimHeap),
    (s"($x).IsPrime", isPrime),
    (s"($x).IsRestive", isRestive),
    (s"($x).IsRestless", isRestless),
    (s"($x).IsTame", isTame),
    (s"($x).IsTameable", isTameable),
    (s"($x).Mate", mate),
    (s"($x).MisereNimValue", misereNimValue),
    (s"($x).MisereOutcomeClass", misereOutcomeClass),
    (s"($x).NimValue", nimValue),
    (s"($x).Options", options),
    (s"($x).Partitions", partitions),
    (s"($x).Parts", parts)
  ) map { case (expr, result) => (expr, expr, result) }

}