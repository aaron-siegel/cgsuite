package org.cgsuite.lang

object CanonicalShortGameTestCase {

  val instances = Seq(

    CanonicalShortGameTestCase(
      "0", "0", "Zero",
      birthday = "0",
      isInfinitesimal = "true",
      isInteger = "true",
      isNimber = "true",
      isNumber = "true",
      isNumberish = "true",
      isNumberTiny = "true",
      isUptimal = "true",
      leftOptions = "{}",
      leftStop = "0",
      mean = "0",
      rightOptions = "{}",
      rightStop = "0",
      stopCount = "1",
      temperature = "-1",
      uptimalExpansion = "0.0"
    ),

    CanonicalShortGameTestCase(
      "5", "5", "Integer",
      birthday = "5",
      isInfinitesimal = "false",
      isInteger = "true",
      isNimber = "false",
      isNumber = "true",
      isNumberish = "true",
      isNumberTiny = "true",
      isUptimal = "true",
      leftOptions = "{4}",
      leftStop = "5",
      mean = "5",
      rightOptions = "{}",
      rightStop = "5",
      stopCount = "1",
      temperature = "-1",
      uptimalExpansion = "5.0"
    ),

    CanonicalShortGameTestCase(
      "-1823437481924", "-1823437481924", "Integer",
      birthday = "1823437481924",
      isInfinitesimal = "false",
      isInteger = "true",
      isNimber = "false",
      isNumber = "true",
      isNumberish = "true",
      isNumberTiny = "true",
      isUptimal = "true",
      leftOptions = "{}",
      leftStop = "-1823437481924",
      mean = "-1823437481924",
      rightOptions = "{-1823437481923}",
      rightStop = "-1823437481924",
      stopCount = "1",
      temperature = "-1",
      uptimalExpansion = "-1823437481924.0"
      ),

    CanonicalShortGameTestCase(
      "-1/2", "-1/2", "DyadicRational",
      birthday = "2",
      isInfinitesimal = "false",
      isInteger = "false",
      isNimber = "false",
      isNumber = "true",
      isNumberish = "true",
      isNumberTiny = "true",
      isUptimal = "true",
      leftOptions = "{-1}",
      leftStop = "-1/2",
      mean = "-1/2",
      rightOptions = "{0}",
      rightStop = "-1/2",
      stopCount = "1",
      temperature = "-1/2",
      uptimalExpansion = "-1/2.0"
    ),

    CanonicalShortGameTestCase(
      "25/16", "25/16", "DyadicRational",
      birthday = "6",
      isInfinitesimal = "false",
      isInteger = "false",
      isNimber = "false",
      isNumber = "true",
      isNumberish = "true",
      isNumberTiny = "true",
      isUptimal = "true",
      leftOptions = "{3/2}",
      leftStop = "25/16",
      mean = "25/16",
      rightOptions = "{13/8}",
      rightStop = "25/16",
      stopCount = "1",
      temperature = "-1/16",
      uptimalExpansion = "25/16.0"
    ),

    CanonicalShortGameTestCase(
      "*8", "*8", "Nimber",
      birthday = "8",
      isInfinitesimal = "true",
      isInteger = "false",
      isNimber = "true",
      isNumber = "false",
      isNumberish = "true",
      isNumberTiny = "false",
      isUptimal = "false",
      leftOptions = "{0,*,*2,*3,*4,*5,*6,*7}",
      leftStop = "0",
      mean = "0",
      rightOptions = "{0,*,*2,*3,*4,*5,*6,*7}",
      rightStop = "0",
      stopCount = "4374",
      temperature = "0",
      uptimalExpansion = "!!That game is not an uptimal."
    ),

    CanonicalShortGameTestCase(
      "^", "^", "NumberUpStar",
      birthday = "2",
      isInfinitesimal = "true",
      isInteger = "false",
      isNimber = "false",
      isNumber = "false",
      isNumberish = "true",
      isNumberTiny = "false",
      isUptimal = "true",
      leftOptions = "{0}",
      leftStop = "0",
      mean = "0",
      rightOptions = "{*}",
      rightStop = "0",
      stopCount = "3",
      temperature = "0",
      uptimalExpansion = "0.1"
    ),

    CanonicalShortGameTestCase(
      "v*", "v*", "NumberUpStar",
      birthday = "2",
      isInfinitesimal = "true",
      isInteger = "false",
      isNimber = "false",
      isNumber = "false",
      isNumberish = "true",
      isNumberTiny = "false",
      isUptimal = "true",
      leftOptions = "{0}",
      leftStop = "0",
      mean = "0",
      rightOptions = "{0,*}",
      rightStop = "0",
      stopCount = "4",
      temperature = "0",
      uptimalExpansion = "*.1-"
    ),


    CanonicalShortGameTestCase(
      "6+^*", "6^*", "NumberUpStar",
      birthday = "8",
      isInfinitesimal = "false",
      isInteger = "false",
      isNimber = "false",
      isNumber = "false",
      isNumberish = "true",
      isNumberTiny = "false",
      isUptimal = "true",
      leftOptions = "{6,6*}",
      leftStop = "6",
      mean = "6",
      rightOptions = "{6}",
      rightStop = "6",
      stopCount = "4",
      temperature = "0",
      uptimalExpansion = "6*.1"
    ),

    CanonicalShortGameTestCase(
      "^*6", "^*6", "NumberUpStar",
      birthday = "8",
      isInfinitesimal = "true",
      isInteger = "false",
      isNimber = "false",
      isNumber = "false",
      isNumberish = "true",
      isNumberTiny = "false",
      isUptimal = "false",
      leftOptions = "{0}",
      leftStop = "0",
      mean = "0",
      rightOptions = "{*7}",
      rightStop = "0",
      stopCount = "1459",
      temperature = "0",
      uptimalExpansion = "!!That game is not an uptimal."
    ),

    CanonicalShortGameTestCase(
      "73/16+v9*8", "73/16v9*8", "NumberUpStar",
      birthday = "27",
      isInfinitesimal = "false",
      isInteger = "false",
      isNimber = "false",
      isNumber = "false",
      isNumberish = "true",
      isNumberTiny = "false",
      isUptimal = "false",
      leftOptions = "{73/16v8*9}",
      leftStop = "73/16",
      mean = "73/16",
      rightOptions = "{73/16}",
      rightStop = "73/16",
      stopCount = "13131",
      temperature = "0",
      uptimalExpansion = "!!That game is not an uptimal."
    ),

    CanonicalShortGameTestCase(
      "{0|*||*|||*||||*}", "{^|*||*|||*}", "CanonicalShortGame",
      birthday = "5",
      isInfinitesimal = "true",
      isInteger = "false",
      isNimber = "false",
      isNumber = "false",
      isNumberish = "true",
      isNumberTiny = "false",
      isUptimal = "true",
      leftOptions = "{{^|*||*}}",
      leftStop = "0",
      mean = "0",
      rightOptions = "{*}",
      rightStop = "0",
      stopCount = "9",
      temperature = "0",
      uptimalExpansion = "0.1111"
    ),

    CanonicalShortGameTestCase(
      "{0||0|v*}", "{0||0|v*}", "CanonicalShortGame",
      birthday = "4",
      isInfinitesimal = "true",
      isInteger = "false",
      isNimber = "false",
      isNumber = "false",
      isNumberish = "true",
      isNumberTiny = "false",
      isUptimal = "true",
      leftOptions = "{0}",
      leftStop = "0",
      mean = "0",
      rightOptions = "{{0|v*}}",
      rightStop = "0",
      stopCount = "6",
      temperature = "0",
      uptimalExpansion = "*.12"
    )

  )

}

case class CanonicalShortGameTestCase(
  x: String,
  xOut: String,
  cls: String,
  birthday: String,
  isInfinitesimal: String,
  isInteger: String,
  isNimber: String,
  isNumber: String,
  isNumberish: String,
  isNumberTiny: String,
  isUptimal: String,
  leftOptions: String,
  leftStop: String,
  mean: String,
  rightOptions: String,
  rightStop: String,
  stopCount: String,
  temperature: String,
  uptimalExpansion: String
  ) {

  def toTests = Seq(
    (x, xOut),
    (s"($x).Class", s"<<game.$cls>>"),
    (s"($x).Birthday", birthday),
    (s"($x).IsInfinitesimal", isInfinitesimal),
    (s"($x).IsInteger", isInteger),
    (s"($x).IsNimber", isNimber),
    (s"($x).IsNumber", isNumber),
    (s"($x).IsNumberish", isNumberish),
    (s"($x).IsNumberTiny", isNumberTiny),
    (s"($x).IsUptimal", isUptimal),
    (s"($x).Options(Player.Left)", leftOptions),
    (s"($x).LeftOptions", leftOptions),
    (s"($x).LeftStop", leftStop),
    (s"($x).Mean", mean),
    (s"($x).Options(Player.Right)", rightOptions),
    (s"($x).RightOptions", rightOptions),
    (s"($x).RightStop", rightStop),
    (s"($x).StopCount", stopCount),
    (s"($x).Temperature", temperature),
    (s"($x).UptimalExpansion", uptimalExpansion)
  ) map { case (expr, result) => (expr, expr, result) }

}
