
// Basic script processing

Simple echo                     \ 0 \ 0 \
Variable assignment             \ g := 0 \ 0 \
Variable retrieval              \ g \ 0 \
Multivee/identifier parse check \ vvvvx := vvvvv \ v5 \

// Arithmetic

Integer addition                \ 3+5 \ 8 \
Integer multiplication          \ 3*5 \ 15 \
Integer exponentiation          \ 3^5 \ 243 \
Rational number                 \ 4/6 \ 2/3 \
Rational exponentiation         \ (1/2)^4 \ 1/16 \
Negative power                  \ 2^(-4) \ 1/16 \
Nimber addition                 \ *3+*5 \ *6 \
Nimber operator                 \ *(3+5) \ *8 \
Ups                             \ ^^^^^^+vvv*+^19*3+v14 \ ^8*2 \

Integer plus rational           \ 2 + 3/4 \ 11/4 \
Integer plus canonical game     \ 2 + (1+*) \ 3* \
Integer minus rational          \ 2 - 3/4 \ 5/4 \
Integer minus canonical game    \ 2 - (1+*) \ 1* \

// Canonical form specification

Composition                     \ {0|^*5} \ ^^*4 \
Slashes                         \ {3|||2||1|0,*||||-1/2} \ {3|||2||1|0,*||||-1/2} \
Switch                          \ +-1 \ +-1 \
Fractional switch               \ +-1/2 \ +-1/2 \
Multiple switch                 \ +-(1,1+*) \ +-(1,1*) \
Number + switch                 \ 3+-1 \ {4|2} \
Compound switch                 \ +-1+-2+-3+-4 \ +-{10|8||6|4|||4|2||0|-2} \
Tiny                            \ {0||0|-1} \ 1.Tiny \
Tiny fraction                   \ {0||0|-1/4} \ (1/4).Tiny \
Tiny G                          \ {0|||0||-1|-2} \ {2|1}.Tiny \
Pow                             \ {0|v*} \ ^.Pow(2) \
Pow*                            \ {0,*|v} \ ^.Pow(2)+* \
PowTo                           \ {^|*} \ ^.PowTo(2) \
PowTo*                          \ {0,^*|0} \ ^.PowTo(2)+* \

// Loopy game specification

on                              \ {pass|} \ on \
off                             \ {|pass} \ off \
over                            \ {0|pass} \ over \
under                           \ {pass|0} \ under \
upon                            \ {pass|*} \ {pass|*} \
Hanging pass                    \ pass \ !!Unexpected "pass". \
Hanging pass 2                  \ {1|0+pass} \ !!Unexpected "pass". \

// Collections

List                            \ [3,5,3,1] \ [3,5,3,1] \
Set                             \ {3,5,3,1} \ {1,3,5} \
Heterogeneous set               \ {3,"foo",nil,true,[3,5,3,1],+-6,*2,"bar"} \ {nil,true,"bar","foo",3,*2,+-6,[3,5,3,1]} \
Map                             \ {"foo" => 1, "bar" => *2, 16 => 22} \ {"bar" => *2, "foo" => 1, 16 => 22} \

// Copy on write

Copy on write                   \ x := [1,2,3]; y := [4,x,5]; x[2] := 6; [x,y] \ [[1,6,3],[4,[1,2,3],5]] \
Complex copy on write           \ x := [1,2,3]; y := [4,x,5]; x[2] := y; y[2] := x; y \ [4,[1,[4,[1,2,3],5],3],5] \

// Immutability

Immutable retrieval             \ mut := test.TestImmutable(); mut.Retrieve(3); \ 3 \
Immutable assignment            \ mut := test.TestImmutable(); mut.AssignBad([5,6,7]); \ !!Cannot change member variable of immutable object: x \
Immutable member mutation       \ mut := test.TestImmutable(); mut.MutateBad(3, 9); \ !!Cannot call mutable method on member of immutable object: cgsuite.lang.List.op []:= \
Mutable retrieval               \ mut := test.TestMutable(); mut.Retrieve(3); \ 3 \
Mutable assignment              \ mut := test.TestMutable(); mut.AssignGood([5,6,7]); mut.Retrieve(3); \ 7 \
Mutable member mutation         \ mut := test.TestMutable(); mut.MutateGood(3, 9); mut.Retrieve(3); \ 9 \
Immutable method - assignment   \ mut := test.TestMutable(); mut.AssignBad([5,6,7]); \ !!Illegal \
Immutable method - mutation     \ mut := test.TestMutable(); mut.MutateBad(3, 9); \ !!Illegal \
Immutable declares mutable      \ mut := test.TestBadImmutable(); \ !!Declaration is marked "mutable" but enclosing class is not: NoGood \

// Var shadowing

Loop variable shadows member var        \ shadow := test.TestShadowing(); shadow.ShadowLoop(); \ !!Loop variable name shadows member variable: x \
Loop variable shadows super var         \ shadow := test.TestShadowingSubclass(); shadow.SubShadowLoop(); \ !!Loop variable name shadows member variable: x \
Loop variable shadows subclass var      \ shadow := test.TestShadowingSubclass(); shadow.NonShadowLoop(); \ "ok" \
Local variable shadows subclass var     \ shadow := test.TestShadowingSubclass(); shadow.NonShadowLocalSub(); \ 5 \
Method parameter shadows subclass var   \ shadow := test.TestShadowingSubclass(); shadow.NonShadowParamSub(); \ 5 \
Duplicate var                           \ test.TestDuplicateVar; \ !!Duplicate variable: x \
Member var shadows superclass var       \ test.TestBadShadow; \ !!Variable shadows superclass var: x (from class test.TestShadowing) \

// Grids and Strips
// TODO Add more
Grid (invalid char violation)   \ Grid.ParseGrid("xox.|.oxj", ".xo") \ !!The position may only contain the following characters: .xo \
Grid (equal length violation)   \ Grid.ParseGrid("xox.|.ox", ".xo") \ !!All rows of the position must have equal length. \
Strip (multirow violation)      \ Strip.ParseStrip("xox|.ox", ".xo") \ !!The position must contain just one row. \

// CanonicalShortGame

Game relations (0,*)            \ [*==0, *>=0, *<=0, *>0, *<0, *<>0, *|>0, *<|0, *!=0, *<=>0] \ [false,false,false,false,false,true,true,true,true,*] \
Game relations (0,1)            \ [1==0, 1>=0, 1<=0, 1>0, 1<0, 1<>0, 1|>0, 1<|0, 1!=0, 1<=>0] \ [false,true,false,true,false,false,true,false,true,1] \
Simplification                  \ 1-1==0 \ true \
AtomicWeight                    \ {^^*|*,v}.AtomicWeight \ 1/2 \
AtomicWeight (not infinitesimal)\ 1.AtomicWeight \ !!That game is not atomic. \
AtomicWeight (not atomic)       \ {2|^^||0}.AtomicWeight \ !!That game is not atomic. \
AtomicWeight (not all small)    \ {1|^||0}.AtomicWeight \ 1 \
Birthday                        \ ^^*2.Birthday \ 4 \
Birthday2                       \ (117/64).Birthday \ 8 \
Companion                       \ {1|^^}.Companion \ {1|^^*} \
Diversity                       \ *10.Diversity \ 11 \
Freeze                          \ {3+*||2|1}.Freeze \ 9/4* \
// Incentives                   \ TODO \ \
// Is*                          \ TODO \ \
LeftOptions                     \ {*2,*|-1}.LeftOptions \ {*,*2} \
LeftStop                        \ {*2,*|-1}.LeftStop \ 0 \
Mean                            \ {3+*||2|1}.Mean \ 9/4 \
Miny                            \ 3+2.Miny \ 3+2.Miny \
Rcf                             \ {3+*||2|1}.Rcf \ {3||2|1} \
RightOptions                    \ {*2,*|-1}.RightOptions \ {-1} \
RightStop                       \ {*2,*|-1}.RightStop \ -1 \
StopCount                       \ *10.StopCount \ 39366 \
Temperature                     \ {3+*||2|1}.Temperature \ 3/4 \
// Thermograph                  \ TODO \ \
Tiny                            \ 2.Tiny \ 2.Tiny \
Heat                            \ *2.Heat(1) \ +-(1,{2|0}) \
Overheat                        \ (31/64).Overheat(0,0) \ ^.PowTo(5) \
Cool                            \ {3+*||2|1}.Cool(1/2) \ {5/2|2*} \
Cool2                           \ {3+*||2|1}.Cool(1) \ 9/4 \
NortonMultiply                  \ ^.NortonMultiply(^) \ {^^*||0|v4} \
ConwayMultiply                  \ *4.ConwayMultiply(*4) \ *6 \
OrdinalSum                      \ *4.OrdinalSum(*5) \ *9 \
Pow                             \ ^^.Pow(3) \ ^.Pow(3) \
PowTo                           \ ^^.PowTo(3) \ {^^|^*||^*} \
Options                         \ {*2,*|-1}.Options(Player.Left) \ {*,*2} \

// DayN

Count of day-3 games            \ DayN(3).Size \ 1474 \
Count of day-3 all-small games  \ DayN(3, allSmall => true).Size \ 67 \
Count of day-3 reduced games    \ DayN(3, reduced => true).Size \ 61 \
Count of day-2 antichains       \ DayN(2).Antichains.Size \ 98 \

// Grid games

Amazons                         \ game.grid.Amazons("x...|o...").CanonicalForm \ +-(3,{4|0,{1|0,*}},{4|+-1,{0,{1/2|0}|v},+-(1,{2|0})}) \
Clobber                         \ game.grid.Clobber("xox|ox.").CanonicalForm \ {^^*|*,v} \
Clobber (Diagonal)              \ game.grid.Clobber("xoxo|oox.|xxx.", directions => Direction.Diagonal).CanonicalForm \ {0,v*|vv} \
Clobber (Anti)                  \ game.grid.Clobber("xoxo|oo..", anti => true).CanonicalForm \ {*|-1} \
Domineering                     \ game.grid.Domineering(Grid(4,4)).CanonicalForm \ +-(0,{{2|0},2+2.Tiny|{2|0},2.Miny}) \
Konane                          \ game.grid.Konane(".xo.o.o.|.o......|.x......").CanonicalForm \ {1,1*,{1,1*|0}|0} \
NoGo                            \ game.grid.NoGo("x..|...|x.x").CanonicalForm \ {3||2|1|||{1|0},{1,{2|1}|{1|0},1.Miny}} \

// Strip games

Push                            \ game.strip.Push("xo.xo.xo.xo").CanonicalForm \ -183/32 \
ToadsAndFrogs                   \ game.strip.ToadsAndFrogs("ttttt..fffff").CanonicalForm \ +-({2|*},{5/2||2|{0||||{0||v.Pow(2)|-1},{0||||0||(1/32).Miny|-2|||-1/2*}|||v.Pow(2)|-1/2||-1*}|||0}) \
ToadsAndFrogs (strip violation) \ game.strip.ToadsAndFrogs("t.f|f.t") \ !!The position must contain just one row. \
TopplingDominoes                \ game.strip.TopplingDominoes("xoxeoxeeo").CanonicalForm \ {1/2,{1/2|*},{1/2|0,*2}|-1,{0|-1},{*,*2|-1}} \