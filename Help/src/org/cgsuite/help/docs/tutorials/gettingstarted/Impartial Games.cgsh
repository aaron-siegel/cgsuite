
This section describes CGSuite's specialized support for impartial games.

##TOC##

++ Heap Games and Grundy Sequences ++

Positions in heap games can be constructed in much the same way as other
types of games; for example,

$h := game.heap.Heap("0.07", 24);$

creates a heap of size 24 in <b>0.07</b> (Dawson's Kayles).  You can use
these objects to calculate canonical forms just as for partizan games, e.g.,

$h.CanonicalForm$

Because heap games are so simple, though, this method is hopelessly inefficient.
CGSuite provides a far better treatment of heap games through the $HeapRules$
class.  Type the following:

$hr := game.heap.HeapRules.MakeRules("0.07");$

Now $hr$ can be used to calculate large numbers of nim values all at once.
For example:

$hr.NimValues(300)$

gives the first $300$ nim values of Dawson's Kayles.  You can also query
individual values by typing simply $hr[24]$ (say).

Periodicity can be tested as follows:

$hr.CheckPeriodicity(300)$

This tells CGSuite to attempt to determine if <b>0.07</b> is periodic, computing
at most 300 values.  It succeeds, and gives the correct answer, period 34.  Now
we can pretty-print the period by typing

$hr.NimValues(300).PeriodicTable(34)$

++ Take-and-Break Codes ++

CGSuite supports a wide variety of take-and-break codes.  You can use 
the digits 0-9 and A-F in the usual fashion for octal and hexadecimal games.  
In addition, you can use G-Z for "digits" 16-35, and there is a special notation 
for larger "digits"; for example

$&amp;64;$

for a digit of size 64.  You could also enter this as a hex code by

$&amp;x40;$

In addition, it's possible to place restrictions on moves in a take-and-break 
game.  For example, appending ! to a digit means that all the resulting 
heaps must be unequal.  For example, the game

$4.0$

is "split a heap into two non-empty heaps".  If you compute just a few nim values,
you'll see that it's not very 
interesting.  However, change this to

$4!.0$

and we now have Grundy's Game: "split a heap into two non-empty heaps of 
different sizes".  This is perhaps the most-studied heap game of them all.  
Likewise,

$0.4!$

would be the variant "remove one token and split the remainder into two 
non-empty heaps of different sizes."  And so on.

Finally, certain ~infinite~ repeating codes are possible by bracketing 
the final digits of a code.  Here is a list of examples.
      <ul><li>$0.[3]$ - Nim (remove any number of tokens from
              a heap)
          <li>$0.77$ - Kayles (remove one or two tokens from
              a heap, optionally splitting the remainder into two heaps)
          <li>$4!.$ - Grundy's Game (split any heap into
              two unequal heaps)
          <li>$20.017$ - Either add a token to a non-empty heap;
              or remove a heap of size 2 completely; or remove three tokens
              from a heap, optionally splitting the remainder into two heaps
          <li>$0.[37]$ - Remove any (positive) number of tokens
              from a heap.  If the number of tokens removed is even, then
              the heap may optionally be split into two heaps
          <li>$8!.$ - Split any heap into exactly three pairwise
              unequal heaps
          <li>$8?.$ - Split any heap into exactly three heaps,
              which cannot all be equal
          <li>$0.(r?8!g)$ - Remove one token from a heap.
              The remainder may either be left as a single heap; or split
              into exactly three heaps, not all the same; or split into
              exactly four pairwise unequal heaps.  (Note that
              $'r' = 27 = (1 | 2 | 8 | 16)$ and
              $'g' = 16$)
          <li>$0.&amp;127;!&amp;64;$ - Either: remove one
              token from a heap, splitting the remainder into ~at most
              six~ pairwise unequal heaps; or remove two tokens from
              a heap, splitting the remainder into ~exactly six~
              heaps (with no restrictions on heap size)
      </ul>

++ Rules by Procedures ++

If you want to construct a heap game that can't be specified using any
combination of take-and-break codes, you can use a procedure: just type

$hr := game.heap.HeapRules.MakeRules(f)$

where $f$ is a procedure.  $f$ should take integers as inputs, and return
a list of lists of integers.  Then $f(n)$ will be interpreted as a list of 
possible moves from a heap of size $n$.  Each "move" is itself a 
list of resultant component heaps.  For example, Dawson's Kayles ("0.07", 
take 2 tokens from any heap, optionally splitting into two heaps) could be 
represented by

$f := n -\> listof([k,n-k-2] for k from 0 to n-2)$

You can use this to specify 
rules for heap games with arbitrarily complicated logic.  (But be aware that the
calculations will be slower than using use the built-in codes.)

<!--
+ + Misère Canonical Forms + +

CGSuite also supports misère
canonical forms of games, as described in Winning Ways and ONaG,
though the notation used is slightly different.  Every
misère canonical form starts with
a star, followed by an expression in brackets.  The expression
may be a single number, representing a nim-heap, or a sequence of
numbers, representing a game with those nim-heaps as options. 

Thus $*[2]$ is a nim-heap
of size two, and $*[42]$ is the
misère canonical form whose
options are $*[4]$ and $*[2]$.  A game with only one option is represented
by subscripting the option with a $#$ (pronounced "sharp"), so $*[2#]$ refers to
the misère canonical form whose
only option is the nim-heap *[2].  Subscripts are also used to
represent ~sums~ of games.  For example, $*[2<sub>2</sub>]$ is
the sum $*[2] + *[2]$. 

You can enter subscripts on the worksheet by enclosing them in
nested brackets, so $*[2<sub>2</sub>]$ can be entered as

$*[2[2]]$

which means the same as the sum

$*[2] + *[2]$

A convenient shorthand is available for the subscripted slash denoting games
with one option: you can omit the subscript brackets and type

$*[2#]$

for the game $*[2#]$, which is defined to be { *[2] }. 
 
Subscripted options may also be concatenated, so

$*[2[2]2#20]$

is the game with the four options *[2<sub>2</sub>], *[2<sub>#</sub>],
*[2], and *[0].  Parens can be used for grouping:

$*[(2#320)#(32)]$

denotes the game

${ { *[2<sub>#</sub>320] }, *[32] }$ 

Subscripts can be "chained", so

$*[2[/22//2]]$

denotes the misère canonical
form $*[2<sub>#22##2</sub>]$, which is equal to

${ { {*[2]} + *[2] + *[2] } } + *[2]$

If $g$ is any impartial game, then

$g.MisereCanonicalForm$

returns its canonical form.  For example,

$Heap("0.77", 15).MisereCanonicalForm$

gives the canonical form of a Kayles heap of size 15.

+ + Misère Quotients + +

The ~MisereSolver~ plug-in, bundled with CGSuite, can be used to compute 
misère quotients.  It's turned off by 
default; to load it: go to Tools/Plug-in Manager; click "MisereSolver"; and 
click "Load".  Then you can type:

$MisereQuotient(G)$

for the quotient of a particular game or canonical form;

$MisereQuotient("0.77")$

for the quotient of a heap game;

$MisereQuotient("0.77" : Heap := 24)$

for a particular partial quotient.

It's returned as a two-element list.  The first element is a commutative 
monoid presentation; the second lists the P-portion.  See the
<a href=\"glossary.html\">Glossary of Methods</a> for a list of available methods.

You can also run ~MisereSolver~ directly from the commandline; this is 
often useful for exploring large and complicated quotients.  Change to the $plugins/$ 
directory (where $misere.jar$ is located) and type

$java -jar misere.jar$

for help.
-->