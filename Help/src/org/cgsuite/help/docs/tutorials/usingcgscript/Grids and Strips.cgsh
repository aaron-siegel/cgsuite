This section describes several tools included with CGSuite to assist with game implementation.

##TOC##

++ Grids ++

A ~grid~ is a matrix of integers with a fixed number of rows and columns.  CGScript provides dedicated support for grids
via a utility class, $cgsuite.util.Grid$, and associated game skeleton, $game.GridGame$.

Games such as Clobber that are played on grids will normally be subclasses of $GridGame$, which implements the nuts and
bolts of constructing, displaying and exploring grid-based positions.  An example of $GridGame$ usage was given in the
first section of this tutorial ([[Three Examples]]); this section will focus on the underlying utility classes.

A blank $Grid$ can be created by passing the dimensions of the grid to its constructor.  For example

$grid := Grid(3,4)$

constructs an empty grid with 3 rows and 4 columns.  Grid values can be accessed and assigned with brackets; for
example

$grid[1,3] := 5$

puts the value 5 at row 1, column 3, and

$grid[1,3]$

retrieves it.

Grids can accept any value between $-128$ and $127$.  The default value for all entries in a newly constructed grid
is 0.  Retrieving a value from a location out of bounds returns $nil$.  For example, in the $3x4$ grid above, any of
the following would return $nil$:

$grid[0,3]
grid[4,4]
grid[-8,20]$

Grids can also be constructed by parsing strings, using the static method $Grid.ParseGrid$.  For example:

$Grid.ParseGrid("xox.|..ox|oxx.", ".xo")$

constructs the following 3x4 grid:

$1210
0021
2110$

The second argument to $ParseGrid$ (in this case $".xo"$) is the ~character map~ which describes the mapping between
symbols and grid values.  The first character in the map corresponds to grid value 0, the second to grid value 1, etc.

++ Utility Methods ++

CGScript provides several utility methods for manipulating grids.
<ul>
<li>$SubGrid(m1,n1,m2,n2)$ - constructs a new grid corresponding to the rectangular portion of this grid bounded by
$(m1,n1)$ and $(m2,n2)$.
<li>$Paste(grid,m,n)$ - pastes a copy of the specified $grid$ onto this one, with coordinate $(1,1)$ of $grid$
aligning with $(m,n)$ of $this$.
<li>$Decompose(boundaryValue)$ - decomposes this grid along the boundary $boundaryValue$.  This method will separate
the grid into orthogonally connected regions, with the specified boundary.  The return value will be a list of grids,
each of minimal size to represent the corresponding region.  This is useful for games that tend to decompose into
disjoint subregions.
<li>$LibertyCount(m,n,libertyValue)$ - determines the number of liberties for the contiguous block at $(m,n)$, defined
as follows.  Let $x$ be the grid value at $(m,n)$.  CGScript first determines the set of all grid locations that are
orthogonally connected to $(m,n)$ entirely by entries of value $x$.  Then CGScript determines the number of entries with
value $libertyValue$ that are orthogonally adjacent to some member of this set.  This number is the return value of
$LibertyCount$.
</ul>

++ Strips ++

A ~strip game~ is a game played on a 1-by-n grid.  The $Grid$ class is cumbersome for strip games, so CGScript provides
a special subclass, $Strip$, and an associated $StripGame$ skeleton.  The API is the similar to $Grid$, except that
a single number (the strip location) is used in place of a pair of grid coordinates.  For example,

$strip := Strip(8)$

constructs a strip of length 8, and syntax like $strip[3]$, etc., is used to access it.

++ Symmetries ++

CGScript also provides tools for symmetry checking.  This can greatly speed up implementations of games where symmetries
are common.  The eight symmetries are defined in the $cgsuite.util.Symmetry$ enum.

$Grid.Permute(symmetry)$ constructs a new grid, obtained by permuting this grid according to the specified symmetry.
For example,

$grid := Grid(3,4); grid.Permute(Symmetry.RotateClockwise)$

would return an empty 4x3 grid.

$Grid.SymmetryInvariant(symmetries)$ is the method used most often by game implementations.  The input is a ~collection~
of symmetries, $S$, representing the elements of a symmetry group.  $S$ will ordinarily be one of the values
$Symmetry.Reflection$, $Symmetry.Rotational$ or $Symmetry.Eightfold$, but it's allowed to be any group of symmetries.
The return value will be another grid, obtained by applying some element of $S$ to this grid.  Crucially,
$SymmetryInvariant$ will return the same value if applied to any two grids that are symmetric according to $S$.

Typically, game implementations will override $CanonicalForm$ (or $NimValue$ in the case of impartial games) to return
the canonical form of the $SymmetryInvariant$ representation of $g$, rather than $g$ itself.  This ensures that no extra
work is done to compute canonical forms of symmetric positions.

A word of caution: be judicious in checking for symmetries.  For games where symmetries are common (such as
Domineering), it can provide an enormous speed gain.  For other games, however, it can actually have the opposite
effect.  For example, Amazons is ostensibly symmetric, but in practice symmetries are rarely encountered as followers
of a given starting position.  Adding symmetry checking to Amazons actually results in ~slower~ performance:
CGSuite does a lot of extra work checking all the different symmetries, and realizes little benefit.