##TOC##

++ The Structure of a Class ++

Every class in CGSuite is associated with a $.cgs$ file.  The class declaration begins with a line such as

$class Clobber extends GridGame$

specifying the ~name~ of the class and (optionally) its ~parent~ class.  The class name ~must~ be identical to the
filename of its $.cgs$ file.

Every class belongs to a ~package~, which is defined by the directory where the $.cgs$ file resides.  If the $.cgs$
file is given by, say,

$game/grid/Clobber.cgs$

(relative to either the User Folder or the System Folder), then the package will be $game.grid$, so the
~qualified name~ of the class will be $game.grid.Clobber$.

Three packages in CGSuite are special: $cgsuite.lang$, $cgsuite.util$, and $game$.  These packages are
~automatic imports~.  References to their classes don't need to be qualified: you can type simply $Integer$ instead of
$cgsuite.lang.Integer$.  Classes from any other package, such as $game.grid$, need to be qualified (unless you're using
import statements - see below).

++ Declarations ++

The remainder of the class is a sequence of declarations: variables, methods, and properties.

A variable declaration has the form

$var myVar;$

This establishes $myVar$ as a member variable.  By convention, variables and packages start with lowercase letters, and
classes, methods and properties are capitalized.  (However, this is not an absolute requirement.)

A method declaration has the form

$method MyMethod(parameters)
    // Method body
end$

Here $parameters$ is a comma-separated list of the method parameters.  Each parameter can optionally be annotated with
a type.  For example, the full declaration might be

$method MyMethod(obj, Integer n, String str)$

which would define a method with three parameters.  The $obj$ parameter is unrestricted, while the $n$ and $str$
parameters are constrained to be an $Integer$ and a $String$, respectively.

Note that CGScript is ~not~ a typed language.  The constraint "$Integer n$" ensures that $n$ will be an $Integer$ when
it's passed as an argument to the method, but it does not constrain the values that can be assigned later to $n$.  For
example, the following code is completely legal:

$method MyMethod(Integer n)
    n := "This is not an integer.";
end$

A method whose name is identical to the class name is a ~constructor~, which is used to initialize new instances of the
class.  If some of the constructor parameter names are identical to member variable names, then the corresponding
member variables will be automatically assigned when the object is created.

A property declaration has the form

$property MyProperty.get
    // Property body
end$

A property is really just a zero-parameter method, but the calling syntax is different; you'll type

$myObject.MyProperty$

to activate the property, as opposed to

$myObject.MyMethod()$

for a zero-parameter method.

We'll discuss property ~setters~ in a later chapter, [[Advanced Language Features]].

Methods and properties are visible to all objects, but variables are visible only to the declaring class and its
descendants.  (In programming language theory these are ~public~ and ~protected~ access modes, respectively.)

++ Inheritance ++

Every class inherits from one or more ~parent classes~ as defined by its $extends$ clause.  A special class, $Object$,
is automatically an ancestor of every class.  The $extends$ clause is optional, and the declaration

$class MyClass$

without an $extends$ clause is equivalent to

$class MyClass extends Object$

Multiple inheritance is permitted; for example, we could implement Cram (impartial Domineering) with a declaration like

$class Cram extends GridGame, ImpartialGame$

A class can ~override~ methods and properties from its ancestors.  This is done through the $override$ keyword:

$override method MyMethod(parameters)$

This specifies that $MyMethod$ is also declared by one or more ancestors, and we are ~redefining~ it in the subclass.
If a method has the same name as a method in some ancestor class, then the $override$ keyword must be specified.

++ this and is ++

The keyword $this$ can be used from within a method to refer to "the current object" - that is, the object on which
the method is being invoked.  You can type

$this.Class$

to get the object's class.  Consider the following example:

$class MyClass
    method PrintMyClass()
        Worksheet.Print(this.Class);
    end
end$

Now calling $obj.PrintMyClass()$ will ~not~ necessarily print "MyClass", since $obj$ might be a ~subclass~ of $MyClass$.
However, it ~is~ guaranteed to print the name of a subclass of $MyClass$.

Another handy tool is the keyword $is$.  You can use it to determine whether an object matches a particular type.
For example,

$obj is MyClass$

will be $true$ if either $obj$ has type $MyClass$, ~or~ its type is a descendant of $MyClass$.

++ Static Declarations ++

Some variables, properties and methods are ~static~.  Whereas ordinary variables are members of class ~instances~,
static variables are members of the class itself - so they exist just once, and are accessible ~statically~, without
having to create any objects of the class.

Static variables can be declared with the static keyword:

$static var myStaticVar;$

Likewise static methods:

$static method MyStaticMethod(parameters)$

You can access static methods by calling the class directly, for example,

$MyClass.MyStaticMethod$

A typical example is the $Worksheet.Print$ method, which is a static method of class $Worksheet$.

++ Enums ++

Certain classes come equipped with a fixed set of instances.  For example, the $Player$ class has just two instances,
$Player.Left$ and $Player.Right$; and $OutcomeClass$ has instances $OutcomeClass.P$, $OutcomeClass.N$, etc.

Such classes are known as ~enumerated types~, or enums, and they're treated specially in CGScript.  An enum can be
declared like so:

$enum OutcomeClass

    P,
    N,
    L,
    R;

end$

This declares an enum with exactly four instances; no others can ever be constructed.  $OutcomeClass$ is a particularly
simple example; more complex enums have methods and properties of their own (for an example, see the
$Player$ enum in $cgsuite.game$).

++ Imports ++

Sometimes you'll need to refer frequently to a class that's not in one of the automatic import packages.  In such cases
it can become cumbersome to qualify the class name repeatedly.  If you put (say)

$import game.grid.Clobber;$

at the top of your .cgs file, ~before~ the class or enum declaration, then throughout the rest of the file you can
refer directly to $Clobber$.  You can also type

$import game.grid.*;$

to import ~all~ the classes in the $game.grid$ package.