We'll begin with three example classes of increasing sophistication: Nim; the Partizan Subtraction Games; and Clobber.

##TOC##

++ Example: Nim ++

Every class in CGScript is stored in a file with the $.cgs$ extension.  For example, $examples.Clobber$ is stored in
the file $examples/Clobber.cgs$.  We'll take a look at this file a bit later, but first let's start with something
simpler: Nim.

In the Browser window of CGSuite, you'll see a list of files and directories that store $.cgs$ files.  (If you don't
see the Browser, click "Browser" in the Window menu, and then you should see it.)  Open up the examples folder, and
double-click $Nim.cgs$.

Now you'll see the code that specifies the $examples.Nim$ class in CGScript.  The first line of code (aside from the
comments) is

$class Nim extends ImpartialGame$

This declares $Nim$ as a subclass of $ImpartialGame$, indicating (obviously) that it's impartial.  The next line

$var n;$

declares $n$ (the heap size) as a ~member variable~ of $Nim$.  Each object of class $Nim$ will have a specific value of
$n$ associated with it.

The next two lines

$method Nim(Integer n)
end$

declare the constructor for $Nim$.  Note that the constructor doesn't do anything at all - it just takes in $n$, the
heap size, as a parameter.  Since the paramter name matches the name of the member variable $n$, it's automatically
assigned and we don't need to take any other action.

The meat of the class is the $Options$ method:

$override method Options(Player player)

    return setof(Nim(k) for k from 0 to n-1);

end$

Its purpose is to construct this position's options.  It takes a single parameter, $player$, of class $Player$.
The $Player$ class has just two instances, $Left$ and $Right$, and the value of the $player$ parameter determines
whose options we should be constructing.  Since Nim is impartial, we ignore the $player$ parameter and return the same answer
regardless of its value.

The answer, of course, is just the set of all Nim positions with strictly smaller heap size.

And that's everything we need in order to implement Nim!  However the $Nim$ class has one additional element:

$override property ToString.get

    return "Nim(" + n.ToString + ")";

end$

This simply tells cgsuite how to display a $Nim$ position in the worksheet or the explorer.

To test it out, try typing

$g := examples.Nim(8)$

and then $g.CanonicalForm$ to get the answer, $*8$.  That's hardly earth-shattering, so let's try a more sophisticated
example.

++ Example: Partizan Subtraction Games ++

The ~Partizan Subtraction Games~ were described in the previous tutorial, <a href=\"CGScript.html\">CGScript</a>.
Open up the file $PartizanSubtraction.cgs$ (in the $examples$ directory) to see CGSuite's implementation of it.

There are three parameters: $leftSet$ and $rightSet$, representing the Left and Right subtraction sets; and $n$, the
heap size.  The first major difference with Nim is in the declaration:

$class PartizanSubtraction extends Game$

Unlike Nim, the Partizan Subtraction game is partizan (go figure).  So instead of extending $ImpartialGame$, it
extends the more basic class $Game$.  $Game$, in fact, is the ancestor of ~every~ game implementation in CGSuite
(including $ImpartialGame$ and $Nim$).

You'll notice that the constructor looks much like the $Nim$ constructor; the only difference is that
we have to remember to initialize all three variables.

Things get more interesting with the $Options$ method.  The first line:

$subtractionSet := if player == Player.Left then leftSet else rightSet end;$

sets a variable, $subtractionSet$, depending on the player.  The next line:

$return setof(PartizanSubtraction(leftSet, rightSet, n - k)
               for k in subtractionSet where n-k >= 0);$

does the actual work of constructing the options.  It's pretty much self-explanatory: Left's moves from heap $n$ are to
heaps $n-k$, where $k$ ranges over all elements of $leftSet$ satisfying $n-k >= 0$.

You'll note that $subtractionSet$ was
not declared as a member variable of $PartizanSubtraction$ (that is, it was not mentioned in the $var$ statements at
the top of the file).  There are actually two types of variables that can appear in a CGScript class:
<ol>
<li>~Member variables~, which are declared using $var$ statements.  They are normally used to store intrinsic
properties or parameters of the class.
<li>~Local variables~.  Any variable
that is not declared with a $var$ statement is automatically assumed to be a local variable.  They are normally used
as temporary storage for doing complex calculations.
</ol>

Another interesting feature of $PartizanSubtraction$ is that one (or both) of the subtraction sets might contain $0$,
suggesting a pass move.  CGSuite handles this case correctly: when a game $g$ appears as a follower of itself, the
game is understood to be loopy.  Try the following command:

$examples.PartizanSubtraction({0},{1},10).CanonicalForm$

++ Example: Clobber ++

++ The System Folder ++

In some of these files you might see expressions like

$java "atomicWeight"$

These are the connection points where CGScript interfaces with Java, its host language.  You won't ordinarily need to
use the $java$ keyword at all, unless you want to get involved in low-level CGSuite programming.  And I suspect that if
you're in that camp, then you'll be able to figure out the semantics of the $java$ connectors on your own...

++ Exercises ++

<ol>
<li>Write a new class $PartizanSubtraction2$ which is just like $examples.PartizanSubtraction$, but which takes a pair
of ~procedures~ f_L_ and f_R_, enumerating the (possibly infinite) subtraction sets.  For example,

$PartizanSubtraction2(n -> n^2, n -> n*(n+1)/2, 10)$

would construct a heap of size 10 in the game where Left can take a perfect-square number of tokens, and Right a
triangular number of tokens.  (You can assume that f_L_ and f_R_ are nondecreasing as functions of ~n~.)
</ol>