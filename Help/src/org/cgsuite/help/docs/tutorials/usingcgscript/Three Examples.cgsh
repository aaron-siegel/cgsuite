We'll begin with three example classes of increasing sophistication: Nim; the Partizan Subtraction Games; and Clobber.

##TOC##

++ Example: Nim ++

Every class in CGScript is stored in a file with the $.cgs$ extension.  For example, $examples.Clobber$ is stored in
the file $examples/Clobber.cgs$.  We'll take a look at this file a bit later, but first let's start with something
simpler: Nim.

In the Browser window of CGSuite, you'll see a list of files and directories that store $.cgs$ files.  (If you don't
see the Browser, click "Browser" in the Window menu, and then you should see it.)  Open up the examples folder, and
double-click $Nim.cgs$.

Now you'll see the code that specifies the $examples.Nim$ class in CGScript.  Throughout the code are various comments,
which are greyed out in the editor window.  These comments are ignored by CGSuite; everything else is part of the class
description.

The first line of code (aside from the comments) is

$class Nim extends ImpartialGame$

This declares $Nim$ as a subclass of $ImpartialGame$, indicating (obviously) that it's impartial.  The next line

$var n;$

declares $n$ (the heap size) as a ~member variable~ of $Nim$.  Each object of class $Nim$ will have a specific value of
$n$ associated with it.

The next two lines

$method Nim(Integer n)
end$

declare the constructor for $Nim$.  Note that the constructor doesn't do anything at all - it just takes in $n$, the
heap size, as a parameter.  Since the paramter name matches the name of the member variable $n$, it's automatically
assigned and we don't need to take any other action.

The meat of the class is the $Options$ method:

$override method Options(Player player)

    return setof(Nim(k) for k from 0 to n-1);

end$

Its purpose is to construct this position's options.  It takes a single parameter, $player$, of class $Player$.
The $Player$ class has just two instances, $Left$ and $Right$, and the value of the $player$ parameter determines
whose options we should be constructing.  Since Nim is impartial, we ignore the $player$ parameter and return the same answer
regardless of its value.

The answer, of course, is just the set of all Nim positions with strictly smaller heap size.

And that's everything we need in order to implement Nim!  However the $Nim$ class has one additional element:

$override property ToString.get

    return "Nim(" + n.ToString + ")";

end$

This simply tells cgsuite how to display a $Nim$ position in the worksheet or the explorer.

To test it out, click back over to the worksheet and enter

$g := examples.Nim(8)$

and then $g.CanonicalForm$ to get the answer, $*8$.  That's hardly earth-shattering, so let's try a more sophisticated
example.

++ Example: Partizan Subtraction Games ++

The ~Partizan Subtraction Games~ were described in the
[[Getting Started][../gettingstarted/CGScript.html]] tutorial.
Open up the file $PartizanSubtraction.cgs$ (in the $examples$ directory) to see CGSuite's implementation of it.

There are three parameters: $leftSet$ and $rightSet$, representing the Left and Right subtraction sets; and $n$, the
heap size.  The first major difference with Nim is in the declaration:

$class PartizanSubtraction extends Game$

Unlike Nim, the Partizan Subtraction game is partizan.  So instead of extending $ImpartialGame$, it
extends the more basic class $Game$.  The $Game$ class, in fact, is the ancestor of ~every~ game implementation in CGSuite
(including $ImpartialGame$ and $Nim$).

You'll notice that the constructor looks much like the $Nim$ constructor; the only difference is that
we have to remember to initialize all three variables.

Things get more interesting with the $Options$ method.  The first line:

$subtractionSet := if player == Player.Left then leftSet else rightSet end;$

sets a variable, $subtractionSet$, depending on the player.  The next line:

$return setof(PartizanSubtraction(leftSet, rightSet, n - k)
               for k in subtractionSet where n-k >= 0);$

does the actual work of constructing the options.  It's pretty much self-explanatory: Left's moves from heap $n$ are to
heaps $n-k$, where $k$ ranges over all elements of $leftSet$ satisfying $n-k >= 0$.

You'll note that $subtractionSet$ was
not declared as a member variable of $PartizanSubtraction$ (that is, it was not mentioned in the $var$ statements at
the top of the file).  There are actually two types of variables that can appear in a CGScript class:
<ol>
<li>~Member variables~, which are declared using $var$ statements.  They are normally used to store intrinsic
properties or parameters of the class.
<li>~Local variables~.  Any variable
that is not declared with a $var$ statement is automatically assumed to be a local variable.  They are normally used
as temporary storage for doing complex calculations.
</ol>

Another interesting feature of $PartizanSubtraction$ is that one (or both) of the subtraction sets might contain $0$,
suggesting a pass move.  CGSuite handles this case correctly: when a game $g$ appears as a follower of itself, the
game is understood to be loopy.  Try the following command:

$examples.PartizanSubtraction({0},{1},10).CanonicalForm$

++ Example: Clobber ++

Now let's turn to a more complex example: Clobber.  Open up the $Clobber.cgs$ file to see CGSuite's implementation of
Clobber.  Notice that it extends a special base class, $GridGame$.  The $GridGame$ class provides generalized
mechanisms for constructing, displaying and editing games played on grids.  All that's left for us to do is to code up
the rules to Clobber.

First note the line in the constructor:

$    this.GridGame(grid);$

This tells CGSuite to call the constructor for the parent class, $GridGame$.  The $GridGame$ constructor provides
various conveniences, such as the familiar notation for constructing grids from strings (as in, for example,
$Clobber("xox|ox.")$).   By calling the parent class constructor, the $Clobber$ class can use these features, too.

The $Options$ method is somewhat more complicated than in the previous examples.  The rules to Clobber are
more sophisticated, so it's not practical to construct the options all at once with a single $setof$ command.  Instead,
we loop through all squares on the board looking for legal moves.  The first line of code:

$    options := {};$

initializes the $options$ variable to the empty set.  Next, we search through the board looking for legal moves,
adding an element to the set each time we find one.  The next three lines of code are the following:

$    for m from 1 to grid.RowCount do
        for n from 1 to grid.ColumnCount do
            if grid[m,n] == player then$

These scan through the $grid$, indexed by the ordered pair $[m,n]$.  The expression $grid[m,n]$ looks up the value of
the grid at coordinate $[m,n]$.  The expression $grid[m,n] == player$ tests whether the grid coordinate $[m,n]$ is
occupied by a stone of the player's color.

This last statement requires a bit more discussion.  Internally, CGSuite stores grids as matrices of integers.
Clobber uses the integers 0, 1 and 2 to represent an empty space, a black stone, and a white stone, respectively.  Now
the $player$ object isn't an integer - it's actually an object of the special class $Player$, which has two values,
$Player.Left$ and $Player.Right$.  But CGSuite understands that $Player.Left$ means the same thing as $1$, and
$Player.Right$ means the same thing as $2$, for the purpose of looking up values in grids.  This is quite convenient, as
it lets us refer to grid values abstractly in terms of the player.  The only thing we have to remember is that 0 is an
empty space (which isn't much of a stretch).

Now comes the meat of the class.  The next line:

$                for d in Direction.Orthogonal do$

iterates over all ~orthogonal~ directions (North, East, South, West).  Remember, this line is reached any time we've
found a stone of our color, so now we have to look in all four directions to see if there's an enemy stone.  That
check is accomplished by the next line:

$                    if grid[m+d.RowShift,n+d.ColumnShift] == player.Opponent then$

which peeks into the grid location at $[m+d.RowShift,n+d.ColumnShift]$.  Here $RowShift$ and $ColumnShift$ are
properties of the $Direction$ class which tell how far to look in each direction.  For example, if $d$ has the value
$Direction.West$, then $d.RowShift$ will be 0, and $d.ColumnShift$ will be -1.  Sometimes this might cause CGSuite to
step off the board - for example, if $d$ is $Direction.West$, and $n$ is $1$, then $n+d.ColumnShift$ will be $0$, which
is past the edge of the board.  In this case the grid lookup will return $nil$.  This ensures that the condition

$grid[x,y] == z$

will be true just if $[x,y]$ is within the boundaries of the grid, ~and~ has the value $z$ at that location.

Whew!  If we've made it this far, then $[m,n]$ contains a stone of our color, and there's an enemy stone in direction
$d$.  So it's a legal move to clobber the enemy stone, and the next four lines construct the resulting option.

$                        copy := grid;
                        copy[m,n] := 0;
                        copy[m+d.RowShift,n+d.ColumnShift] := player;
                        options.Add(Clobber(copy));$

We clear the location $[m,n]$, replace the new location with a stone of our color, and put the result into the
$options$ set.

That's it for the $Options$ method.  Note that the $Clobber$ class has two other properties:

$override property CharMap.get
    return ".xo";
end$

This just tells CGSuite that the grid values 0, 1, 2 are represented by characters ., x, o, respectively, when
displaying (or parsing) Clobber positions as strings.  Likewise,

$override property Icons.get
    return
    [
        GridIcon.Blank,
        GridIcon.BlackStone,
        GridIcon.WhiteStone
    ];
end$

indicates that in graphical displays, CGSuite should use a blank tile, a black stone, and a white stone.  Different
grid games, obviously, use different (customized) combinations of characters and icons.

++ The System Folder ++

This concludes our tour of examples.  The rest of this tutorial is a detailed discussion of the various language
features of CGScript.  As we proceed, you'll probably want some additional examples to refer to.  Fortunately, CGSuite
provides a large library of them.  In the Browser, click on the drop-down box that says "User Folder".  Change this
to "System Folder".  This is where CGSuite's library classes are stored - everything from the core classes like
$Integer$, to reference implementations of games like $Amazons$ and $Domineering$.  All of these are accessible from
the Worksheet; for example, you can type

$game.grid.Amazons("x...|o...")$

to construct a typical 2x4 Amazons position.  You can also open them up in the editor and look at the source code.
Studying the built-in examples is one of the best ways to become proficient in CGScript.

In some of these files you might see expressions like

$java "atomicWeight"$

These are the connection points where CGScript interfaces with Java, its host language.  You won't ordinarily need to
use the $java$ keyword at all, unless you want to get involved in low-level CGSuite programming.

++ Exercises ++

<ol>
<li>Write a new class $PartizanSubtraction2$ which is just like $examples.PartizanSubtraction$, but which takes a pair
of ~procedures~ f_L_ and f_R_, enumerating the (possibly infinite) subtraction sets.  For example,

$PartizanSubtraction2(n -> n^2, n -> n*(n+1)/2, 10)$

would construct a heap of size 10 in the game where Left can take a perfect-square number of tokens, and Right a
triangular number of tokens.  (You can assume that f_L_ and f_R_ are nondecreasing as functions of ~n~.)
</ol>