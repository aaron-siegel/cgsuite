In the previous tutorial, we saw how to write simple expression in CGScript.  In this chapter, we'll see how to specify
rulesets by designing new classes in CGScript.

##TOC##

++ Example: Nim ++

Every class in CGScript is stored in a file with the $.cgs$ extension.  For example, $examples.Clobber$ is stored in
the file $examples/Clobber.cgs$.  We'll take a look at this file a bit later, but first let's start with something
simpler: Nim.

In the Browser window of CGSuite, you'll see a list of files and directories that store $.cgs$ files.  (If you don't
see the Browser, click "Browser" in the Window menu, and then you should see it.)  Open up the examples folder, and
double-click $Nim.cgs$.

Now you'll see the code that specifies the $examples.Nim$ class in CGScript.  The first line of code (aside from the
comments) is

$class Nim extends ImpartialGame$

This declares $Nim$ as a subclass of $ImpartialGame$, indicating (obviously) that it's impartial.  The next line

$var n;$

declares $n$ (the heap size) as a ~member variable~ of $Nim$.  Each object of class $Nim$ will have a specific value of
$n$ associated with it.

The next two lines

$method Nim(Integer n)
end$

declare the constructor for $Nim$.  Note that the constructor doesn't do anything at all - it just takes in $n$, the
heap size, as a parameter.  Since the paramter name matches the name of the member variable $n$, it's automatically
assigned and we don't need to take any other action.

The meat of the class is the $Options$ method:

$method Options(Player player)

    return setof(Nim(k) for k from 0 to n-1);

end$



++ The System Folder ++

In some of these files you might see expressions like

$java "atomicWeight"$

These are the connection points where CGScript interfaces with Java, its host language.  You won't ordinarily need to
use the $java$ keyword at all, unless you want to get involved in low-level CGSuite programming.  And I suspect that if
you're in that camp, then you'll be able to figure out the semantics of the $java$ connectors on your own...

++ Exercises ++

<ol>
<li>Write a new class $PartizanSubtraction2$ which is just like $examples.PartizanSubtraction$, but which takes a pair
of ~procedures~ f_L_ and f_R_, enumerating the (possibly infinite) subtraction sets.  For example,

$PartizanSubtraction2(n -> n^2, n -> n*(n+1)/2, 10)$

would construct a heap of size 10 in the game where Left can take a perfect-square number of tokens, and Right a
triangular number of tokens.  (You can assume that f_L_ and f_R_ are nondecreasing as functions of ~n~.)
</ol>