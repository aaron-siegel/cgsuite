/*${cgsuite.banner}*/

class CanonicalStopperGame extends StopperSidedGame : java "org.cgsuite.lang.game.CanonicalStopperGame"

    override method op+(CanonicalStopperGame h) : java "add";
    override method op-(CanonicalStopperGame h) : java "subtract";
    override method op neg() : java "negate";
    override method Leq(CanonicalStopperGame h) : java "leq";
    override method op:(CanonicalStopperGame h) : java "ordinalSum";
    method op&(CanonicalStopperGame h) : java "asOnside";
    
    property Degree.get
        return Upsum(-this);
    end

    method Downsum(CanonicalStopperGame h)
        return (this + h).Offside;
    end
    
    method DownsumVariety(CanonicalStopperGame degree)
        if not degree.IsIdempotent then
            error("degree must be an idempotent.");
        end
        return Downsum((-this).Upsum(degree));
    end
    
    property IsIdempotent.get
        return this + this == this;
    end
    
    override property IsInteger.get
        return false;
    end
    
    override property IsNumber.get
        return false;
    end
    
    property IsPlumtree.get : java "isPlumtree";
    
    property IsPseudonumber.get
        if IsNumber then
            return true;
        end
        x := LeftStop;
        return this == {x|pass} or this == {pass|x};
    end
        
    override property LeftOptions.get : java "getLeftOptions";
    
    override property LeftStop.get : java "leftStop";
    
    method LoopfreeExpansion(Integer n)
        
        if n == 0 then
            return 0;
        elseif n < 0 then
            error("Expecting a positive integer.");
        else
            return { setof(g.LoopfreeExpansion(n-1) for g in LeftOptions)
                   | setof(g.LoopfreeExpansion(n-1) for g in RightOptions) };
        end
        
    end

    property Miny.get
        return { this | 0 || 0 };
    end
    
    override property Offside.get
        return this;
    end
    
    override property Onside.get
        return this;
    end
    
    override method Options(Player player)
        if player == Player.Left then
            return LeftOptions;
        else
            return RightOptions;
        end
    end

    method OrdinalSum(CanonicalStopperGame h) : java "ordinalSum";
    
    override property RightOptions.get : java "getRightOptions";
    
    override property RightStop.get : java "rightStop";
    
    property Tiny.get
        return { 0 || 0 | -this };
    end
    
    method Upsum(CanonicalStopperGame h)
        return (this + h).Onside;
    end
    
    method UpsumVariety(CanonicalStopperGame degree)
        if not degree.IsIdempotent then
            error("degree must be an idempotent.");
        end
        return Upsum((-this).Downsum(-degree));
    end
    
    property Variety.get
        degree := Degree;
        V1 := UpsumVariety(degree);
        V2 := DownsumVariety(degree);
        if V1 == V2 then
            return V1;
        else
            error("Congratulations!  You've found a counterexample to the Stability Conjecture.  Please report this finding to asiegel@users.sourceforge.net.");
        end
    end
    
    method Pow(CanonicalStopperGame x)
    
        if x < 1 then
            error("Exponent must be >= 1.");
        end
        
        ro := RightOptions.AnyElement;
        
        if ro === nil or this != {0|ro} then
            error("Base must be of the form {0|H}.");
        end
        
        return { 0 | ro - PowTo(x-1) };
    
    end
    
    method PowTo(CanonicalStopperGame x)
    
        if x == 0 then
            return 0;
        elseif not x.IsPseudonumber then
            error("Exponent must be a pseudonumber.");
        elseif x < 0 then
            error("Exponent must be non-negative.");
        end
    
        return OrdinalSum(x.Blowup);
    
    end
    
    property Blowup.get
    
        if not IsPseudonumber or this <= 0 then
            error("Expecting a positive pseudonumber.");
        end
        
        if IsInteger then
            return this-1;
        end
        
        lo := LeftOptions.AnyElement;
        ro := RightOptions.AnyElement;
        
        if lo == this then
        
            if ro == nil then
                return {pass|};
            else
                return {pass|ro.Blowup};
            end
            
        elseif ro == this then
        
            if lo == 0 then
                return {|pass};
            else
                return {lo.Blowup|pass};
            end
            
        elseif lo == 0 then
        
            return { | ro.Blowup };
        
        else
        
            return { lo.Blowup | ro.Blowup };
            
        end
        
    end

end
